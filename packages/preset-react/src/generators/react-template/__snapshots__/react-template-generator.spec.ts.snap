// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`react-template generator should generate files for base template 1`] = `
{
  "src": {
    "children": {
      "favicon.ico": {
        "content": null,
        "isBinary": true,
        "path": "test/src/favicon.ico",
      },
    },
    "path": "test/src",
  },
  "webpack.config.js": {
    "content": [
      "const { composePlugins, withNx } = require('@nx/webpack');",
      "const { withReact } = require('@nx/react');",
      "// Nx plugins for webpack.",
      "module.exports = composePlugins(withNx(), withReact(), (config) => {",
      "// Update the webpack config as needed here.",
      "// e.g. \`config.plugins.push(new MyPlugin())\`",
      "config.ignoreWarnings = [/Failed to parse source map/];",
      "return config;",
      "});",
    ],
    "isBinary": false,
    "path": "test/webpack.config.js",
  },
}
`;

exports[`react-template generator should generate files for none template 1`] = `
{
  "src": {
    "children": {
      "app": {
        "children": {
          "app-layout.tsx": {
            "content": [
              "import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';",
              "import { ReactNode } from 'react';",
              "import { Link, useLocation } from 'react-router-dom';",
              "export function AppLayout({ children }: { children: ReactNode }) {",
              "const { pathname } = useLocation();",
              "return (",
              "<div>",
              "<div>",
              "<div>",
              "<Link to="/">",
              "@solana-developers/preset-react",
              "</Link>",
              "</div>",
              "<div>",
              "<WalletMultiButton />",
              "</div>",
              "</div>",
              "<div>{children}</div>",
              "<footer>",
              "<aside>",
              "<p>",
              "Powered by{' '}",
              "<a href='https://github.com/solana-developers/create-solana-dapp' target='_blank' rel='noopener noreferrer'>",
              "create-solana-dapp",
              "</a>",
              "</p>",
              "</aside>",
              "</footer>",
              "</div>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "test/src/app/app-layout.tsx",
          },
          "app-routes.tsx": {
            "content": [
              "import { useRoutes } from 'react-router-dom';",
              "export function AppRoutes() {",
              "return useRoutes([",
              "{",
              "index: true,",
              "path: '/',",
              "element: <div>Index</div>,",
              "},",
              "]);",
              "}",
            ],
            "isBinary": false,
            "path": "test/src/app/app-routes.tsx",
          },
          "app.tsx": {
            "content": [
              "import { AppLayout } from './app-layout';",
              "import { AppRoutes } from './app-routes';",
              "import { SolanaProvider } from './solana-provider';",
              "export function App() {",
              "return (",
              "<SolanaProvider>",
              "<AppLayout>",
              "<AppRoutes />",
              "</AppLayout>",
              "</SolanaProvider>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "test/src/app/app.tsx",
          },
          "solana-provider.tsx": {
            "content": [
              "import { WalletError } from '@solana/wallet-adapter-base';",
              "import {",
              "ConnectionProvider,",
              "WalletProvider,",
              "} from '@solana/wallet-adapter-react';",
              "import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';",
              "import { SolflareWalletAdapter } from '@solana/wallet-adapter-solflare';",
              "import { UnsafeBurnerWalletAdapter } from '@solana/wallet-adapter-unsafe-burner';",
              "import { Cluster, clusterApiUrl } from '@solana/web3.js';",
              "import {",
              "createContext,",
              "ReactNode,",
              "useCallback,",
              "useContext,",
              "useMemo,",
              "useState,",
              "} from 'react';",
              "require('@solana/wallet-adapter-react-ui/styles.css');",
              "export interface SolanaProviderContext {",
              "cluster: Cluster;",
              "endpoint: string;",
              "setCluster?: (cluster: Cluster) => void;",
              "}",
              "const Context = createContext<SolanaProviderContext>(",
              "{} as SolanaProviderContext",
              ");",
              "export function SolanaProvider({ children }: { children: ReactNode }) {",
              "const [cluster, setCluster] = useState<Cluster>('devnet');",
              "const endpoint = useMemo(() => clusterApiUrl(cluster), [cluster]);",
              "const wallets = useMemo(",
              "() => [new UnsafeBurnerWalletAdapter(), new SolflareWalletAdapter()],",
              "[cluster]",
              ");",
              "const onError = useCallback((error: WalletError) => {",
              "console.error(error);",
              "}, []);",
              "const value: SolanaProviderContext = {",
              "cluster,",
              "endpoint,",
              "setCluster,",
              "};",
              "return (",
              "<ConnectionProvider endpoint={endpoint}>",
              "<WalletProvider wallets={wallets} onError={onError} autoConnect={true}>",
              "<WalletModalProvider>",
              "<Context.Provider value={value}>{children}</Context.Provider>",
              "</WalletModalProvider>",
              "</WalletProvider>",
              "</ConnectionProvider>",
              ");",
              "}",
              "export function useSolana() {",
              "return useContext(Context);",
              "}",
            ],
            "isBinary": false,
            "path": "test/src/app/solana-provider.tsx",
          },
        },
        "path": "test/src/app",
      },
      "index.html": {
        "content": [
          "<!DOCTYPE html>",
          "<html lang="en">",
          "<head>",
          "<meta charset="utf-8" />",
          "<title>@solana-developers/preset-react</title>",
          "<base href="/" />",
          "<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />",
          "<link rel="icon" type="image/x-icon" href="favicon.ico" />",
          "</head>",
          "<body>",
          "<div id="root"></div>",
          "</body>",
          "</html>",
        ],
        "isBinary": false,
        "path": "test/src/index.html",
      },
      "main.tsx": {
        "content": [
          "import { StrictMode } from 'react';",
          "import * as ReactDOM from 'react-dom/client';",
          "import { BrowserRouter } from 'react-router-dom';",
          "import { App } from './app/app';",
          "const root = ReactDOM.createRoot(",
          "document.getElementById('root') as HTMLElement",
          ");",
          "root.render(",
          "<StrictMode>",
          "<BrowserRouter>",
          "<App />",
          "</BrowserRouter>",
          "</StrictMode>",
          ");",
        ],
        "isBinary": false,
        "path": "test/src/main.tsx",
      },
      "styles.css": {
        "content": [
          "html,",
          "body,",
          "#root {",
          "height: 100%;",
          "}",
        ],
        "isBinary": false,
        "path": "test/src/styles.css",
      },
    },
    "path": "test/src",
  },
}
`;

exports[`react-template generator should generate files for tailwind template 1`] = `
{
  "src": {
    "children": {
      "app": {
        "children": {
          "app-layout.tsx": {
            "content": [
              "import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';",
              "import { ReactNode } from 'react';",
              "import { Link, useLocation } from 'react-router-dom';",
              "export function AppLayout({ children }: { children: ReactNode }) {",
              "const { pathname } = useLocation();",
              "const pages = [",
              "{ label: 'Airdrop', path: '/airdrop' },",
              "{ label: 'Page 1', path: '/page-1' },",
              "{ label: 'Page 2', path: '/page-2' },",
              "]",
              "return (",
              "<div className="h-full flex flex-col">",
              "<div className="navbar bg-base-300 text-neutral-content">",
              "<div className="flex-1">",
              "<Link to="/" className="btn btn-ghost normal-case text-xl">",
              "@solana-developers/preset-react",
              "</Link>",
              "<ul className="menu menu-horizontal px-1">",
              "{pages.map(({ label, path }) => (",
              "<li key={path}>",
              "<Link",
              "className={pathname.startsWith(path) ? 'active' : ''}",
              "to={path}",
              ">",
              "{label}",
              "</Link>",
              "</li>",
              "))}",
              "</ul>",
              "</div>",
              "<div className="flex-none">",
              "<WalletMultiButton />",
              "</div>",
              "</div>",
              "<div className="flex-grow">{children}</div>",
              "<footer className="footer footer-center p-4 bg-base-300 text-base-content">",
              "<aside>",
              "<p>Generated with @solana-developers/preset-react@0.0.1</p>",
              "</aside>",
              "</footer>",
              "</div>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "test/src/app/app-layout.tsx",
          },
          "app-routes.tsx": {
            "content": [
              "import { useRoutes } from 'react-router-dom';",
              "import { Airdrop } from './pages/airdrop';",
              "import { Page1 } from './pages/page-1';",
              "import { Page2 } from './pages/page-2';",
              "export function AppRoutes() {",
              "return useRoutes([",
              "{",
              "index: true,",
              "path: '/',",
              "element: <div>Index</div>,",
              "},",
              "{ path: '/airdrop', element: <Airdrop /> },",
              "{ path: '/page-1', element: <Page1 /> },",
              "{ path: '/page-2', element: <Page2 /> },",
              "]);",
              "}",
            ],
            "isBinary": false,
            "path": "test/src/app/app-routes.tsx",
          },
          "app.tsx": {
            "content": [
              "import { AppLayout } from './app-layout';",
              "import { AppRoutes } from './app-routes';",
              "import { SolanaProvider } from './solana-provider';",
              "export function App() {",
              "return (",
              "<SolanaProvider>",
              "<AppLayout>",
              "<AppRoutes />",
              "</AppLayout>",
              "</SolanaProvider>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "test/src/app/app.tsx",
          },
          "pages": {
            "children": {
              "airdrop.tsx": {
                "content": [
                  "import { useConnection, useWallet } from '@solana/wallet-adapter-react';",
                  "import { useCallback } from 'react';",
                  "import { TransactionSignature, LAMPORTS_PER_SOL } from '@solana/web3.js';",
                  "import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';",
                  "export function Airdrop() {",
                  "const { connection } = useConnection();",
                  "const { publicKey } = useWallet();",
                  "const request = useCallback(async () => {",
                  "if (!publicKey) {",
                  "console.log('error', 'Wallet not connected!');",
                  "console.log({",
                  "type: 'error',",
                  "message: 'error',",
                  "description: 'Wallet not connected!',",
                  "});",
                  "return;",
                  "}",
                  "let signature: TransactionSignature = '';",
                  "try {",
                  "signature = await connection.requestAirdrop(publicKey, LAMPORTS_PER_SOL);",
                  "// Get the lates block hash to use on our transaction and confirmation",
                  "const latestBlockhash = await connection.getLatestBlockhash();",
                  "await connection.confirmTransaction(",
                  "{ signature, ...latestBlockhash },",
                  "'confirmed'",
                  ");",
                  "console.log({",
                  "type: 'success',",
                  "message: 'Airdrop successful!',",
                  "txid: signature,",
                  "});",
                  "// getUserSOLBalance(publicKey, connection);",
                  "} catch (error: any) {",
                  "console.log({",
                  "type: 'error',",
                  "message: \`Airdrop failed!\`,",
                  "description: error?.message,",
                  "txid: signature,",
                  "});",
                  "console.log(error);",
                  "console.log('error', \`Airdrop failed! \${error?.message}\`, signature);",
                  "}",
                  "}, [publicKey, connection]);",
                  "return (",
                  "<div className="hero py-[100px]">",
                  "<div className="hero-content text-center">",
                  "<div className="max-w-md">",
                  "<h1 className="text-5xl font-bold">Airdrop</h1>",
                  "<p className="py-6">",
                  "You can request an airdrop of 1 SOL to your wallet address.",
                  "</p>",
                  "{publicKey ? (",
                  "<button onClick={request} className="btn btn-primary">",
                  "Request Airdrop",
                  "</button>",
                  ") : (",
                  "<WalletMultiButton />",
                  ")}",
                  "</div>",
                  "</div>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "test/src/app/pages/airdrop.tsx",
              },
              "page-1.tsx": {
                "content": [
                  "export function Page1() {",
                  "return (",
                  "<div>",
                  "<h1>Page 1</h1>",
                  "<p>",
                  "This is the generated <code>page-1.tsx</code> component.",
                  "</p>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "test/src/app/pages/page-1.tsx",
              },
              "page-2.tsx": {
                "content": [
                  "export function Page2() {",
                  "return (",
                  "<div>",
                  "<h1>Page 2</h1>",
                  "<p>",
                  "This is the generated <code>page-2.tsx</code> component.",
                  "</p>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "test/src/app/pages/page-2.tsx",
              },
            },
            "path": "test/src/app/pages",
          },
          "solana-provider.tsx": {
            "content": [
              "import { WalletError } from '@solana/wallet-adapter-base';",
              "import {",
              "ConnectionProvider,",
              "WalletProvider,",
              "} from '@solana/wallet-adapter-react';",
              "import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';",
              "import { SolflareWalletAdapter } from '@solana/wallet-adapter-solflare';",
              "import { UnsafeBurnerWalletAdapter } from '@solana/wallet-adapter-unsafe-burner';",
              "import { Cluster, clusterApiUrl } from '@solana/web3.js';",
              "import {",
              "createContext,",
              "ReactNode,",
              "useCallback,",
              "useContext,",
              "useMemo,",
              "useState,",
              "} from 'react';",
              "require('@solana/wallet-adapter-react-ui/styles.css');",
              "export interface SolanaProviderContext {",
              "cluster: Cluster;",
              "endpoint: string;",
              "setCluster?: (cluster: Cluster) => void;",
              "}",
              "const Context = createContext<SolanaProviderContext>(",
              "{} as SolanaProviderContext",
              ");",
              "export function SolanaProvider({ children }: { children: ReactNode }) {",
              "const [cluster, setCluster] = useState<Cluster>('devnet');",
              "const endpoint = useMemo(() => clusterApiUrl(cluster), [cluster]);",
              "const wallets = useMemo(",
              "() => [new UnsafeBurnerWalletAdapter(), new SolflareWalletAdapter()],",
              "[cluster]",
              ");",
              "const onError = useCallback((error: WalletError) => {",
              "console.error(error);",
              "}, []);",
              "const value: SolanaProviderContext = {",
              "cluster,",
              "endpoint,",
              "setCluster,",
              "};",
              "return (",
              "<ConnectionProvider endpoint={endpoint}>",
              "<WalletProvider wallets={wallets} onError={onError} autoConnect={true}>",
              "<WalletModalProvider>",
              "<Context.Provider value={value}>{children}</Context.Provider>",
              "</WalletModalProvider>",
              "</WalletProvider>",
              "</ConnectionProvider>",
              ");",
              "}",
              "export function useSolana() {",
              "return useContext(Context);",
              "}",
            ],
            "isBinary": false,
            "path": "test/src/app/solana-provider.tsx",
          },
        },
        "path": "test/src/app",
      },
      "index.html": {
        "content": [
          "<!DOCTYPE html>",
          "<html lang="en">",
          "<head>",
          "<meta charset="utf-8" />",
          "<title>@solana-developers/preset-react</title>",
          "<base href="/" />",
          "<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />",
          "<link rel="icon" type="image/x-icon" href="favicon.ico" />",
          "</head>",
          "<body>",
          "<div id="root"></div>",
          "</body>",
          "</html>",
        ],
        "isBinary": false,
        "path": "test/src/index.html",
      },
      "main.tsx": {
        "content": [
          "import { StrictMode } from 'react';",
          "import * as ReactDOM from 'react-dom/client';",
          "import { BrowserRouter } from 'react-router-dom';",
          "import { App } from './app/app';",
          "const root = ReactDOM.createRoot(",
          "document.getElementById('root') as HTMLElement",
          ");",
          "root.render(",
          "<StrictMode>",
          "<BrowserRouter>",
          "<App />",
          "</BrowserRouter>",
          "</StrictMode>",
          ");",
        ],
        "isBinary": false,
        "path": "test/src/main.tsx",
      },
      "styles.css": {
        "content": [
          "@tailwind base;",
          "@tailwind components;",
          "@tailwind utilities;",
          "html,",
          "body,",
          "#root {",
          "height: 100%;",
          "}",
        ],
        "isBinary": false,
        "path": "test/src/styles.css",
      },
    },
    "path": "test/src",
  },
}
`;
