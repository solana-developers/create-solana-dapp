// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`react-template generator should generate files for base template 1`] = `
{
  "src": {
    "children": {
      "assets": {
        "children": {
          "solana-logo.png": {
            "content": null,
            "isBinary": true,
            "path": "test/src/assets/solana-logo.png",
          },
        },
        "path": "test/src/assets",
      },
      "favicon.ico": {
        "content": null,
        "isBinary": true,
        "path": "test/src/favicon.ico",
      },
      "main.tsx": {
        "content": [
          "import { StrictMode } from 'react'",
          "import * as ReactDOM from 'react-dom/client'",
          "import { BrowserRouter } from 'react-router-dom'",
          "import './polyfills'",
          "import { App } from './app/app'",
          "const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement)",
          "root.render(",
          "<StrictMode>",
          "<BrowserRouter>",
          "<App />",
          "</BrowserRouter>",
          "</StrictMode>,",
          ")",
        ],
        "isBinary": false,
        "path": "test/src/main.tsx",
      },
      "polyfills.ts": {
        "content": [
          "import * as buffer from 'buffer';",
          "window.Buffer = buffer.Buffer;",
        ],
        "isBinary": false,
        "path": "test/src/polyfills.ts",
      },
    },
    "path": "test/src",
  },
  "webpack.config.js": {
    "content": [
      "const { composePlugins, withNx } = require('@nx/webpack');",
      "const { withReact } = require('@nx/react');",
      "// Nx plugins for webpack.",
      "module.exports = composePlugins(withNx(), withReact(), (config) => {",
      "// Update the webpack config as needed here.",
      "// e.g. \`config.plugins.push(new MyPlugin())\`",
      "config.ignoreWarnings = [/Failed to parse source map/];",
      "return config;",
      "});",
    ],
    "isBinary": false,
    "path": "test/webpack.config.js",
  },
}
`;

exports[`react-template generator should generate files for none template 1`] = `
{
  "src": {
    "children": {
      "app": {
        "children": {
          "app-layout.tsx": {
            "content": [
              "import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';",
              "import { ReactNode } from 'react';",
              "import { Link } from 'react-router-dom';",
              "export function AppLayout({ children }: { children: ReactNode }) {",
              "return (",
              "<div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>",
              "<div",
              "style={{",
              "display: 'flex',",
              "alignItems: 'center',",
              "justifyContent: 'space-between',",
              "padding: '6px 12px',",
              "}}",
              ">",
              "<div>",
              "<Link to="/">",
              "<img src="/assets/solana-logo.png" height={24} alt="Solana Logo" />",
              "</Link>",
              "</div>",
              "<div>",
              "<WalletMultiButton />",
              "</div>",
              "</div>",
              "<div style={{ flexGrow: 1, padding: '6px' }}>{children}</div>",
              "<footer",
              "style={{",
              "display: 'flex',",
              "alignItems: 'center',",
              "justifyContent: 'center',",
              "padding: '6px 10px',",
              "}}",
              ">",
              "<aside>",
              "<p>",
              "Powered by{' '}",
              "<a",
              "href="https://github.com/solana-developers/create-solana-dapp"",
              "target="_blank"",
              "rel="noopener noreferrer"",
              ">",
              "create-solana-dapp",
              "</a>",
              "</p>",
              "</aside>",
              "</footer>",
              "</div>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "test/src/app/app-layout.tsx",
          },
          "app-routes.tsx": {
            "content": [
              "import { Link, Navigate, useRoutes } from 'react-router-dom';",
              "export function AppRoutes() {",
              "return useRoutes([",
              "{ index: true, element: <Navigate replace to="/home" /> },",
              "{",
              "path: '/home',",
              "element: (",
              "<div>",
              "<p>Home page content</p>",
              "<Link to="/page-1">Page 1</Link>",
              "</div>",
              "),",
              "},",
              "{",
              "path: '/page-1',",
              "element: (",
              "<div>",
              "<p>Page 1 content</p>",
              "<Link to="/home">Home</Link>",
              "</div>",
              "),",
              "},",
              "]);",
              "}",
            ],
            "isBinary": false,
            "path": "test/src/app/app-routes.tsx",
          },
          "app.tsx": {
            "content": [
              "import { AppLayout } from './app-layout';",
              "import { AppRoutes } from './app-routes';",
              "import { SolanaProvider } from './solana-provider';",
              "export function App() {",
              "return (",
              "<SolanaProvider>",
              "<AppLayout>",
              "<AppRoutes />",
              "</AppLayout>",
              "</SolanaProvider>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "test/src/app/app.tsx",
          },
          "solana-provider.tsx": {
            "content": [
              "import { WalletError } from '@solana/wallet-adapter-base';",
              "import {",
              "ConnectionProvider,",
              "WalletProvider,",
              "} from '@solana/wallet-adapter-react';",
              "import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';",
              "import { SolflareWalletAdapter } from '@solana/wallet-adapter-solflare';",
              "import { Cluster, clusterApiUrl } from '@solana/web3.js';",
              "import {",
              "createContext,",
              "ReactNode,",
              "useCallback,",
              "useContext,",
              "useMemo,",
              "useState,",
              "} from 'react';",
              "require('@solana/wallet-adapter-react-ui/styles.css');",
              "export interface SolanaProviderContext {",
              "cluster: Cluster;",
              "endpoint: string;",
              "setCluster?: (cluster: Cluster) => void;",
              "}",
              "const Context = createContext<SolanaProviderContext>(",
              "{} as SolanaProviderContext",
              ");",
              "export function SolanaProvider({ children }: { children: ReactNode }) {",
              "const [cluster, setCluster] = useState<Cluster>('devnet');",
              "const endpoint = useMemo(() => clusterApiUrl(cluster), [cluster]);",
              "const wallets = useMemo(",
              "() => [new SolflareWalletAdapter()],",
              "[cluster]",
              ");",
              "const onError = useCallback((error: WalletError) => {",
              "console.error(error);",
              "}, []);",
              "const value: SolanaProviderContext = {",
              "cluster,",
              "endpoint,",
              "setCluster,",
              "};",
              "return (",
              "<ConnectionProvider endpoint={endpoint}>",
              "<WalletProvider wallets={wallets} onError={onError} autoConnect={true}>",
              "<WalletModalProvider>",
              "<Context.Provider value={value}>{children}</Context.Provider>",
              "</WalletModalProvider>",
              "</WalletProvider>",
              "</ConnectionProvider>",
              ");",
              "}",
              "export function useSolana() {",
              "return useContext(Context);",
              "}",
            ],
            "isBinary": false,
            "path": "test/src/app/solana-provider.tsx",
          },
        },
        "path": "test/src/app",
      },
      "index.html": {
        "content": [
          "<!DOCTYPE html>",
          "<html lang="en">",
          "<head>",
          "<meta charset="utf-8" />",
          "<title>Test</title>",
          "<base href="/" />",
          "<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />",
          "<link rel="icon" type="image/x-icon" href="favicon.ico" />",
          "</head>",
          "<body>",
          "<div id="root"></div>",
          "</body>",
          "</html>",
        ],
        "isBinary": false,
        "path": "test/src/index.html",
      },
      "styles.css": {
        "content": [
          "html,",
          "body,",
          "#root {",
          "height: 100%;",
          "padding: 0;",
          "margin: 0;",
          "}",
          ":root {",
          "color-scheme: light dark;",
          "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica,",
          "Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';",
          "}",
        ],
        "isBinary": false,
        "path": "test/src/styles.css",
      },
    },
    "path": "test/src",
  },
}
`;

exports[`react-template generator should generate files for tailwind template 1`] = `
{
  "src": {
    "children": {
      "app": {
        "children": {
          "account": {
            "children": {
              "account-data-access.tsx": {
                "content": [
                  "import { useConnection, useWallet } from '@solana/wallet-adapter-react'",
                  "import { TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from '@solana/spl-token'",
                  "import {",
                  "Connection,",
                  "LAMPORTS_PER_SOL,",
                  "PublicKey,",
                  "SystemProgram,",
                  "TransactionMessage,",
                  "TransactionSignature,",
                  "VersionedTransaction,",
                  "} from '@solana/web3.js'",
                  "import { useMutation, useQuery } from '@tanstack/react-query'",
                  "import toast from 'react-hot-toast'",
                  "import { useCluster } from '../cluster/cluster-data-access'",
                  "import { useTransactionToast } from '../ui/ui-layout'",
                  "export function useAccount({ address }: { address: PublicKey }) {",
                  "const { cluster } = useCluster()",
                  "const { connection } = useConnection()",
                  "const transactionToast = useTransactionToast()",
                  "const wallet = useWallet()",
                  "const getBalance = useQuery({",
                  "queryKey: ['balance', { cluster, address }],",
                  "queryFn: () => connection.getBalance(address),",
                  "})",
                  "const getSignatures = useQuery({",
                  "queryKey: ['signatures', { cluster, address }],",
                  "queryFn: () => connection.getConfirmedSignaturesForAddress2(address),",
                  "})",
                  "const getTokenAccounts = useQuery({",
                  "queryKey: ['token-accounts', { endpoint: connection.rpcEndpoint, address: address.toString() }],",
                  "queryFn: async () => {",
                  "const [tokenAccounts, token2022Accounts] = await Promise.all([",
                  "connection.getParsedTokenAccountsByOwner(address, {",
                  "programId: TOKEN_PROGRAM_ID,",
                  "}),",
                  "connection.getParsedTokenAccountsByOwner(address, {",
                  "programId: TOKEN_2022_PROGRAM_ID,",
                  "}),",
                  "])",
                  "return [...tokenAccounts.value, ...token2022Accounts.value]",
                  "},",
                  "})",
                  "const getTokenBalance = useQuery({",
                  "queryKey: ['getTokenAccountBalance', { endpoint: connection.rpcEndpoint, account: address.toString() }],",
                  "queryFn: () => connection.getTokenAccountBalance(address),",
                  "})",
                  "const requestAirdrop = useMutation({",
                  "mutationKey: ['airdrop', { cluster, address }],",
                  "mutationFn: async (amount: number = 1) => {",
                  "const [latestBlockhash, signature] = await Promise.all([",
                  "connection.getLatestBlockhash(),",
                  "connection.requestAirdrop(address, amount * LAMPORTS_PER_SOL),",
                  "])",
                  "await connection.confirmTransaction({ signature, ...latestBlockhash }, 'confirmed')",
                  "return signature",
                  "},",
                  "onSuccess: (signature) => {",
                  "transactionToast(signature)",
                  "return Promise.all([getBalance.refetch(), getSignatures.refetch()])",
                  "},",
                  "})",
                  "const transferSol = useMutation({",
                  "mutationKey: ['transfer-sol', { cluster, address }],",
                  "mutationFn: async (input: { destination: PublicKey; amount: number }) => {",
                  "let signature: TransactionSignature = ''",
                  "try {",
                  "const { transaction, latestBlockhash } = await createTransaction({",
                  "publicKey: address,",
                  "destination: input.destination,",
                  "amount: input.amount,",
                  "connection,",
                  "})",
                  "// Send transaction and await for signature",
                  "signature = await wallet.sendTransaction(transaction, connection)",
                  "// Send transaction and await for signature",
                  "await connection.confirmTransaction({ signature, ...latestBlockhash }, 'confirmed')",
                  "console.log(signature)",
                  "return signature",
                  "} catch (error: unknown) {",
                  "console.log('error', \`Transaction failed! \${error}\`, signature)",
                  "return",
                  "}",
                  "},",
                  "onSuccess: (signature) => {",
                  "if (signature) {",
                  "transactionToast(signature)",
                  "}",
                  "return Promise.all([getBalance.refetch(), getSignatures.refetch()])",
                  "},",
                  "onError: (error) => {",
                  "toast.error(\`Transaction failed! \${error}\`)",
                  "},",
                  "})",
                  "return {",
                  "getBalance,",
                  "getSignatures,",
                  "getTokenAccounts,",
                  "getTokenBalance,",
                  "requestAirdrop,",
                  "transferSol,",
                  "}",
                  "}",
                  "async function createTransaction({",
                  "publicKey,",
                  "destination,",
                  "amount,",
                  "connection,",
                  "}: {",
                  "publicKey: PublicKey",
                  "destination: PublicKey",
                  "amount: number",
                  "connection: Connection",
                  "}): Promise<{",
                  "transaction: VersionedTransaction",
                  "latestBlockhash: { blockhash: string; lastValidBlockHeight: number }",
                  "}> {",
                  "// Get the lates block hash to use on our transaction and confirmation",
                  "const latestBlockhash = await connection.getLatestBlockhash()",
                  "// Create instructions to send, in this case a simple transfer",
                  "const instructions = [",
                  "SystemProgram.transfer({",
                  "fromPubkey: publicKey,",
                  "toPubkey: destination,",
                  "lamports: amount * LAMPORTS_PER_SOL,",
                  "}),",
                  "]",
                  "// Create a new TransactionMessage with version and compile it to legacy",
                  "const messageLegacy = new TransactionMessage({",
                  "payerKey: publicKey,",
                  "recentBlockhash: latestBlockhash.blockhash,",
                  "instructions,",
                  "}).compileToLegacyMessage()",
                  "// Create a new VersionedTransaction which supports legacy and v0",
                  "const transaction = new VersionedTransaction(messageLegacy)",
                  "return {",
                  "transaction,",
                  "latestBlockhash,",
                  "}",
                  "}",
                ],
                "isBinary": false,
                "path": "test/src/app/account/account-data-access.tsx",
              },
              "account-detail-feature.tsx": {
                "content": [
                  "import { PublicKey } from '@solana/web3.js'",
                  "import { useMemo } from 'react'",
                  "import { useParams } from 'react-router-dom'",
                  "import { ExplorerLink } from '../cluster/cluster-ui'",
                  "import { AppHero, ellipsify } from '../ui/ui-layout'",
                  "import { AccountBalance, AccountButtons, AccountTokens, AccountTransactions } from './account-ui'",
                  "export default function AccountDetailFeature() {",
                  "const params = useParams()",
                  "const address = useMemo(() => {",
                  "if (!params.address) {",
                  "return",
                  "}",
                  "try {",
                  "return new PublicKey(params.address)",
                  "} catch (e) {",
                  "console.log(\`Invalid public key\`, e)",
                  "}",
                  "}, [params])",
                  "if (!address) {",
                  "return <div>Error loading account</div>",
                  "}",
                  "return (",
                  "<div>",
                  "<AppHero",
                  "title={<AccountBalance address={address} />}",
                  "subtitle={",
                  "<div className="my-4">",
                  "<ExplorerLink path={\`account/\${address}\`} label={ellipsify(address.toString())} />",
                  "</div>",
                  "}",
                  ">",
                  "<div className="my-4">",
                  "<AccountButtons address={address} />",
                  "</div>",
                  "</AppHero>",
                  "<div className="space-y-8">",
                  "<AccountTokens address={address} />",
                  "<AccountTransactions address={address} />",
                  "</div>",
                  "</div>",
                  ")",
                  "}",
                ],
                "isBinary": false,
                "path": "test/src/app/account/account-detail-feature.tsx",
              },
              "account-list-feature.tsx": {
                "content": [
                  "import { useWallet } from '@solana/wallet-adapter-react'",
                  "import { WalletButton } from '../solana/solana-provider'",
                  "import { Navigate } from 'react-router-dom'",
                  "export default function AccountListFeature() {",
                  "const { publicKey } = useWallet()",
                  "if (publicKey) {",
                  "return <Navigate to={publicKey.toString()} replace />",
                  "}",
                  "return (",
                  "<div className="hero py-[64px]">",
                  "<div className="hero-content text-center"><WalletButton /></div>",
                  "</div>",
                  ")",
                  "}",
                ],
                "isBinary": false,
                "path": "test/src/app/account/account-list-feature.tsx",
              },
              "account-ui.tsx": {
                "content": [
                  "import { useWallet } from '@solana/wallet-adapter-react'",
                  "import { LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js'",
                  "import { IconRefresh } from '@tabler/icons-react'",
                  "import { useQueryClient } from '@tanstack/react-query'",
                  "import { useMemo, useState } from 'react'",
                  "import { AppModal, ellipsify } from '../ui/ui-layout'",
                  "import { useCluster } from '../cluster/cluster-data-access'",
                  "import { ExplorerLink } from '../cluster/cluster-ui'",
                  "import { useAccount } from './account-data-access'",
                  "export function AccountBalance({ address }: { address: PublicKey }) {",
                  "const { getBalance: query } = useAccount({ address })",
                  "return (",
                  "<div>",
                  "<h1 className="text-5xl font-bold cursor-pointer" onClick={() => query.refetch()}>",
                  "{query.data ? <BalanceSol balance={query.data} /> : '...'} SOL",
                  "</h1>",
                  "</div>",
                  ")",
                  "}",
                  "export function AccountChecker() {",
                  "const { publicKey } = useWallet()",
                  "if (!publicKey) {",
                  "return null",
                  "}",
                  "return <AccountBalanceCheck address={publicKey} />",
                  "}",
                  "export function AccountBalanceCheck({ address }: { address: PublicKey }) {",
                  "const { cluster } = useCluster()",
                  "const { getBalance: query, requestAirdrop } = useAccount({ address })",
                  "if (query.isLoading) {",
                  "return null",
                  "}",
                  "if (query.isError || !query.data) {",
                  "return (",
                  "<div className="alert alert-warning text-warning-content/80 rounded-none flex justify-center">",
                  "<span>",
                  "You are connected to <strong>{cluster.name}</strong> but your account is not found on this cluster.",
                  "</span>",
                  "<button",
                  "className="btn btn-xs btn-neutral"",
                  "onClick={() => requestAirdrop.mutateAsync(1).catch((err) => console.log(err))}",
                  ">",
                  "Request Airdrop",
                  "</button>",
                  "</div>",
                  ")",
                  "}",
                  "return null",
                  "}",
                  "export function AccountButtons({ address }: { address: PublicKey }) {",
                  "const wallet = useWallet()",
                  "const { cluster } = useCluster()",
                  "const [showAirdropModal, setShowAirdropModal] = useState(false)",
                  "const [showReceiveModal, setShowReceiveModal] = useState(false)",
                  "const [showSendModal, setShowSendModal] = useState(false)",
                  "return (",
                  "<div>",
                  "<ModalAirdrop hide={() => setShowAirdropModal(false)} address={address} show={showAirdropModal} />",
                  "<ModalReceive address={address} show={showReceiveModal} hide={() => setShowReceiveModal(false)} />",
                  "<ModalSend address={address} show={showSendModal} hide={() => setShowSendModal(false)} />",
                  "<div className="space-x-2">",
                  "<button",
                  "disabled={cluster.network?.includes('mainnet')}",
                  "className="btn btn-xs lg:btn-md btn-outline"",
                  "onClick={() => setShowAirdropModal(true)}",
                  ">",
                  "Airdrop",
                  "</button>",
                  "<button",
                  "disabled={wallet.publicKey?.toString() !== address.toString()}",
                  "className="btn btn-xs lg:btn-md btn-outline"",
                  "onClick={() => setShowSendModal(true)}",
                  ">",
                  "Send",
                  "</button>",
                  "<button className="btn btn-xs lg:btn-md btn-outline" onClick={() => setShowReceiveModal(true)}>",
                  "Receive",
                  "</button>",
                  "</div>",
                  "</div>",
                  ")",
                  "}",
                  "export function AccountTokens({ address }: { address: PublicKey }) {",
                  "const [showAll, setShowAll] = useState(false)",
                  "const { getTokenAccounts: query } = useAccount({ address })",
                  "const client = useQueryClient()",
                  "const items = useMemo(() => {",
                  "if (showAll) return query.data",
                  "return query.data?.slice(0, 5)",
                  "}, [query.data, showAll])",
                  "return (",
                  "<div className="space-y-2">",
                  "<div className="justify-between">",
                  "<div className="flex justify-between">",
                  "<h2 className="text-2xl font-bold">Token Accounts</h2>",
                  "<div className="space-x-2">",
                  "{query.isLoading ? (",
                  "<span className="loading loading-spinner loading"></span>",
                  ") : (",
                  "<button",
                  "className="btn btn-sm btn-outline"",
                  "onClick={async () => {",
                  "await query.refetch()",
                  "await client.invalidateQueries({",
                  "queryKey: ['getTokenAccountBalance'],",
                  "})",
                  "}}",
                  ">",
                  "<IconRefresh size={16} />",
                  "</button>",
                  ")}",
                  "</div>",
                  "</div>",
                  "</div>",
                  "{query.isError && <pre className="alert alert-error">Error: {query.error?.message.toString()}</pre>}",
                  "{query.isSuccess && (",
                  "<div>",
                  "{query.data.length === 0 ? (",
                  "<div>No token accounts found.</div>",
                  ") : (",
                  "<table className="table border-4 rounded-lg border-separate border-base-300">",
                  "<thead>",
                  "<tr>",
                  "<th>Public Key</th>",
                  "<th>Mint</th>",
                  "<th className="text-right">Balance</th>",
                  "</tr>",
                  "</thead>",
                  "<tbody>",
                  "{items?.map(({ account, pubkey }) => (",
                  "<tr key={pubkey.toString()}>",
                  "<td>",
                  "<div className="flex space-x-2">",
                  "<span className="font-mono">",
                  "<ExplorerLink label={ellipsify(pubkey.toString())} path={\`account/\${pubkey.toString()}\`} />",
                  "</span>",
                  "</div>",
                  "</td>",
                  "<td>",
                  "<div className="flex space-x-2">",
                  "<span className="font-mono">",
                  "<ExplorerLink",
                  "label={ellipsify(account.data.parsed.info.mint)}",
                  "path={\`account/\${account.data.parsed.info.mint.toString()}\`}",
                  "/>",
                  "</span>",
                  "</div>",
                  "</td>",
                  "<td className="text-right">",
                  "<span className="font-mono">",
                  "<AccountTokenBalance address={address} />",
                  "</span>",
                  "</td>",
                  "</tr>",
                  "))}",
                  "{(query.data?.length ?? 0) > 5 && (",
                  "<tr>",
                  "<td colSpan={4} className="text-center">",
                  "<button className="btn btn-xs btn-outline" onClick={() => setShowAll(!showAll)}>",
                  "{showAll ? 'Show Less' : 'Show All'}",
                  "</button>",
                  "</td>",
                  "</tr>",
                  ")}",
                  "</tbody>",
                  "</table>",
                  ")}",
                  "</div>",
                  ")}",
                  "</div>",
                  ")",
                  "}",
                  "export function AccountTokenBalance({ address }: { address: PublicKey }) {",
                  "const { getTokenBalance } = useAccount({ address })",
                  "return getTokenBalance.isLoading ? (",
                  "<span className="loading loading-spinner"></span>",
                  ") : getTokenBalance.data ? (",
                  "<div>{getTokenBalance.data?.value.uiAmount}</div>",
                  ") : (",
                  "<div>Error</div>",
                  ")",
                  "}",
                  "export function AccountTransactions({ address }: { address: PublicKey }) {",
                  "const { getSignatures: query } = useAccount({ address })",
                  "const [showAll, setShowAll] = useState(false)",
                  "const items = useMemo(() => {",
                  "if (showAll) return query.data",
                  "return query.data?.slice(0, 5)",
                  "}, [query.data, showAll])",
                  "return (",
                  "<div className="space-y-2">",
                  "<div className="flex justify-between">",
                  "<h2 className="text-2xl font-bold">Transaction History</h2>",
                  "<div className="space-x-2">",
                  "{query.isLoading ? (",
                  "<span className="loading loading-spinner loading"></span>",
                  ") : (",
                  "<button className="btn btn-sm btn-outline" onClick={() => query.refetch()}>",
                  "<IconRefresh size={16} />",
                  "</button>",
                  ")}",
                  "</div>",
                  "</div>",
                  "{query.isError && <pre className="alert alert-error">Error: {query.error?.message.toString()}</pre>}",
                  "{query.isSuccess && (",
                  "<div>",
                  "{query.data.length === 0 ? (",
                  "<div>No transactions found.</div>",
                  ") : (",
                  "<table className="table border-4 rounded-lg border-separate border-base-300">",
                  "<thead>",
                  "<tr>",
                  "<th>Signature</th>",
                  "<th className="text-right">Slot</th>",
                  "<th>Block Time</th>",
                  "<th className="text-right">Status</th>",
                  "</tr>",
                  "</thead>",
                  "<tbody>",
                  "{items?.map((item) => (",
                  "<tr key={item.signature}>",
                  "<th className="font-mono">",
                  "<ExplorerLink path={\`tx/\${item.signature}\`} label={ellipsify(item.signature, 8)} />",
                  "</th>",
                  "<td className="font-mono text-right">",
                  "<ExplorerLink path={\`block/\${item.slot}\`} label={item.slot.toString()} />",
                  "</td>",
                  "<td>{new Date((item.blockTime ?? 0) * 1000).toISOString()}</td>",
                  "<td className="text-right">",
                  "{item.err ? (",
                  "<div className="badge badge-error" title={JSON.stringify(item.err)}>",
                  "Failed",
                  "</div>",
                  ") : (",
                  "<div className="badge badge-success">Success</div>",
                  ")}",
                  "</td>",
                  "</tr>",
                  "))}",
                  "{(query.data?.length ?? 0) > 5 && (",
                  "<tr>",
                  "<td colSpan={4} className="text-center">",
                  "<button className="btn btn-xs btn-outline" onClick={() => setShowAll(!showAll)}>",
                  "{showAll ? 'Show Less' : 'Show All'}",
                  "</button>",
                  "</td>",
                  "</tr>",
                  ")}",
                  "</tbody>",
                  "</table>",
                  ")}",
                  "</div>",
                  ")}",
                  "</div>",
                  ")",
                  "}",
                  "function BalanceSol({ balance }: { balance: number }) {",
                  "return <span>{Math.round((balance / LAMPORTS_PER_SOL) * 100000) / 100000}</span>",
                  "}",
                  "function ModalReceive({ hide, show, address }: { hide: () => void; show: boolean; address: PublicKey }) {",
                  "return (",
                  "<AppModal title="Receive" hide={hide} show={show}>",
                  "<p>You can receive assets by sending them to your public key:</p>",
                  "<code>{address.toString()}</code>",
                  "</AppModal>",
                  ")",
                  "}",
                  "function ModalAirdrop({ hide, show, address }: { hide: () => void; show: boolean; address: PublicKey }) {",
                  "const { requestAirdrop: mutation } = useAccount({ address })",
                  "const [amount, setAmount] = useState(2)",
                  "return (",
                  "<AppModal",
                  "hide={hide}",
                  "show={show}",
                  "title="Airdrop"",
                  "submitDisabled={!amount || mutation.isPending}",
                  "submitLabel="Requqest Airdrop"",
                  "submit={() => mutation.mutateAsync(amount).then(() => hide())}",
                  ">",
                  "<input",
                  "disabled={mutation.isPending}",
                  "type="number"",
                  "placeholder="Amount"",
                  "className="input input-bordered w-full"",
                  "value={amount}",
                  "onChange={(e) => setAmount(Number(e.target.value))}",
                  "/>",
                  "</AppModal>",
                  ")",
                  "}",
                  "function ModalSend({ hide, show, address }: { hide: () => void; show: boolean; address: PublicKey }) {",
                  "const wallet = useWallet()",
                  "const { transferSol: mutation } = useAccount({ address })",
                  "const [destination, setDestination] = useState('')",
                  "const [amount, setAmount] = useState(1)",
                  "if (!address || !wallet.sendTransaction) {",
                  "return <div>Wallet not connected</div>",
                  "}",
                  "return (",
                  "<AppModal",
                  "hide={hide}",
                  "show={show}",
                  "title="Send"",
                  "submitDisabled={!destination || !amount || mutation.isPending}",
                  "submitLabel="Send"",
                  "submit={() => {",
                  "mutation",
                  ".mutateAsync({",
                  "destination: new PublicKey(destination),",
                  "amount,",
                  "})",
                  ".then(() => hide())",
                  "}}",
                  ">",
                  "<input",
                  "disabled={mutation.isPending}",
                  "type="text"",
                  "placeholder="Destination"",
                  "className="input input-bordered w-full"",
                  "value={destination}",
                  "onChange={(e) => setDestination(e.target.value)}",
                  "/>",
                  "<input",
                  "disabled={mutation.isPending}",
                  "type="number"",
                  "placeholder="Amount"",
                  "className="input input-bordered w-full"",
                  "value={amount}",
                  "onChange={(e) => setAmount(Number(e.target.value))}",
                  "/>",
                  "</AppModal>",
                  ")",
                  "}",
                ],
                "isBinary": false,
                "path": "test/src/app/account/account-ui.tsx",
              },
            },
            "path": "test/src/app/account",
          },
          "app-routes.tsx": {
            "content": [
              "import { lazy } from 'react'",
              "import { Navigate, useRoutes } from 'react-router-dom'",
              "const AccountListFeature = lazy(() => import('./account/account-list-feature'))",
              "const AccountDetailFeature = lazy(() => import('./account/account-detail-feature'))",
              "const ClusterFeature = lazy(() => import('./cluster/cluster-feature'))",
              "const DashboardFeature = lazy(() => import('./dashboard/dashboard-feature'))",
              "export function AppRoutes() {",
              "return useRoutes([",
              "{ index: true, element: <Navigate to={'/dashboard'} replace={true} /> },",
              "{ path: '/account/', element: <AccountListFeature /> },",
              "{ path: '/account/:address', element: <AccountDetailFeature /> },",
              "{ path: '/clusters', element: <ClusterFeature /> },",
              "{ path: '/dashboard', element: <DashboardFeature /> },",
              "{ path: '*', element: <Navigate to={'/dashboard'} replace={true} /> },",
              "])",
              "}",
            ],
            "isBinary": false,
            "path": "test/src/app/app-routes.tsx",
          },
          "app.tsx": {
            "content": [
              "import { UiLayout } from './ui/ui-layout'",
              "import { AppRoutes } from './app-routes'",
              "import { ClusterProvider } from './cluster/cluster-data-access'",
              "import { SolanaProvider } from './solana/solana-provider'",
              "import { QueryClient, QueryClientProvider } from '@tanstack/react-query'",
              "const client = new QueryClient()",
              "export function App() {",
              "return (",
              "<QueryClientProvider client={client}>",
              "<ClusterProvider>",
              "<SolanaProvider>",
              "<UiLayout>",
              "<AppRoutes />",
              "</UiLayout>",
              "</SolanaProvider>",
              "</ClusterProvider>",
              "</QueryClientProvider>",
              ")",
              "}",
            ],
            "isBinary": false,
            "path": "test/src/app/app.tsx",
          },
          "cluster": {
            "children": {
              "cluster-data-access.tsx": {
                "content": [
                  "import { WalletAdapterNetwork } from '@solana/wallet-adapter-base'",
                  "import { clusterApiUrl } from '@solana/web3.js'",
                  "import { atom, useAtomValue, useSetAtom } from 'jotai'",
                  "import { atomWithStorage } from 'jotai/utils'",
                  "import { createContext, ReactNode, useContext } from 'react'",
                  "export interface Cluster {",
                  "name: string",
                  "endpoint: string",
                  "network?: ClusterNetwork",
                  "active?: boolean",
                  "}",
                  "export enum ClusterNetwork {",
                  "Mainnet = 'mainnet-beta',",
                  "Testnet = 'testnet',",
                  "Devnet = 'devnet',",
                  "Custom = 'custom',",
                  "}",
                  "export function toWalletAdapterNetwork(cluster?: ClusterNetwork): WalletAdapterNetwork | undefined {",
                  "switch (cluster) {",
                  "case ClusterNetwork.Mainnet:",
                  "return WalletAdapterNetwork.Mainnet",
                  "case ClusterNetwork.Testnet:",
                  "return WalletAdapterNetwork.Testnet",
                  "case ClusterNetwork.Devnet:",
                  "return WalletAdapterNetwork.Devnet",
                  "default:",
                  "return undefined",
                  "}",
                  "}",
                  "export const defaultClusters: Cluster[] = [",
                  "{",
                  "name: 'devnet',",
                  "endpoint: clusterApiUrl('devnet'),",
                  "network: ClusterNetwork.Devnet,",
                  "},",
                  "{ name: 'local', endpoint: 'http://localhost:8899' },",
                  "{",
                  "name: 'testnet',",
                  "endpoint: clusterApiUrl('testnet'),",
                  "network: ClusterNetwork.Testnet,",
                  "},",
                  "]",
                  "const clusterAtom = atomWithStorage<Cluster>('solana-cluster', defaultClusters[0])",
                  "const clustersAtom = atomWithStorage<Cluster[]>('solana-clusters', defaultClusters)",
                  "const activeClustersAtom = atom<Cluster[]>((get) => {",
                  "const clusters = get(clustersAtom)",
                  "const cluster = get(clusterAtom)",
                  "return clusters.map((item) => ({",
                  "...item,",
                  "active: item.name === cluster.name,",
                  "}))",
                  "})",
                  "const activeClusterAtom = atom<Cluster>((get) => {",
                  "const clusters = get(activeClustersAtom)",
                  "return clusters.find((item) => item.active) || clusters[0]",
                  "})",
                  "export interface ClusterProviderContext {",
                  "cluster: Cluster",
                  "clusters: Cluster[]",
                  "addCluster: (cluster: Cluster) => void",
                  "deleteCluster: (cluster: Cluster) => void",
                  "setCluster: (cluster: Cluster) => void",
                  "getExplorerUrl(path: string): string",
                  "}",
                  "const Context = createContext<ClusterProviderContext>({} as ClusterProviderContext)",
                  "export function ClusterProvider({ children }: { children: ReactNode }) {",
                  "const cluster = useAtomValue(activeClusterAtom)",
                  "const clusters = useAtomValue(activeClustersAtom)",
                  "const setCluster = useSetAtom(clusterAtom)",
                  "const setClusters = useSetAtom(clustersAtom)",
                  "const value: ClusterProviderContext = {",
                  "cluster,",
                  "clusters: clusters.sort((a, b) => (a.name > b.name ? 1 : -1)),",
                  "addCluster: (cluster: Cluster) => {",
                  "setClusters([...clusters, cluster])",
                  "},",
                  "deleteCluster: (cluster: Cluster) => {",
                  "setClusters(clusters.filter((item) => item.name !== cluster.name))",
                  "},",
                  "setCluster: (cluster: Cluster) => setCluster(cluster),",
                  "getExplorerUrl: (path: string) => \`https://explorer.solana.com/\${path}\${getClusterUrlParam(cluster)}\`,",
                  "}",
                  "return <Context.Provider value={value}>{children}</Context.Provider>",
                  "}",
                  "export function useCluster() {",
                  "return useContext(Context)",
                  "}",
                  "function getClusterUrlParam(cluster: Cluster): string {",
                  "let suffix = ''",
                  "switch (cluster.network) {",
                  "case ClusterNetwork.Devnet:",
                  "suffix = 'devnet'",
                  "break",
                  "case ClusterNetwork.Mainnet:",
                  "suffix = ''",
                  "break",
                  "case ClusterNetwork.Testnet:",
                  "suffix = 'testnet'",
                  "break",
                  "default:",
                  "suffix = \`custom&customUrl=\${encodeURIComponent(cluster.endpoint)}\`",
                  "break",
                  "}",
                  "return suffix.length ? \`?cluster=\${suffix}\` : ''",
                  "}",
                ],
                "isBinary": false,
                "path": "test/src/app/cluster/cluster-data-access.tsx",
              },
              "cluster-feature.tsx": {
                "content": [
                  "import { useState } from 'react'",
                  "import { AppHero } from '../ui/ui-layout'",
                  "import { ClusterUiModal } from './cluster-ui'",
                  "import { ClusterUiTable } from './cluster-ui'",
                  "export default function ClusterFeature() {",
                  "const [showModal, setShowModal] = useState(false)",
                  "return (",
                  "<div>",
                  "<AppHero title="Clusters" subtitle="Manage and select your Solana clusters">",
                  "<ClusterUiModal show={showModal} hideModal={() => setShowModal(false)} />",
                  "<button className="btn btn-xs lg:btn-md btn-primary" onClick={() => setShowModal(true)}>",
                  "Add Cluster",
                  "</button>",
                  "</AppHero>",
                  "<ClusterUiTable />",
                  "</div>",
                  ")",
                  "}",
                ],
                "isBinary": false,
                "path": "test/src/app/cluster/cluster-feature.tsx",
              },
              "cluster-ui.tsx": {
                "content": [
                  "import { useConnection } from '@solana/wallet-adapter-react'",
                  "import { IconTrash } from '@tabler/icons-react'",
                  "import { useQuery } from '@tanstack/react-query'",
                  "import { ReactNode, useState } from 'react'",
                  "import { AppModal } from '../ui/ui-layout'",
                  "import { ClusterNetwork, useCluster } from './cluster-data-access'",
                  "export function ExplorerLink({ path, label, className }: { path: string; label: string; className?: string }) {",
                  "const { getExplorerUrl } = useCluster()",
                  "return (",
                  "<a",
                  "href={getExplorerUrl(path)}",
                  "target="_blank"",
                  "rel="noopener noreferrer"",
                  "className={className ? className : \`link font-mono\`}",
                  ">",
                  "{label}",
                  "</a>",
                  ")",
                  "}",
                  "export function ClusterChecker({ children }: { children: ReactNode }) {",
                  "const { cluster } = useCluster()",
                  "const { connection } = useConnection()",
                  "const query = useQuery({",
                  "queryKey: ['version', { cluster, endpoint: connection.rpcEndpoint }],",
                  "queryFn: () => connection.getVersion(),",
                  "retry: 1,",
                  "})",
                  "if (query.isLoading) {",
                  "return null",
                  "}",
                  "if (query.isError || !query.data) {",
                  "return (",
                  "<div className="alert alert-warning text-warning-content/80 rounded-none flex justify-center">",
                  "<span>",
                  "Error connecting to cluster <strong>{cluster.name}</strong>",
                  "</span>",
                  "<button className="btn btn-xs btn-neutral" onClick={() => query.refetch()}>",
                  "Refresh",
                  "</button>",
                  "</div>",
                  ")",
                  "}",
                  "return children",
                  "}",
                  "export function ClusterUiSelect() {",
                  "const { clusters, setCluster, cluster } = useCluster()",
                  "return (",
                  "<div className="dropdown dropdown-end">",
                  "<label tabIndex={0} className="btn btn-primary rounded-btn">",
                  "{cluster.name}",
                  "</label>",
                  "<ul tabIndex={0} className="menu dropdown-content z-[1] p-2 shadow bg-base-100 rounded-box w-52 mt-4">",
                  "{clusters.map((item) => (",
                  "<li key={item.name}>",
                  "<button",
                  "className={\`btn btn-sm \${item.active ? 'btn-primary' : 'btn-ghost'}\`}",
                  "onClick={() => setCluster(item)}",
                  ">",
                  "{item.name}",
                  "</button>",
                  "</li>",
                  "))}",
                  "</ul>",
                  "</div>",
                  ")",
                  "}",
                  "export function ClusterUiModal({ hideModal, show }: { hideModal: () => void; show: boolean }) {",
                  "const { addCluster } = useCluster()",
                  "const [name, setName] = useState('')",
                  "const [network, setNetwork] = useState<ClusterNetwork | undefined>()",
                  "const [endpoint, setEndpoint] = useState('')",
                  "return (",
                  "<AppModal",
                  "title={'Add Cluster'}",
                  "hide={hideModal}",
                  "show={show}",
                  "submit={() => {",
                  "addCluster({ name, network, endpoint })",
                  "hideModal()",
                  "}}",
                  "submitLabel="Save"",
                  ">",
                  "<input",
                  "type="text"",
                  "placeholder="Name"",
                  "className="input input-bordered w-full"",
                  "value={name}",
                  "onChange={(e) => setName(e.target.value)}",
                  "/>",
                  "<input",
                  "type="text"",
                  "placeholder="Endpoint"",
                  "className="input input-bordered w-full"",
                  "value={endpoint}",
                  "onChange={(e) => setEndpoint(e.target.value)}",
                  "/>",
                  "<select",
                  "className="select select-bordered w-full"",
                  "value={network}",
                  "onChange={(e) => setNetwork(e.target.value as ClusterNetwork)}",
                  ">",
                  "<option value={undefined}>Select a network</option>",
                  "<option value={ClusterNetwork.Devnet}>Devnet</option>",
                  "<option value={ClusterNetwork.Testnet}>Testnet</option>",
                  "<option value={ClusterNetwork.Mainnet}>Mainnet</option>",
                  "</select>",
                  "</AppModal>",
                  ")",
                  "}",
                  "export function ClusterUiTable() {",
                  "const { clusters, setCluster, deleteCluster } = useCluster()",
                  "return (",
                  "<div className="overflow-x-auto">",
                  "<table className="table border-4 border-separate border-base-300">",
                  "<thead>",
                  "<tr>",
                  "<th>Name/ Network / Endpoint</th>",
                  "<th className="text-center">Actions</th>",
                  "</tr>",
                  "</thead>",
                  "<tbody>",
                  "{clusters.map((item) => (",
                  "<tr key={item.name} className={item?.active ? 'bg-base-200' : ''}>",
                  "<td className="space-y-2">",
                  "<div className="whitespace-nowrap space-x-2">",
                  "<span className="text-xl">",
                  "{item?.active ? (",
                  "item.name",
                  ") : (",
                  "<button title="Select cluster" className="link link-secondary" onClick={() => setCluster(item)}>",
                  "{item.name}",
                  "</button>",
                  ")}",
                  "</span>",
                  "</div>",
                  "<span className="text-xs">Network: {item.network ?? 'custom'}</span>",
                  "<div className="whitespace-nowrap text-gray-500 text-xs">{item.endpoint}</div>",
                  "</td>",
                  "<td className="space-x-2 whitespace-nowrap text-center">",
                  "<button",
                  "disabled={item?.active}",
                  "className="btn btn-xs btn-default btn-outline"",
                  "onClick={() => {",
                  "if (!window.confirm('Are you sure?')) return",
                  "deleteCluster(item)",
                  "}}",
                  ">",
                  "<IconTrash size={16} />",
                  "</button>",
                  "</td>",
                  "</tr>",
                  "))}",
                  "</tbody>",
                  "</table>",
                  "</div>",
                  ")",
                  "}",
                ],
                "isBinary": false,
                "path": "test/src/app/cluster/cluster-ui.tsx",
              },
            },
            "path": "test/src/app/cluster",
          },
          "dashboard": {
            "children": {
              "dashboard-feature.tsx": {
                "content": [
                  "import { AppHero } from '../ui/ui-layout'",
                  "const links: { label: string; href: string }[] = [",
                  "{ label: 'Solana Docs', href: 'https://docs.solana.com/' },",
                  "{ label: 'Solana Faucet', href: 'https://faucet.solana.com/' },",
                  "{ label: 'Solana Cookbook', href: 'https://solanacookbook.com/' },",
                  "{ label: 'Solana Stack Overflow', href: 'https://solana.stackexchange.com/' },",
                  "{ label: 'Solana Developers GitHub', href: 'https://github.com/solana-developers/' },",
                  "]",
                  "export default function DashboardFeature() {",
                  "return (",
                  "<div>",
                  "<AppHero title="gm" subtitle="Say hi to you new Solana dApp." />",
                  "<div className="max-w-xl mx-auto py-6 sm:px-6 lg:px-8 text-center">",
                  "<div className="space-y-2">",
                  "<p>Here are some helpful links to get you started.</p>",
                  "{links.map((link, index) => (",
                  "<div key={index}>",
                  "<a href={link.href} className="link" target="_blank" rel="noopener noreferrer">",
                  "{link.label}",
                  "</a>",
                  "</div>",
                  "))}",
                  "</div>",
                  "</div>",
                  "</div>",
                  ")",
                  "}",
                ],
                "isBinary": false,
                "path": "test/src/app/dashboard/dashboard-feature.tsx",
              },
            },
            "path": "test/src/app/dashboard",
          },
          "solana": {
            "children": {
              "solana-provider.tsx": {
                "content": [
                  "import { WalletError } from '@solana/wallet-adapter-base'",
                  "import {",
                  "AnchorWallet,",
                  "ConnectionProvider,",
                  "useConnection,",
                  "useWallet,",
                  "WalletProvider,",
                  "} from '@solana/wallet-adapter-react'",
                  "import { WalletModalProvider, WalletMultiButton } from '@solana/wallet-adapter-react-ui'",
                  "import { SolflareWalletAdapter } from '@solana/wallet-adapter-solflare'",
                  "import { ReactNode, useCallback, useMemo } from 'react'",
                  "import { toWalletAdapterNetwork, useCluster } from '../cluster/cluster-data-access'",
                  "require('@solana/wallet-adapter-react-ui/styles.css')",
                  "export const WalletButton = WalletMultiButton;",
                  "export function SolanaProvider({ children }: { children: ReactNode }) {",
                  "const { cluster } = useCluster()",
                  "const endpoint = useMemo(() => cluster.endpoint, [cluster])",
                  "const wallets = useMemo(",
                  "() => [",
                  "new SolflareWalletAdapter({ network: toWalletAdapterNetwork(cluster.network) }),",
                  "],",
                  "[cluster],",
                  ")",
                  "const onError = useCallback((error: WalletError) => {",
                  "console.error(error)",
                  "}, [])",
                  "return (",
                  "<ConnectionProvider endpoint={endpoint}>",
                  "<WalletProvider wallets={wallets} onError={onError} autoConnect={true}>",
                  "<WalletModalProvider>{children}</WalletModalProvider>",
                  "</WalletProvider>",
                  "</ConnectionProvider>",
                  ")",
                  "}",
                ],
                "isBinary": false,
                "path": "test/src/app/solana/solana-provider.tsx",
              },
            },
            "path": "test/src/app/solana",
          },
          "ui": {
            "children": {
              "ui-layout.tsx": {
                "content": [
                  "import { WalletButton } from '../solana/solana-provider'",
                  "import * as React from 'react'",
                  "import { ReactNode, Suspense, useEffect, useRef } from 'react'",
                  "import { Link, useLocation } from 'react-router-dom'",
                  "import { AccountChecker } from '../account/account-ui'",
                  "import { ClusterChecker, ClusterUiSelect, ExplorerLink } from '../cluster/cluster-ui'",
                  "import toast, { Toaster } from 'react-hot-toast'",
                  "export function UiLayout({ children }: { children: ReactNode }) {",
                  "const { pathname } = useLocation()",
                  "const pages = [",
                  "{ label: 'Account', path: '/account' },",
                  "{ label: 'Clusters', path: '/clusters' },",
                  "]",
                  "return (",
                  "<div className="h-full flex flex-col">",
                  "<div className="navbar bg-base-300 text-neutral-content flex-col md:flex-row space-y-2 md:space-y-0">",
                  "<div className="flex-1">",
                  "<Link className="btn btn-ghost normal-case text-xl"",
                  "to="/"",
                  ">",
                  "<img className="h-4 md:h-6" alt="Solana Logo"",
                  "src="/assets/solana-logo.png"",
                  "/>",
                  "</Link>",
                  "<ul className="menu menu-horizontal px-1 space-x-2">",
                  "{pages.map(({ label, path }) => (",
                  "<li key={path}>",
                  "<Link className={pathname.startsWith(path) ? 'active' : ''}",
                  "to={path}",
                  ">",
                  "{label}",
                  "</Link>",
                  "</li>",
                  "))}",
                  "</ul>",
                  "</div>",
                  "<div className="flex-none space-x-2">",
                  "<WalletButton />",
                  "<ClusterUiSelect />",
                  "</div>",
                  "</div>",
                  "<ClusterChecker>",
                  "<AccountChecker />",
                  "</ClusterChecker>",
                  "<div className="flex-grow mx-4 lg:mx-auto">",
                  "<Suspense",
                  "fallback={",
                  "<div className="text-center my-32">",
                  "<span className="loading loading-spinner loading-lg"></span>",
                  "</div>",
                  "}",
                  ">",
                  "{children}",
                  "</Suspense>",
                  "<Toaster position="bottom-right" />",
                  "</div>",
                  "<footer className="footer footer-center p-4 bg-base-300 text-base-content">",
                  "<aside>",
                  "<p>",
                  "Powered by{' '}",
                  "<a",
                  "className={'link '}",
                  "href="https://github.com/solana-developers/create-solana-dapp"",
                  "target={'_blank'}",
                  "rel={'noopener noreferrer'}",
                  ">",
                  "create-solana-dapp",
                  "</a>",
                  "</p>",
                  "</aside>",
                  "</footer>",
                  "</div>",
                  ")",
                  "}",
                  "export function AppModal({",
                  "children,",
                  "title,",
                  "hide,",
                  "show,",
                  "submit,",
                  "submitDisabled,",
                  "submitLabel,",
                  "}: {",
                  "children: ReactNode",
                  "title: string",
                  "hide: () => void",
                  "show: boolean",
                  "submit?: () => void",
                  "submitDisabled?: boolean",
                  "submitLabel?: string",
                  "}) {",
                  "const dialogRef = useRef<HTMLDialogElement | null>(null)",
                  "useEffect(() => {",
                  "if (!dialogRef.current) return",
                  "if (show) {",
                  "dialogRef.current.showModal()",
                  "} else {",
                  "dialogRef.current.close()",
                  "}",
                  "}, [show, dialogRef])",
                  "return (",
                  "<dialog className="modal" ref={dialogRef}>",
                  "<div className="modal-box space-y-5">",
                  "<h3 className="font-bold text-lg">{title}</h3>",
                  "{children}",
                  "<div className="modal-action">",
                  "<div className="join space-x-2">",
                  "{submit ? (",
                  "<button className="btn btn-xs lg:btn-md btn-primary" onClick={submit} disabled={submitDisabled}>",
                  "{submitLabel || 'Save'}",
                  "</button>",
                  ") : null}",
                  "<button onClick={hide} className="btn">",
                  "Close",
                  "</button>",
                  "</div>",
                  "</div>",
                  "</div>",
                  "</dialog>",
                  ")",
                  "}",
                  "export function AppHero({",
                  "children,",
                  "title,",
                  "subtitle,",
                  "}: {",
                  "children?: ReactNode",
                  "title: ReactNode",
                  "subtitle: ReactNode",
                  "}) {",
                  "return (",
                  "<div className="hero py-[64px]">",
                  "<div className="hero-content text-center">",
                  "<div className="max-w-2xl">",
                  "{typeof title === 'string' ? <h1 className="text-5xl font-bold cursor-pointer">{title}</h1> : title}",
                  "{typeof subtitle === 'string' ? <p className="py-6">{subtitle}</p> : subtitle}",
                  "{children}",
                  "</div>",
                  "</div>",
                  "</div>",
                  ")",
                  "}",
                  "export function ellipsify(str = '', len = 4) {",
                  "if (str.length > 30) {",
                  "return str.substring(0, len) + '..' + str.substring(str.length - len, str.length)",
                  "}",
                  "return str",
                  "}",
                  "export function useTransactionToast() {",
                  "return (signature: string) => {",
                  "toast.success(",
                  "<div className={'text-center'}>",
                  "<div className="text-lg">Transaction sent</div>",
                  "<ExplorerLink path={\`tx/\${signature}\`} label={'View Transaction'} className="btn btn-xs btn-primary" />",
                  "</div>,",
                  ")",
                  "}",
                  "}",
                ],
                "isBinary": false,
                "path": "test/src/app/ui/ui-layout.tsx",
              },
            },
            "path": "test/src/app/ui",
          },
        },
        "path": "test/src/app",
      },
      "index.html": {
        "content": [
          "<!DOCTYPE html>",
          "<html lang="en">",
          "<head>",
          "<meta charset="utf-8" />",
          "<title>Test</title>",
          "<base href="/" />",
          "<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />",
          "<link rel="icon" type="image/x-icon" href="favicon.ico" />",
          "</head>",
          "<body>",
          "<div id="root"></div>",
          "</body>",
          "</html>",
        ],
        "isBinary": false,
        "path": "test/src/index.html",
      },
      "styles.css": {
        "content": [
          "@tailwind base;",
          "@tailwind components;",
          "@tailwind utilities;",
          "html,",
          "body,",
          "#root {",
          "height: 100%;",
          "}",
          ".wallet-adapter-button-trigger {",
          "background: rgb(100, 26, 230) !important;",
          "border-radius: 8px !important;",
          "padding-left: 16px !important;",
          "padding-right: 16px !important;",
          "}",
          ".wallet-adapter-dropdown-list,",
          ".wallet-adapter-button {",
          "font-family: inherit !important;",
          "}",
        ],
        "isBinary": false,
        "path": "test/src/styles.css",
      },
    },
    "path": "test/src",
  },
}
`;
