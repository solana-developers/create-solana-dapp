// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`react-feature generator should generate files for anchor-basic feature 1`] = `
{
  ".eslintignore": {
    "content": [
      "node_modules",
    ],
    "isBinary": false,
    "path": "./.eslintignore",
  },
  ".eslintrc.json": {
    "content": [
      "{",
      ""root": true,",
      ""ignorePatterns": [",
      ""**/*"",
      "],",
      ""plugins": [",
      ""@nx"",
      "],",
      ""overrides": [",
      "{",
      ""files": [",
      ""*.ts",",
      ""*.tsx",",
      ""*.js",",
      ""*.jsx"",
      "],",
      ""rules": {",
      ""@nx/enforce-module-boundaries": [",
      ""error",",
      "{",
      ""enforceBuildableLibDependency": true,",
      ""allow": [],",
      ""depConstraints": [",
      "{",
      ""sourceTag": "*",",
      ""onlyDependOnLibsWithTags": [",
      ""*"",
      "]",
      "}",
      "]",
      "}",
      "]",
      "}",
      "},",
      "{",
      ""files": [",
      ""*.ts",",
      ""*.tsx"",
      "],",
      ""extends": [",
      ""plugin:@nx/typescript"",
      "],",
      ""rules": {}",
      "},",
      "{",
      ""files": [",
      ""*.js",",
      ""*.jsx"",
      "],",
      ""extends": [",
      ""plugin:@nx/javascript"",
      "],",
      ""rules": {}",
      "}",
      "]",
      "}",
    ],
    "isBinary": false,
    "path": "./.eslintrc.json",
  },
  ".prettierignore": {
    "content": [
      "# Add files here to ignore them from prettier formatting",
      "/dist",
      "/coverage",
      "/.nx/cache",
      ".anchor",
      "anchor-app/target/deploy",
      "anchor-app/target/debug",
      "anchor-app/target/release",
      "anchor-app/target/sbf-solana-solana",
      "anchor-app/target/.rustc_info.json",
      "!anchor-app/target/idl/*.json",
      "!anchor-app/target/types/*.ts",
      "node_modules",
      "dist",
      "tmp",
      "build",
      "test-ledger",
    ],
    "isBinary": false,
    "path": "./.prettierignore",
  },
  ".prettierrc": {
    "content": [
      "{"singleQuote":true}",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "LICENSE": {
    "content": [
      "MIT License",
      "Copyright (c) 2024 test",
      "Permission is hereby granted, free of charge, to any person obtaining a copy",
      "of this software and associated documentation files (the "Software"), to deal",
      "in the Software without restriction, including without limitation the rights",
      "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
      "copies of the Software, and to permit persons to whom the Software is",
      "furnished to do so, subject to the following conditions:",
      "The above copyright notice and this permission notice shall be included in all",
      "copies or substantial portions of the Software.",
      "THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
      "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
      "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
      "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
      "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
      "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
      "SOFTWARE.",
    ],
    "isBinary": false,
    "path": "./LICENSE",
  },
  "README.md": {
    "content": [
      "# proj",
      "This project is generated with the [create-solana-dapp](https://github.com/solana-developers/create-solana-dapp) generator.",
      "## Getting Started",
      "### Prerequisites",
      "- Node v18.18.0 or higher",
      "- Rust v1.77.2 or higher",
      "- Anchor CLI 0.30.0 or higher",
      "- Solana CLI 1.18.9 or higher",
      "### Installation",
      "#### Clone the repo",
      "\`\`\`shell",
      "git clone <repo-url>",
      "cd <repo-name>",
      "\`\`\`",
      "#### Install Dependencies",
      "\`\`\`shell",
      "yarn install",
      "\`\`\`",
      "#### Start the web app",
      "\`\`\`",
      "yarn dev",
      "\`\`\`",
      "## Apps",
      "### anchor",
      "This is a Solana program written in Rust using the Anchor framework.",
      "#### Commands",
      "You can use any normal anchor commands. Either move to the \`anchor-app\` directory and run the \`anchor\` command or prefix the command with \`yarn\`, eg: \`yarn anchor\`.",
      "#### Sync the program id:",
      "Running this command will create a new keypair in the \`anchor-app/target/deploy\` directory and save the address to the Anchor config file and update the \`declare_id!\` macro in the \`./src/lib.rs\` file of the program.",
      "You will manually need to update the constant in \`anchor-app/lib/counter-exports.ts\` to match the new program id.",
      "\`\`\`shell",
      "yarn anchor keys sync",
      "\`\`\`",
      "#### Build the program:",
      "\`\`\`shell",
      "yarn anchor-build",
      "\`\`\`",
      "#### Start the test validator with the program deployed:",
      "\`\`\`shell",
      "yarn anchor-localnet",
      "\`\`\`",
      "#### Run the tests",
      "\`\`\`shell",
      "yarn anchor-test",
      "\`\`\`",
      "#### Deploy to Devnet",
      "\`\`\`shell",
      "yarn anchor deploy --provider.cluster devnet",
      "\`\`\`",
      "### web",
      "This is a React app that uses the Anchor generated client to interact with the Solana program.",
      "#### Commands",
      "Start the web app",
      "\`\`\`shell",
      "yarn dev",
      "\`\`\`",
      "Build the web app",
      "\`\`\`shell",
      "yarn build",
      "\`\`\`",
    ],
    "isBinary": false,
    "path": "./README.md",
  },
  "anchor-app": {
    "children": {
      ".eslintrc.json": {
        "content": [
          "{",
          ""extends": [",
          ""../.eslintrc.json"",
          "],",
          ""ignorePatterns": [",
          ""!**/*"",
          "],",
          ""overrides": [",
          "{",
          ""files": [",
          ""*.ts",",
          ""*.tsx",",
          ""*.js",",
          ""*.jsx"",
          "],",
          ""rules": {}",
          "},",
          "{",
          ""files": [",
          ""*.ts",",
          ""*.tsx"",
          "],",
          ""rules": {}",
          "},",
          "{",
          ""files": [",
          ""*.js",",
          ""*.jsx"",
          "],",
          ""rules": {}",
          "},",
          "{",
          ""files": [",
          ""*.json"",
          "],",
          ""parser": "jsonc-eslint-parser",",
          ""rules": {",
          ""@nx/dependency-checks": [",
          ""error",",
          "{",
          ""ignoredFiles": [",
          ""{projectRoot}/rollup.config.{js,ts,mjs,mts}"",
          "]",
          "}",
          "]",
          "}",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor-app/.eslintrc.json",
      },
      ".swcrc": {
        "content": [
          "{",
          ""jsc": {",
          ""target": "es2017",",
          ""parser": {",
          ""syntax": "typescript",",
          ""decorators": true,",
          ""dynamicImport": true",
          "},",
          ""transform": {",
          ""decoratorMetadata": true,",
          ""legacyDecorator": true",
          "},",
          ""keepClassNames": true,",
          ""externalHelpers": true,",
          ""loose": true",
          "},",
          ""module": {",
          ""type": "es6"",
          "},",
          ""sourceMaps": true,",
          ""exclude": ["jest.config.ts",".*\\\\.spec.tsx?$",".*\\\\.test.tsx?$","./src/jest-setup.ts$","./**/jest-setup.ts$",".*.js$"]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor-app/.swcrc",
      },
      "Anchor.toml": {
        "content": [
          "[toolchain]",
          "[features]",
          "seeds = false",
          "skip-lint = false",
          "[programs.localnet]",
          "my_anchor_basic_program = "GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA"",
          "[registry]",
          "url = "https://api.apr.dev"",
          "[provider]",
          "cluster = "Localnet"",
          "wallet = "~/.config/solana/id.json"",
          "[scripts]",
          "test = "../node_modules/.bin/nx run anchor-app:jest"",
          "[test]",
          "startup_wait = 5000",
          "shutdown_wait = 2000",
          "upgradeable = false",
          "[test.validator]",
          "bind_address = "127.0.0.1"",
          "ledger = ".anchor/test-ledger"",
          "rpc_port = 8899",
        ],
        "isBinary": false,
        "path": "./anchor-app/Anchor.toml",
      },
      "Cargo.lock": {
        "content": null,
        "isBinary": true,
        "path": "./anchor-app/Cargo.lock",
      },
      "Cargo.toml": {
        "content": [
          "[workspace]",
          "members = [",
          ""programs/*"",
          "]",
          "resolver = "2"",
          "[profile.release]",
          "overflow-checks = true",
          "lto = "fat"",
          "codegen-units = 1",
          "[profile.release.build-override]",
          "opt-level = 3",
          "incremental = false",
          "codegen-units = 1",
        ],
        "isBinary": false,
        "path": "./anchor-app/Cargo.toml",
      },
      "README.md": {
        "content": [
          "# anchor-app",
          "This library was generated with [Nx](https://nx.dev).",
          "## Building",
          "Run \`nx build anchor-app\` to build the library.",
          "## Running unit tests",
          "Run \`nx test anchor-app\` to execute the unit tests via [Jest](https://jestjs.io).",
        ],
        "isBinary": false,
        "path": "./anchor-app/README.md",
      },
      "jest.config.ts": {
        "content": [
          "/* eslint-disable */",
          "import { readFileSync } from 'fs';",
          "// Reading the SWC compilation config and remove the "exclude"",
          "// for the test files to be compiled by SWC",
          "const { exclude: _, ...swcJestConfig } = JSON.parse(",
          "readFileSync(\`\${__dirname}/.swcrc\`, 'utf-8')",
          ");",
          "// disable .swcrc look-up by SWC core because we're passing in swcJestConfig ourselves.",
          "// If we do not disable this, SWC Core will read .swcrc and won't transform our test files due to "exclude"",
          "if (swcJestConfig.swcrc === undefined) {",
          "swcJestConfig.swcrc = false;",
          "}",
          "// Uncomment if using global setup/teardown files being transformed via swc",
          "// https://nx.dev/packages/jest/documents/overview#global-setup/teardown-with-nx-libraries",
          "// jest needs EsModule Interop to find the default exported setup/teardown functions",
          "// swcJestConfig.module.noInterop = false;",
          "export default {",
          "displayName: 'anchor-app',",
          "preset: '../jest.preset.js',",
          "transform: {",
          "'^.+\\\\.[tj]s$': ['@swc/jest', swcJestConfig],",
          "},",
          "moduleFileExtensions: ['ts', 'js', 'html'],",
          "testEnvironment: '',",
          "coverageDirectory: '../coverage/anchor-app'",
          "};",
        ],
        "isBinary": false,
        "path": "./anchor-app/jest.config.ts",
      },
      "migrations": {
        "children": {
          "deploy.ts": {
            "content": [
              "// Migrations are an early feature. Currently, they're nothing more than this",
              "// single deploy script that's invoked from the CLI, injecting a provider",
              "// configured from the workspace's Anchor.toml.",
              "import * as anchor from '@coral-xyz/anchor';",
              "module.exports = async function (provider) {",
              "// Configure client to use the provider.",
              "anchor.setProvider(provider);",
              "// Add your deploy script here.",
              "};",
            ],
            "isBinary": false,
            "path": "./anchor-app/migrations/deploy.ts",
          },
        },
        "path": "./anchor-app/migrations",
      },
      "package.json": {
        "content": [
          "{",
          ""name": "@proj/anchor-app",",
          ""version": "0.0.1",",
          ""dependencies": {",
          ""@coral-xyz/anchor": "^0.30.0",",
          ""@solana/web3.js": "1.91.7"",
          "},",
          ""main": "./index.cjs",",
          ""module": "./index.js",",
          ""private": true",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor-app/package.json",
      },
      "programs": {
        "children": {
          "counter": {
            "children": {
              "Cargo.toml": {
                "content": [
                  "[package]",
                  "name = "counter"",
                  "version = "0.1.0"",
                  "description = "Created with Anchor"",
                  "edition = "2021"",
                  "[lib]",
                  "crate-type = ["cdylib", "lib"]",
                  "name = "counter"",
                  "[features]",
                  "no-entrypoint = []",
                  "no-idl = []",
                  "no-log-ix-name = []",
                  "cpi = ["no-entrypoint"]",
                  "default = []",
                  "idl-build = ["anchor-lang/idl-build"]",
                  "[dependencies]",
                  "anchor-lang = "0.30.0"",
                ],
                "isBinary": false,
                "path": "./anchor-app/programs/counter/Cargo.toml",
              },
              "Xargo.toml": {
                "content": [
                  "[target.bpfel-unknown-unknown.dependencies.std]",
                  "features = []",
                ],
                "isBinary": false,
                "path": "./anchor-app/programs/counter/Xargo.toml",
              },
              "src": {
                "children": {
                  "lib.rs": {
                    "content": [
                      "#![allow(clippy::result_large_err)]",
                      "use anchor_lang::prelude::*;",
                      "declare_id!("GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA");",
                      "#[program]",
                      "pub mod counter {",
                      "use super::*;",
                      "pub fn close(_ctx: Context<CloseCounter>) -> Result<()> {",
                      "Ok(())",
                      "}",
                      "pub fn decrement(ctx: Context<Update>) -> Result<()> {",
                      "ctx.accounts.counter.count = ctx.accounts.counter.count.checked_sub(1).unwrap();",
                      "Ok(())",
                      "}",
                      "pub fn increment(ctx: Context<Update>) -> Result<()> {",
                      "ctx.accounts.counter.count = ctx.accounts.counter.count.checked_add(1).unwrap();",
                      "Ok(())",
                      "}",
                      "pub fn initialize(_ctx: Context<InitializeCounter>) -> Result<()> {",
                      "Ok(())",
                      "}",
                      "pub fn set(ctx: Context<Update>, value: u8) -> Result<()> {",
                      "ctx.accounts.counter.count = value.clone();",
                      "Ok(())",
                      "}",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct InitializeCounter<'info> {",
                      "#[account(mut)]",
                      "pub payer: Signer<'info>,",
                      "#[account(",
                      "init,",
                      "space = 8 + Counter::INIT_SPACE,",
                      "payer = payer",
                      ")]",
                      "pub counter: Account<'info, Counter>,",
                      "pub system_program: Program<'info, System>,",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct CloseCounter<'info> {",
                      "#[account(mut)]",
                      "pub payer: Signer<'info>,",
                      "#[account(",
                      "mut,",
                      "close = payer, // close account and return lamports to payer",
                      ")]",
                      "pub counter: Account<'info, Counter>,",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct Update<'info> {",
                      "#[account(mut)]",
                      "pub counter: Account<'info, Counter>,",
                      "}",
                      "#[account]",
                      "#[derive(InitSpace)]",
                      "pub struct Counter {",
                      "count: u8,",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./anchor-app/programs/counter/src/lib.rs",
                  },
                },
                "path": "./anchor-app/programs/counter/src",
              },
            },
            "path": "./anchor-app/programs/counter",
          },
          "my-anchor-basic-program": {
            "children": {
              "Cargo.toml": {
                "content": [
                  "[package]",
                  "name = "my-anchor-basic-program"",
                  "version = "0.1.0"",
                  "description = "Created with Anchor"",
                  "edition = "2021"",
                  "[lib]",
                  "crate-type = ["cdylib", "lib"]",
                  "name = "my_anchor_basic_program"",
                  "[features]",
                  "no-entrypoint = []",
                  "no-idl = []",
                  "no-log-ix-name = []",
                  "cpi = ["no-entrypoint"]",
                  "default = []",
                  "idl-build = ["anchor-lang/idl-build"]",
                  "[dependencies]",
                  "anchor-lang = "0.30.0"",
                ],
                "isBinary": false,
                "path": "./anchor-app/programs/my-anchor-basic-program/Cargo.toml",
              },
              "Xargo.toml": {
                "content": [
                  "[target.bpfel-unknown-unknown.dependencies.std]",
                  "features = []",
                ],
                "isBinary": false,
                "path": "./anchor-app/programs/my-anchor-basic-program/Xargo.toml",
              },
              "src": {
                "children": {
                  "lib.rs": {
                    "content": [
                      "use anchor_lang::prelude::*;",
                      "declare_id!("GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA");",
                      "#[program]",
                      "pub mod my_anchor_basic_program {",
                      "use super::*;",
                      "pub fn greet(_ctx: Context<Initialize>) -> Result<()> {",
                      "msg!("GM!");",
                      "Ok(())",
                      "}",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct Initialize {}",
                    ],
                    "isBinary": false,
                    "path": "./anchor-app/programs/my-anchor-basic-program/src/lib.rs",
                  },
                },
                "path": "./anchor-app/programs/my-anchor-basic-program/src",
              },
            },
            "path": "./anchor-app/programs/my-anchor-basic-program",
          },
        },
        "path": "./anchor-app/programs",
      },
      "project.json": {
        "content": [
          "{",
          ""name": "anchor-app",",
          ""$schema": "../node_modules/nx/schemas/project-schema.json",",
          ""sourceRoot": "anchor-app/src",",
          ""projectType": "library",",
          ""tags": [],",
          ""targets": {",
          ""build": {",
          ""executor": "@nx/rollup:rollup",",
          ""outputs": [",
          ""{options.outputPath}"",
          "],",
          ""options": {",
          ""outputPath": "dist/anchor-app",",
          ""main": "anchor-app/src/index.ts",",
          ""tsConfig": "anchor-app/tsconfig.lib.json",",
          ""assets": [],",
          ""project": "anchor-app/package.json",",
          ""compiler": "swc",",
          ""format": [",
          ""cjs",",
          ""esm"",
          "]",
          "}",
          "},",
          ""lint": {",
          ""executor": "@nx/eslint:lint"",
          "},",
          ""test": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor-app",",
          ""commands": [",
          ""anchor test"",
          "],",
          ""parallel": false",
          "}",
          "},",
          ""anchor": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor-app",",
          ""commands": [",
          ""anchor"",
          "],",
          ""parallel": false",
          "}",
          "},",
          ""localnet": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor-app",",
          ""commands": [",
          ""anchor localnet"",
          "],",
          ""parallel": false",
          "}",
          "},",
          ""jest": {",
          ""executor": "@nx/jest:jest",",
          ""outputs": [",
          ""{workspaceRoot}/coverage/{projectRoot}"",
          "],",
          ""options": {",
          ""jestConfig": "anchor-app/jest.config.ts"",
          "}",
          "}",
          "}",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor-app/project.json",
      },
      "src": {
        "children": {
          "counter-exports.ts": {
            "content": [
              "// Here we export some useful types and functions for interacting with the Anchor program.",
              "import { AnchorProvider, Program } from '@coral-xyz/anchor';",
              "import { Cluster, PublicKey } from '@solana/web3.js';",
              "import CounterIDL from '../target/idl/counter.json';",
              "import type { Counter } from '../target/types/counter';",
              "// Re-export the generated IDL and type",
              "export { Counter, CounterIDL };",
              "// The programId is imported from the program IDL.",
              "export const COUNTER_PROGRAM_ID = new PublicKey(CounterIDL.address)",
              "// This is a helper function to get the Counter Anchor program.",
              "export function getCounterProgram(provider: AnchorProvider) {",
              "return new Program(CounterIDL as Counter, provider);",
              "}",
              "// This is a helper function to get the program ID for the Counter program depending on the cluster.",
              "export function getCounterProgramId(cluster: Cluster) {",
              "switch (cluster) {",
              "case 'devnet':",
              "case 'testnet':",
              "// This is the program ID for the Counter program on devnet and testnet.",
              "return new PublicKey('CounNZdmsQmWh7uVngV9FXW2dZ6zAgbJyYsvBpqbykg')",
              "case 'mainnet-beta':",
              "default:",
              "return COUNTER_PROGRAM_ID",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "./anchor-app/src/counter-exports.ts",
          },
          "index.ts": {
            "content": [
              "// This file was generated by preset-anchor. Programs are exported from this file.",
              "export * from './counter-exports'",
              "export * from './my-anchor-basic-program-exports'",
            ],
            "isBinary": false,
            "path": "./anchor-app/src/index.ts",
          },
          "my-anchor-basic-program-exports.ts": {
            "content": [
              "// Here we export some useful types and functions for interacting with the Anchor program.",
              "import { AnchorProvider, Program } from '@coral-xyz/anchor';",
              "import { PublicKey } from '@solana/web3.js';",
              "import type { MyAnchorBasicProgram } from '../target/types/my_anchor_basic_program';",
              "import { IDL as MyAnchorBasicProgramIDL } from '../target/types/my_anchor_basic_program';",
              "// Re-export the generated IDL and type",
              "export { MyAnchorBasicProgram, MyAnchorBasicProgramIDL };",
              "// The programId is imported from the program IDL.",
              "export const MY_ANCHOR_BASIC_PROGRAM_PROGRAM_ID = new PublicKey(MyAnchorBasicProgramIDL.address)",
              "// This is a helper function to get the MyAnchorBasicProgram Anchor program.",
              "export function getMyAnchorBasicProgramProgram(provider: AnchorProvider) {",
              "return new Program(MyAnchorBasicProgramIDL as MyAnchorBasicProgram, provider);",
              "}",
            ],
            "isBinary": false,
            "path": "./anchor-app/src/my-anchor-basic-program-exports.ts",
          },
        },
        "path": "./anchor-app/src",
      },
      "target": {
        "children": {
          "deploy": {
            "children": {
              "counter-keypair.json": {
                "content": [
                  "[102,57,177,113,190,89,227,160,193,179,207,89,103,112,83,251,142,20,242,30,81,26,82,85,207,97,28,129,190,28,128,71,228,27,114,255,63,136,164,140,185,151,50,58,148,32,197,184,85,144,79,78,24,248,25,138,254,31,96,78,56,230,148,1]",
                ],
                "isBinary": false,
                "path": "./anchor-app/target/deploy/counter-keypair.json",
              },
              "my_anchor_basic_program-keypair.json": {
                "content": [
                  "[102,57,177,113,190,89,227,160,193,179,207,89,103,112,83,251,142,20,242,30,81,26,82,85,207,97,28,129,190,28,128,71,228,27,114,255,63,136,164,140,185,151,50,58,148,32,197,184,85,144,79,78,24,248,25,138,254,31,96,78,56,230,148,1]",
                ],
                "isBinary": false,
                "path": "./anchor-app/target/deploy/my_anchor_basic_program-keypair.json",
              },
            },
            "path": "./anchor-app/target/deploy",
          },
          "idl": {
            "children": {
              "counter.json": {
                "content": [
                  "{",
                  ""address": "GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA",",
                  ""metadata": {",
                  ""name": "counter",",
                  ""version": "0.1.0",",
                  ""spec": "0.1.0",",
                  ""description": "Created with Anchor"",
                  "},",
                  ""instructions": [",
                  "{",
                  ""name": "close",",
                  ""discriminator": [",
                  "98,",
                  "165,",
                  "201,",
                  "177,",
                  "108,",
                  "65,",
                  "206,",
                  "96",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "payer",",
                  ""writable": true,",
                  ""signer": true",
                  "},",
                  "{",
                  ""name": "counter",",
                  ""writable": true",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "decrement",",
                  ""discriminator": [",
                  "106,",
                  "227,",
                  "168,",
                  "59,",
                  "248,",
                  "27,",
                  "150,",
                  "101",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "counter",",
                  ""writable": true",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "increment",",
                  ""discriminator": [",
                  "11,",
                  "18,",
                  "104,",
                  "9,",
                  "104,",
                  "174,",
                  "59,",
                  "33",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "counter",",
                  ""writable": true",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "initialize",",
                  ""discriminator": [",
                  "175,",
                  "175,",
                  "109,",
                  "31,",
                  "13,",
                  "152,",
                  "155,",
                  "237",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "payer",",
                  ""writable": true,",
                  ""signer": true",
                  "},",
                  "{",
                  ""name": "counter",",
                  ""writable": true,",
                  ""signer": true",
                  "},",
                  "{",
                  ""name": "system_program",",
                  ""address": "11111111111111111111111111111111"",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "set",",
                  ""discriminator": [",
                  "198,",
                  "51,",
                  "53,",
                  "241,",
                  "116,",
                  "29,",
                  "126,",
                  "194",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "counter",",
                  ""writable": true",
                  "}",
                  "],",
                  ""args": [",
                  "{",
                  ""name": "value",",
                  ""type": "u8"",
                  "}",
                  "]",
                  "}",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "Counter",",
                  ""discriminator": [",
                  "135,",
                  "64,",
                  "223,",
                  "168,",
                  "233,",
                  "143,",
                  "162,",
                  "215",
                  "]",
                  "}",
                  "],",
                  ""types": [",
                  "{",
                  ""name": "Counter",",
                  ""type": {",
                  ""kind": "struct",",
                  ""fields": [",
                  "{",
                  ""name": "count",",
                  ""type": "u8"",
                  "}",
                  "]",
                  "}",
                  "}",
                  "]",
                  "}",
                ],
                "isBinary": false,
                "path": "./anchor-app/target/idl/counter.json",
              },
              "my_anchor_basic_program.json": {
                "content": [
                  "{",
                  ""address": "GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA",",
                  ""metadata": {",
                  ""name": "my_anchor_basic_program",",
                  ""version": "0.1.0",",
                  ""spec": "0.1.0",",
                  ""description": "Created with Anchor"",
                  "},",
                  ""instructions": [",
                  "{",
                  ""name": "greet",",
                  ""discriminator": [",
                  "203,",
                  "194,",
                  "3,",
                  "150,",
                  "228,",
                  "58,",
                  "181,",
                  "62",
                  "],",
                  ""accounts": [],",
                  ""args": []",
                  "}",
                  "]",
                  "}",
                ],
                "isBinary": false,
                "path": "./anchor-app/target/idl/my_anchor_basic_program.json",
              },
            },
            "path": "./anchor-app/target/idl",
          },
          "types": {
            "children": {
              "counter.ts": {
                "content": [
                  "/**",
                  "* Program IDL in camelCase format in order to be used in JS/TS.",
                  "*",
                  "* Note that this is only a type helper and is not the actual IDL. The original",
                  "* IDL can be found at \`target/idl/counter.json\`.",
                  "*/",
                  "export type Counter = {",
                  "address: 'GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA';",
                  "metadata: {",
                  "name: 'counter';",
                  "version: '0.1.0';",
                  "spec: '0.1.0';",
                  "description: 'Created with Anchor';",
                  "};",
                  "instructions: [",
                  "{",
                  "name: 'close';",
                  "discriminator: [98, 165, 201, 177, 108, 65, 206, 96];",
                  "accounts: [",
                  "{",
                  "name: 'payer';",
                  "writable: true;",
                  "signer: true;",
                  "},",
                  "{",
                  "name: 'counter';",
                  "writable: true;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'decrement';",
                  "discriminator: [106, 227, 168, 59, 248, 27, 150, 101];",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "writable: true;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'increment';",
                  "discriminator: [11, 18, 104, 9, 104, 174, 59, 33];",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "writable: true;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'initialize';",
                  "discriminator: [175, 175, 109, 31, 13, 152, 155, 237];",
                  "accounts: [",
                  "{",
                  "name: 'payer';",
                  "writable: true;",
                  "signer: true;",
                  "},",
                  "{",
                  "name: 'counter';",
                  "writable: true;",
                  "signer: true;",
                  "},",
                  "{",
                  "name: 'systemProgram';",
                  "address: '11111111111111111111111111111111';",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'set';",
                  "discriminator: [198, 51, 53, 241, 116, 29, 126, 194];",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "writable: true;",
                  "}",
                  "];",
                  "args: [",
                  "{",
                  "name: 'value';",
                  "type: 'u8';",
                  "}",
                  "];",
                  "}",
                  "];",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "discriminator: [135, 64, 223, 168, 233, 143, 162, 215];",
                  "}",
                  "];",
                  "types: [",
                  "{",
                  "name: 'counter';",
                  "type: {",
                  "kind: 'struct';",
                  "fields: [",
                  "{",
                  "name: 'count';",
                  "type: 'u8';",
                  "}",
                  "];",
                  "};",
                  "}",
                  "];",
                  "};",
                ],
                "isBinary": false,
                "path": "./anchor-app/target/types/counter.ts",
              },
              "my_anchor_basic_program.ts": {
                "content": [
                  "/**",
                  "* Program IDL in camelCase format in order to be used in JS/TS.",
                  "*",
                  "* Note that this is only a type helper and is not the actual IDL. The original",
                  "* IDL can be found at \`target/idl/my_anchor_basic_program.json\`.",
                  "*/",
                  "export type MyAnchorBasicProgram = {",
                  "address: 'GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA';",
                  "metadata: {",
                  "name: 'myAnchorBasicProgram';",
                  "version: '0.1.0';",
                  "spec: '0.1.0';",
                  "description: 'Created with Anchor';",
                  "};",
                  "instructions: [",
                  "{",
                  "name: 'greet';",
                  "discriminator: [203, 194, 3, 150, 228, 58, 181, 62];",
                  "accounts: [];",
                  "args: [];",
                  "}",
                  "];",
                  "};",
                ],
                "isBinary": false,
                "path": "./anchor-app/target/types/my_anchor_basic_program.ts",
              },
            },
            "path": "./anchor-app/target/types",
          },
        },
        "path": "./anchor-app/target",
      },
      "tests": {
        "children": {
          "counter.spec.ts": {
            "content": [
              "import * as anchor from '@coral-xyz/anchor'",
              "import { Program } from '@coral-xyz/anchor'",
              "import { Keypair } from '@solana/web3.js'",
              "import { Counter } from "../target/types/counter";",
              "describe("counter", () => {",
              "// Configure the client to use the local cluster.",
              "const provider = anchor.AnchorProvider.env()",
              "anchor.setProvider(provider)",
              "const payer = provider.wallet as anchor.Wallet",
              "const program = anchor.workspace.Counter as Program<Counter>;",
              "const counterKeypair = Keypair.generate()",
              "it('Initialize Counter', async () => {",
              "await program.methods",
              ".initialize()",
              ".accounts({",
              "counter: counterKeypair.publicKey,",
              "payer: payer.publicKey,",
              "})",
              ".signers([counterKeypair])",
              ".rpc()",
              "const currentCount = await program.account.counter.fetch(counterKeypair.publicKey)",
              "expect(currentCount.count).toEqual(0)",
              "})",
              "it('Increment Counter', async () => {",
              "await program.methods.increment().accounts({ counter: counterKeypair.publicKey }).rpc()",
              "const currentCount = await program.account.counter.fetch(counterKeypair.publicKey)",
              "expect(currentCount.count).toEqual(1)",
              "})",
              "it('Increment Counter Again', async () => {",
              "await program.methods.increment().accounts({ counter: counterKeypair.publicKey }).rpc()",
              "const currentCount = await program.account.counter.fetch(counterKeypair.publicKey)",
              "expect(currentCount.count).toEqual(2)",
              "})",
              "it('Decrement Counter', async () => {",
              "await program.methods.decrement().accounts({ counter: counterKeypair.publicKey }).rpc()",
              "const currentCount = await program.account.counter.fetch(counterKeypair.publicKey)",
              "expect(currentCount.count).toEqual(1)",
              "})",
              "it('Set counter value', async () => {",
              "await program.methods.set(42).accounts({ counter: counterKeypair.publicKey }).rpc()",
              "const currentCount = await program.account.counter.fetch(counterKeypair.publicKey)",
              "expect(currentCount.count).toEqual(42)",
              "})",
              "it('Set close the counter account', async () => {",
              "await program.methods",
              ".close()",
              ".accounts({",
              "payer: payer.publicKey,",
              "counter: counterKeypair.publicKey,",
              "})",
              ".rpc()",
              "// The account should no longer exist, returning null.",
              "const userAccount = await program.account.counter.fetchNullable(counterKeypair.publicKey)",
              "expect(userAccount).toBeNull()",
              "})",
              "})",
            ],
            "isBinary": false,
            "path": "./anchor-app/tests/counter.spec.ts",
          },
          "my-anchor-basic-program.spec.ts": {
            "content": [
              "import * as anchor from "@coral-xyz/anchor";",
              "import { Program } from "@coral-xyz/anchor";",
              "import { MyAnchorBasicProgram } from "../target/types/my_anchor_basic_program";",
              "describe("my-anchor-basic-program", () => {",
              "// Configure the client to use the local cluster.",
              "anchor.setProvider(anchor.AnchorProvider.env());",
              "const program = anchor.workspace.MyAnchorBasicProgram as Program<MyAnchorBasicProgram>;",
              "it("should run the program", async () => {",
              "// Add your test here.",
              "const tx = await program.methods.greet().rpc();",
              "console.log("Your transaction signature", tx);",
              "});",
              "});",
            ],
            "isBinary": false,
            "path": "./anchor-app/tests/my-anchor-basic-program.spec.ts",
          },
        },
        "path": "./anchor-app/tests",
      },
      "tsconfig.json": {
        "content": [
          "{",
          ""extends": "../tsconfig.base.json",",
          ""compilerOptions": {",
          ""module": "commonjs"",
          "},",
          ""files": [],",
          ""include": [],",
          ""references": [",
          "{",
          ""path": "./tsconfig.lib.json"",
          "},",
          "{",
          ""path": "./tsconfig.spec.json"",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor-app/tsconfig.json",
      },
      "tsconfig.lib.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""declaration": true,",
          ""types": [",
          ""node"",
          "],",
          ""resolveJsonModule": true,",
          ""allowSyntheticDefaultImports": true",
          "},",
          ""include": [",
          ""src/**/*.ts"",
          "],",
          ""exclude": [",
          ""jest.config.ts",",
          ""src/**/*.spec.ts",",
          ""src/**/*.test.ts"",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor-app/tsconfig.lib.json",
      },
      "tsconfig.spec.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""module": "commonjs",",
          ""types": ["jest", "node"]",
          "},",
          ""include": [",
          ""jest.config.ts",",
          ""src/**/*.test.ts",",
          ""src/**/*.spec.ts",",
          ""src/**/*.d.ts"",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor-app/tsconfig.spec.json",
      },
    },
    "path": "./anchor-app",
  },
  "jest.config.ts": {
    "content": [
      "import { getJestProjectsAsync } from '@nx/jest';",
      "export default async () => ({",
      "projects: await getJestProjectsAsync()",
      "});",
    ],
    "isBinary": false,
    "path": "./jest.config.ts",
  },
  "jest.preset.js": {
    "content": [
      "const nxPreset = require('@nx/jest/preset').default;",
      "module.exports = { ...nxPreset }",
    ],
    "isBinary": false,
    "path": "./jest.preset.js",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": {",
      ""defaultBase": "main"",
      "},",
      ""targetDefaults": {",
      ""build": {",
      ""cache": true",
      "},",
      ""lint": {",
      ""cache": true",
      "},",
      ""@nx/eslint:lint": {",
      ""cache": true,",
      ""inputs": [",
      ""default",",
      ""{workspaceRoot}/.eslintrc.json",",
      ""{workspaceRoot}/.eslintignore",",
      ""{workspaceRoot}/eslint.config.js"",
      "]",
      "},",
      ""@nx/rollup:rollup": {",
      ""cache": true,",
      ""dependsOn": [",
      ""^build"",
      "],",
      ""inputs": [",
      ""default",",
      ""^default"",
      "]",
      "},",
      ""@nx/jest:jest": {",
      ""cache": true,",
      ""inputs": [",
      ""default",",
      ""^default",",
      ""{workspaceRoot}/jest.preset.js"",
      "],",
      ""options": {",
      ""passWithNoTests": true",
      "},",
      ""configurations": {",
      ""ci": {",
      ""ci": true,",
      ""codeCoverage": true",
      "}",
      "}",
      "}",
      "},",
      ""generators": {",
      ""@nx/react": {",
      ""application": {",
      ""babel": true,",
      ""style": "css",",
      ""linter": "eslint",",
      ""bundler": "webpack"",
      "},",
      ""component": {",
      ""style": "css"",
      "},",
      ""library": {",
      ""style": "css",",
      ""linter": "eslint"",
      "}",
      "}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {",
      ""@coral-xyz/anchor": "^0.30.0",",
      ""@solana/spl-token": "0.4.6",",
      ""@solana/wallet-adapter-base": "^0.9.23",",
      ""@solana/wallet-adapter-react": "^0.15.35",",
      ""@solana/wallet-adapter-react-ui": "^0.9.35",",
      ""@solana/web3.js": "1.91.7",",
      ""@tabler/icons-react": "3.2.0",",
      ""@tailwindcss/typography": "0.5.12",",
      ""@tanstack/react-query": "5.31.0",",
      ""bs58": "5.0.0",",
      ""buffer": "6.0.3",",
      ""crypto-browserify": "3.12.0",",
      ""daisyui": "4.10.2",",
      ""jotai": "2.8.0",",
      ""react": "18.2.0",",
      ""react-dom": "18.2.0",",
      ""react-hot-toast": "2.4.1",",
      ""react-router-dom": "6.11.2",",
      ""stream-browserify": "3.0.0",",
      ""tslib": "^2.3.0"",
      "},",
      ""devDependencies": {",
      ""@babel/core": "^7.14.5",",
      ""@babel/preset-react": "^7.14.5",",
      ""@nx/eslint": "18.3.3",",
      ""@nx/eslint-plugin": "18.3.3",",
      ""@nx/jest": "18.3.3",",
      ""@nx/js": "18.3.3",",
      ""@nx/react": "18.3.3",",
      ""@nx/rollup": "18.3.3",",
      ""@nx/web": "18.3.3",",
      ""@nx/webpack": "18.3.3",",
      ""@pmmmwh/react-refresh-webpack-plugin": "^0.5.7",",
      ""@svgr/webpack": "^8.0.1",",
      ""@swc-node/register": "~1.8.0",",
      ""@swc/cli": "~0.1.62",",
      ""@swc/core": "~1.3.85",",
      ""@swc/helpers": "~0.5.2",",
      ""@swc/jest": "0.2.20",",
      ""@types/jest": "^29.4.0",",
      ""@types/node": "18.16.9",",
      ""@types/react": "18.2.33",",
      ""@types/react-dom": "18.2.14",",
      ""@typescript-eslint/eslint-plugin": "^7.3.0",",
      ""@typescript-eslint/parser": "^7.3.0",",
      ""autoprefixer": "10.4.13",",
      ""eslint": "~8.57.0",",
      ""eslint-config-prettier": "^9.0.0",",
      ""eslint-plugin-import": "2.27.5",",
      ""eslint-plugin-jsx-a11y": "6.7.1",",
      ""eslint-plugin-react": "7.32.2",",
      ""eslint-plugin-react-hooks": "4.6.0",",
      ""jest": "^29.4.1",",
      ""jest-environment-jsdom": "^29.4.1",",
      ""postcss": "8.4.21",",
      ""prettier": "^2.6.2",",
      ""react-refresh": "^0.10.0",",
      ""tailwindcss": "3.2.7",",
      ""ts-jest": "^29.1.0",",
      ""ts-node": "10.9.1",",
      ""typescript": "~5.4.2"",
      "},",
      ""scripts": {",
      ""anchor": "nx run anchor-app:anchor",",
      ""anchor-build": "nx run anchor-app:anchor build",",
      ""anchor-localnet": "nx run anchor-app:anchor localnet",",
      ""anchor-test": "nx run anchor-app:anchor test",",
      ""feature": "nx generate @solana-developers/preset-react:feature",",
      ""build": "nx build web-app",",
      ""dev": "nx serve web-app"",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {",
      ""@proj/anchor-app": [",
      ""anchor-app/src/index.ts"",
      "]",
      "}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
  "web-app": {
    "children": {
      ".babelrc": {
        "content": [
          "{",
          ""presets": [",
          "[",
          ""@nx/react/babel",",
          "{",
          ""runtime": "automatic"",
          "}",
          "]",
          "],",
          ""plugins": []",
          "}",
        ],
        "isBinary": false,
        "path": "./web-app/.babelrc",
      },
      ".eslintrc.json": {
        "content": [
          "{",
          ""extends": [",
          ""plugin:@nx/react",",
          ""../.eslintrc.json"",
          "],",
          ""ignorePatterns": [",
          ""!**/*"",
          "],",
          ""overrides": [",
          "{",
          ""files": [",
          ""*.ts",",
          ""*.tsx",",
          ""*.js",",
          ""*.jsx"",
          "],",
          ""rules": {}",
          "},",
          "{",
          ""files": [",
          ""*.ts",",
          ""*.tsx"",
          "],",
          ""rules": {}",
          "},",
          "{",
          ""files": [",
          ""*.js",",
          ""*.jsx"",
          "],",
          ""rules": {}",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./web-app/.eslintrc.json",
      },
      "postcss.config.js": {
        "content": [
          "const { join } = require('path');",
          "// Note: If you use library-specific PostCSS/Tailwind configuration then you should remove the \`postcssConfig\` build",
          "// option from your application's configuration (i.e. project.json).",
          "//",
          "// See: https://nx.dev/guides/using-tailwind-css-in-react#step-4:-applying-configuration-to-libraries",
          "module.exports = {",
          "plugins: {",
          "tailwindcss: {",
          "config: join(__dirname, 'tailwind.config.js'),",
          "},",
          "autoprefixer: {},",
          "},",
          "}",
        ],
        "isBinary": false,
        "path": "./web-app/postcss.config.js",
      },
      "project.json": {
        "content": [
          "{",
          ""name": "web-app",",
          ""$schema": "../node_modules/nx/schemas/project-schema.json",",
          ""sourceRoot": "web-app/src",",
          ""projectType": "application",",
          ""tags": [],",
          ""targets": {",
          ""build": {",
          ""executor": "@nx/webpack:webpack",",
          ""outputs": [",
          ""{options.outputPath}"",
          "],",
          ""defaultConfiguration": "production",",
          ""options": {",
          ""compiler": "babel",",
          ""outputPath": "dist/web-app",",
          ""index": "web-app/src/index.html",",
          ""baseHref": "/",",
          ""main": "web-app/src/main.tsx",",
          ""tsConfig": "web-app/tsconfig.app.json",",
          ""assets": [",
          ""web-app/src/favicon.ico",",
          ""web-app/src/assets"",
          "],",
          ""styles": [",
          ""web-app/src/styles.css"",
          "],",
          ""scripts": [],",
          ""webpackConfig": "web-app/webpack.config.js",",
          ""postcssConfig": "web-app/postcss.config.js"",
          "},",
          ""configurations": {",
          ""development": {",
          ""extractLicenses": false,",
          ""optimization": false,",
          ""sourceMap": true,",
          ""vendorChunk": true",
          "},",
          ""production": {",
          ""fileReplacements": [",
          "{",
          ""replace": "web-app/src/environments/environment.ts",",
          ""with": "web-app/src/environments/environment.prod.ts"",
          "}",
          "],",
          ""optimization": true,",
          ""outputHashing": "all",",
          ""sourceMap": false,",
          ""namedChunks": false,",
          ""extractLicenses": true,",
          ""vendorChunk": false",
          "}",
          "}",
          "},",
          ""serve": {",
          ""executor": "@nx/webpack:dev-server",",
          ""defaultConfiguration": "development",",
          ""options": {",
          ""buildTarget": "web-app:build",",
          ""hmr": true,",
          ""port": 3000",
          "},",
          ""configurations": {",
          ""development": {",
          ""buildTarget": "web-app:build:development"",
          "},",
          ""production": {",
          ""buildTarget": "web-app:build:production",",
          ""hmr": false",
          "}",
          "}",
          "},",
          ""lint": {",
          ""executor": "@nx/eslint:lint"",
          "}",
          "}",
          "}",
        ],
        "isBinary": false,
        "path": "./web-app/project.json",
      },
      "src": {
        "children": {
          "app": {
            "children": {
              "account": {
                "children": {
                  "account-data-access.tsx": {
                    "content": [
                      "import { useConnection, useWallet } from '@solana/wallet-adapter-react'",
                      "import { TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from '@solana/spl-token'",
                      "import {",
                      "Connection,",
                      "LAMPORTS_PER_SOL,",
                      "PublicKey,",
                      "SystemProgram,",
                      "TransactionMessage,",
                      "TransactionSignature,",
                      "VersionedTransaction,",
                      "} from '@solana/web3.js'",
                      "import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'",
                      "import toast from 'react-hot-toast'",
                      "import { useTransactionToast } from '../ui/ui-layout'",
                      "export function useGetBalance({ address }: { address: PublicKey }) {",
                      "const { connection } = useConnection()",
                      "return useQuery({",
                      "queryKey: ['get-balance', { endpoint: connection.rpcEndpoint, address }],",
                      "queryFn: () => connection.getBalance(address),",
                      "})",
                      "}",
                      "export function useGetSignatures({ address }: { address: PublicKey }) {",
                      "const { connection } = useConnection()",
                      "return useQuery({",
                      "queryKey: ['get-signatures', { endpoint: connection.rpcEndpoint, address }],",
                      "queryFn: () => connection.getConfirmedSignaturesForAddress2(address),",
                      "})",
                      "}",
                      "export function useGetTokenAccounts({ address }: { address: PublicKey }) {",
                      "const { connection } = useConnection()",
                      "return useQuery({",
                      "queryKey: ['get-token-accounts', { endpoint: connection.rpcEndpoint, address }],",
                      "queryFn: async () => {",
                      "const [tokenAccounts, token2022Accounts] = await Promise.all([",
                      "connection.getParsedTokenAccountsByOwner(address, {",
                      "programId: TOKEN_PROGRAM_ID,",
                      "}),",
                      "connection.getParsedTokenAccountsByOwner(address, {",
                      "programId: TOKEN_2022_PROGRAM_ID,",
                      "}),",
                      "])",
                      "return [...tokenAccounts.value, ...token2022Accounts.value]",
                      "},",
                      "})",
                      "}",
                      "export function useTransferSol({ address }: { address: PublicKey }) {",
                      "const { connection } = useConnection()",
                      "const transactionToast = useTransactionToast()",
                      "const wallet = useWallet()",
                      "const client = useQueryClient()",
                      "return useMutation({",
                      "mutationKey: ['transfer-sol', { endpoint: connection.rpcEndpoint, address }],",
                      "mutationFn: async (input: { destination: PublicKey; amount: number }) => {",
                      "let signature: TransactionSignature = ''",
                      "try {",
                      "const { transaction, latestBlockhash } = await createTransaction({",
                      "publicKey: address,",
                      "destination: input.destination,",
                      "amount: input.amount,",
                      "connection,",
                      "})",
                      "// Send transaction and await for signature",
                      "signature = await wallet.sendTransaction(transaction, connection)",
                      "// Send transaction and await for signature",
                      "await connection.confirmTransaction({ signature, ...latestBlockhash }, 'confirmed')",
                      "console.log(signature)",
                      "return signature",
                      "} catch (error: unknown) {",
                      "console.log('error', \`Transaction failed! \${error}\`, signature)",
                      "return",
                      "}",
                      "},",
                      "onSuccess: (signature) => {",
                      "if (signature) {",
                      "transactionToast(signature)",
                      "}",
                      "return Promise.all([",
                      "client.invalidateQueries({",
                      "queryKey: ['get-balance', { endpoint: connection.rpcEndpoint, address }],",
                      "}),",
                      "client.invalidateQueries({",
                      "queryKey: ['get-signatures', { endpoint: connection.rpcEndpoint, address }],",
                      "}),",
                      "])",
                      "},",
                      "onError: (error) => {",
                      "toast.error(\`Transaction failed! \${error}\`)",
                      "},",
                      "})",
                      "}",
                      "export function useRequestAirdrop({ address }: { address: PublicKey }) {",
                      "const { connection } = useConnection()",
                      "const transactionToast = useTransactionToast()",
                      "const client = useQueryClient()",
                      "return useMutation({",
                      "mutationKey: ['airdrop', { endpoint: connection.rpcEndpoint, address }],",
                      "mutationFn: async (amount: number = 1) => {",
                      "const [latestBlockhash, signature] = await Promise.all([",
                      "connection.getLatestBlockhash(),",
                      "connection.requestAirdrop(address, amount * LAMPORTS_PER_SOL),",
                      "])",
                      "await connection.confirmTransaction({ signature, ...latestBlockhash }, 'confirmed')",
                      "return signature",
                      "},",
                      "onSuccess: (signature) => {",
                      "transactionToast(signature)",
                      "return Promise.all([",
                      "client.invalidateQueries({",
                      "queryKey: ['get-balance', { endpoint: connection.rpcEndpoint, address }],",
                      "}),",
                      "client.invalidateQueries({",
                      "queryKey: ['get-signatures', { endpoint: connection.rpcEndpoint, address }],",
                      "}),",
                      "])",
                      "},",
                      "})",
                      "}",
                      "async function createTransaction({",
                      "publicKey,",
                      "destination,",
                      "amount,",
                      "connection,",
                      "}: {",
                      "publicKey: PublicKey",
                      "destination: PublicKey",
                      "amount: number",
                      "connection: Connection",
                      "}): Promise<{",
                      "transaction: VersionedTransaction",
                      "latestBlockhash: { blockhash: string; lastValidBlockHeight: number }",
                      "}> {",
                      "// Get the latest blockhash to use in our transaction",
                      "const latestBlockhash = await connection.getLatestBlockhash()",
                      "// Create instructions to send, in this case a simple transfer",
                      "const instructions = [",
                      "SystemProgram.transfer({",
                      "fromPubkey: publicKey,",
                      "toPubkey: destination,",
                      "lamports: amount * LAMPORTS_PER_SOL,",
                      "}),",
                      "]",
                      "// Create a new TransactionMessage with version and compile it to legacy",
                      "const messageLegacy = new TransactionMessage({",
                      "payerKey: publicKey,",
                      "recentBlockhash: latestBlockhash.blockhash,",
                      "instructions,",
                      "}).compileToLegacyMessage()",
                      "// Create a new VersionedTransaction which supports legacy and v0",
                      "const transaction = new VersionedTransaction(messageLegacy)",
                      "return {",
                      "transaction,",
                      "latestBlockhash,",
                      "}",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/account/account-data-access.tsx",
                  },
                  "account-detail-feature.tsx": {
                    "content": [
                      "import { PublicKey } from '@solana/web3.js'",
                      "import { useMemo } from 'react'",
                      "import { useParams } from 'react-router-dom'",
                      "import { ExplorerLink } from '../cluster/cluster-ui'",
                      "import { AppHero, ellipsify } from '../ui/ui-layout'",
                      "import { AccountBalance, AccountButtons, AccountTokens, AccountTransactions } from './account-ui'",
                      "export default function AccountDetailFeature() {",
                      "const params = useParams()",
                      "const address = useMemo(() => {",
                      "if (!params.address) {",
                      "return",
                      "}",
                      "try {",
                      "return new PublicKey(params.address)",
                      "} catch (e) {",
                      "console.log(\`Invalid public key\`, e)",
                      "}",
                      "}, [params])",
                      "if (!address) {",
                      "return <div>Error loading account</div>",
                      "}",
                      "return (",
                      "<div>",
                      "<AppHero",
                      "title={<AccountBalance address={address} />}",
                      "subtitle={",
                      "<div className="my-4">",
                      "<ExplorerLink path={\`account/\${address}\`} label={ellipsify(address.toString())} />",
                      "</div>",
                      "}",
                      ">",
                      "<div className="my-4">",
                      "<AccountButtons address={address} />",
                      "</div>",
                      "</AppHero>",
                      "<div className="space-y-8">",
                      "<AccountTokens address={address} />",
                      "<AccountTransactions address={address} />",
                      "</div>",
                      "</div>",
                      ")",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/account/account-detail-feature.tsx",
                  },
                  "account-list-feature.tsx": {
                    "content": [
                      "import { useWallet } from '@solana/wallet-adapter-react'",
                      "import { WalletButton } from '../solana/solana-provider'",
                      "import { Navigate } from 'react-router-dom'",
                      "export default function AccountListFeature() {",
                      "const { publicKey } = useWallet()",
                      "if (publicKey) {",
                      "return <Navigate to={publicKey.toString()} replace />",
                      "}",
                      "return (",
                      "<div className="hero py-[64px]">",
                      "<div className="hero-content text-center"><WalletButton /></div>",
                      "</div>",
                      ")",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/account/account-list-feature.tsx",
                  },
                  "account-ui.tsx": {
                    "content": [
                      "import { useWallet } from '@solana/wallet-adapter-react'",
                      "import { LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js'",
                      "import { IconRefresh } from '@tabler/icons-react'",
                      "import { useQueryClient } from '@tanstack/react-query'",
                      "import { useMemo, useState } from 'react'",
                      "import { AppModal, ellipsify } from '../ui/ui-layout'",
                      "import { useCluster } from '../cluster/cluster-data-access'",
                      "import { ExplorerLink } from '../cluster/cluster-ui'",
                      "import {",
                      "useGetBalance,",
                      "useGetSignatures,",
                      "useGetTokenAccounts,",
                      "useRequestAirdrop,",
                      "useTransferSol,",
                      "} from './account-data-access'",
                      "export function AccountBalance({ address }: { address: PublicKey }) {",
                      "const query = useGetBalance({ address })",
                      "return (",
                      "<div>",
                      "<h1 className="text-5xl font-bold cursor-pointer" onClick={() => query.refetch()}>",
                      "{query.data ? <BalanceSol balance={query.data} /> : '...'} SOL",
                      "</h1>",
                      "</div>",
                      ")",
                      "}",
                      "export function AccountChecker() {",
                      "const { publicKey } = useWallet()",
                      "if (!publicKey) {",
                      "return null",
                      "}",
                      "return <AccountBalanceCheck address={publicKey} />",
                      "}",
                      "export function AccountBalanceCheck({ address }: { address: PublicKey }) {",
                      "const { cluster } = useCluster()",
                      "const mutation = useRequestAirdrop({ address })",
                      "const query = useGetBalance({ address })",
                      "if (query.isLoading) {",
                      "return null",
                      "}",
                      "if (query.isError || !query.data) {",
                      "return (",
                      "<div className="alert alert-warning text-warning-content/80 rounded-none flex justify-center">",
                      "<span>",
                      "You are connected to <strong>{cluster.name}</strong> but your account is not found on this cluster.",
                      "</span>",
                      "<button",
                      "className="btn btn-xs btn-neutral"",
                      "onClick={() => mutation.mutateAsync(1).catch((err) => console.log(err))}",
                      ">",
                      "Request Airdrop",
                      "</button>",
                      "</div>",
                      ")",
                      "}",
                      "return null",
                      "}",
                      "export function AccountButtons({ address }: { address: PublicKey }) {",
                      "const wallet = useWallet()",
                      "const { cluster } = useCluster()",
                      "const [showAirdropModal, setShowAirdropModal] = useState(false)",
                      "const [showReceiveModal, setShowReceiveModal] = useState(false)",
                      "const [showSendModal, setShowSendModal] = useState(false)",
                      "return (",
                      "<div>",
                      "<ModalAirdrop hide={() => setShowAirdropModal(false)} address={address} show={showAirdropModal} />",
                      "<ModalReceive address={address} show={showReceiveModal} hide={() => setShowReceiveModal(false)} />",
                      "<ModalSend address={address} show={showSendModal} hide={() => setShowSendModal(false)} />",
                      "<div className="space-x-2">",
                      "<button",
                      "disabled={cluster.network?.includes('mainnet')}",
                      "className="btn btn-xs lg:btn-md btn-outline"",
                      "onClick={() => setShowAirdropModal(true)}",
                      ">",
                      "Airdrop",
                      "</button>",
                      "<button",
                      "disabled={wallet.publicKey?.toString() !== address.toString()}",
                      "className="btn btn-xs lg:btn-md btn-outline"",
                      "onClick={() => setShowSendModal(true)}",
                      ">",
                      "Send",
                      "</button>",
                      "<button className="btn btn-xs lg:btn-md btn-outline" onClick={() => setShowReceiveModal(true)}>",
                      "Receive",
                      "</button>",
                      "</div>",
                      "</div>",
                      ")",
                      "}",
                      "export function AccountTokens({ address }: { address: PublicKey }) {",
                      "const [showAll, setShowAll] = useState(false)",
                      "const query = useGetTokenAccounts({ address })",
                      "const client = useQueryClient()",
                      "const items = useMemo(() => {",
                      "if (showAll) return query.data",
                      "return query.data?.slice(0, 5)",
                      "}, [query.data, showAll])",
                      "return (",
                      "<div className="space-y-2">",
                      "<div className="justify-between">",
                      "<div className="flex justify-between">",
                      "<h2 className="text-2xl font-bold">Token Accounts</h2>",
                      "<div className="space-x-2">",
                      "{query.isLoading ? (",
                      "<span className="loading loading-spinner"></span>",
                      ") : (",
                      "<button",
                      "className="btn btn-sm btn-outline"",
                      "onClick={async () => {",
                      "await query.refetch()",
                      "await client.invalidateQueries({",
                      "queryKey: ['getTokenAccountBalance'],",
                      "})",
                      "}}",
                      ">",
                      "<IconRefresh size={16} />",
                      "</button>",
                      ")}",
                      "</div>",
                      "</div>",
                      "</div>",
                      "{query.isError && <pre className="alert alert-error">Error: {query.error?.message.toString()}</pre>}",
                      "{query.isSuccess && (",
                      "<div>",
                      "{query.data.length === 0 ? (",
                      "<div>No token accounts found.</div>",
                      ") : (",
                      "<table className="table border-4 rounded-lg border-separate border-base-300">",
                      "<thead>",
                      "<tr>",
                      "<th>Public Key</th>",
                      "<th>Mint</th>",
                      "<th className="text-right">Balance</th>",
                      "</tr>",
                      "</thead>",
                      "<tbody>",
                      "{items?.map(({ account, pubkey }) => (",
                      "<tr key={pubkey.toString()}>",
                      "<td>",
                      "<div className="flex space-x-2">",
                      "<span className="font-mono">",
                      "<ExplorerLink label={ellipsify(pubkey.toString())} path={\`account/\${pubkey.toString()}\`} />",
                      "</span>",
                      "</div>",
                      "</td>",
                      "<td>",
                      "<div className="flex space-x-2">",
                      "<span className="font-mono">",
                      "<ExplorerLink",
                      "label={ellipsify(account.data.parsed.info.mint)}",
                      "path={\`account/\${account.data.parsed.info.mint.toString()}\`}",
                      "/>",
                      "</span>",
                      "</div>",
                      "</td>",
                      "<td className="text-right">",
                      "<span className="font-mono">",
                      "{account.data.parsed.info.tokenAmount.uiAmount}",
                      "</span>",
                      "</td>",
                      "</tr>",
                      "))}",
                      "{(query.data?.length ?? 0) > 5 && (",
                      "<tr>",
                      "<td colSpan={4} className="text-center">",
                      "<button className="btn btn-xs btn-outline" onClick={() => setShowAll(!showAll)}>",
                      "{showAll ? 'Show Less' : 'Show All'}",
                      "</button>",
                      "</td>",
                      "</tr>",
                      ")}",
                      "</tbody>",
                      "</table>",
                      ")}",
                      "</div>",
                      ")}",
                      "</div>",
                      ")",
                      "}",
                      "export function AccountTransactions({ address }: { address: PublicKey }) {",
                      "const query = useGetSignatures({ address })",
                      "const [showAll, setShowAll] = useState(false)",
                      "const items = useMemo(() => {",
                      "if (showAll) return query.data",
                      "return query.data?.slice(0, 5)",
                      "}, [query.data, showAll])",
                      "return (",
                      "<div className="space-y-2">",
                      "<div className="flex justify-between">",
                      "<h2 className="text-2xl font-bold">Transaction History</h2>",
                      "<div className="space-x-2">",
                      "{query.isLoading ? (",
                      "<span className="loading loading-spinner"></span>",
                      ") : (",
                      "<button className="btn btn-sm btn-outline" onClick={() => query.refetch()}>",
                      "<IconRefresh size={16} />",
                      "</button>",
                      ")}",
                      "</div>",
                      "</div>",
                      "{query.isError && <pre className="alert alert-error">Error: {query.error?.message.toString()}</pre>}",
                      "{query.isSuccess && (",
                      "<div>",
                      "{query.data.length === 0 ? (",
                      "<div>No transactions found.</div>",
                      ") : (",
                      "<table className="table border-4 rounded-lg border-separate border-base-300">",
                      "<thead>",
                      "<tr>",
                      "<th>Signature</th>",
                      "<th className="text-right">Slot</th>",
                      "<th>Block Time</th>",
                      "<th className="text-right">Status</th>",
                      "</tr>",
                      "</thead>",
                      "<tbody>",
                      "{items?.map((item) => (",
                      "<tr key={item.signature}>",
                      "<th className="font-mono">",
                      "<ExplorerLink path={\`tx/\${item.signature}\`} label={ellipsify(item.signature, 8)} />",
                      "</th>",
                      "<td className="font-mono text-right">",
                      "<ExplorerLink path={\`block/\${item.slot}\`} label={item.slot.toString()} />",
                      "</td>",
                      "<td>{new Date((item.blockTime ?? 0) * 1000).toISOString()}</td>",
                      "<td className="text-right">",
                      "{item.err ? (",
                      "<div className="badge badge-error" title={JSON.stringify(item.err)}>",
                      "Failed",
                      "</div>",
                      ") : (",
                      "<div className="badge badge-success">Success</div>",
                      ")}",
                      "</td>",
                      "</tr>",
                      "))}",
                      "{(query.data?.length ?? 0) > 5 && (",
                      "<tr>",
                      "<td colSpan={4} className="text-center">",
                      "<button className="btn btn-xs btn-outline" onClick={() => setShowAll(!showAll)}>",
                      "{showAll ? 'Show Less' : 'Show All'}",
                      "</button>",
                      "</td>",
                      "</tr>",
                      ")}",
                      "</tbody>",
                      "</table>",
                      ")}",
                      "</div>",
                      ")}",
                      "</div>",
                      ")",
                      "}",
                      "function BalanceSol({ balance }: { balance: number }) {",
                      "return <span>{Math.round((balance / LAMPORTS_PER_SOL) * 100000) / 100000}</span>",
                      "}",
                      "function ModalReceive({ hide, show, address }: { hide: () => void; show: boolean; address: PublicKey }) {",
                      "return (",
                      "<AppModal title="Receive" hide={hide} show={show}>",
                      "<p>Receive assets by sending them to your public key:</p>",
                      "<code>{address.toString()}</code>",
                      "</AppModal>",
                      ")",
                      "}",
                      "function ModalAirdrop({ hide, show, address }: { hide: () => void; show: boolean; address: PublicKey }) {",
                      "const mutation = useRequestAirdrop({ address })",
                      "const [amount, setAmount] = useState('2')",
                      "return (",
                      "<AppModal",
                      "hide={hide}",
                      "show={show}",
                      "title="Airdrop"",
                      "submitDisabled={!amount || mutation.isPending}",
                      "submitLabel="Request Airdrop"",
                      "submit={() => mutation.mutateAsync(parseFloat(amount)).then(() => hide())}",
                      ">",
                      "<input",
                      "disabled={mutation.isPending}",
                      "type="number"",
                      "step="any"",
                      "min="1"",
                      "placeholder="Amount"",
                      "className="input input-bordered w-full"",
                      "value={amount}",
                      "onChange={(e) => setAmount(e.target.value)}",
                      "/>",
                      "</AppModal>",
                      ")",
                      "}",
                      "function ModalSend({ hide, show, address }: { hide: () => void; show: boolean; address: PublicKey }) {",
                      "const wallet = useWallet()",
                      "const mutation = useTransferSol({ address })",
                      "const [destination, setDestination] = useState('')",
                      "const [amount, setAmount] = useState('1')",
                      "if (!address || !wallet.sendTransaction) {",
                      "return <div>Wallet not connected</div>",
                      "}",
                      "return (",
                      "<AppModal",
                      "hide={hide}",
                      "show={show}",
                      "title="Send"",
                      "submitDisabled={!destination || !amount || mutation.isPending}",
                      "submitLabel="Send"",
                      "submit={() => {",
                      "mutation",
                      ".mutateAsync({",
                      "destination: new PublicKey(destination),",
                      "amount: parseFloat(amount),",
                      "})",
                      ".then(() => hide())",
                      "}}",
                      ">",
                      "<input",
                      "disabled={mutation.isPending}",
                      "type="text"",
                      "placeholder="Destination"",
                      "className="input input-bordered w-full"",
                      "value={destination}",
                      "onChange={(e) => setDestination(e.target.value)}",
                      "/>",
                      "<input",
                      "disabled={mutation.isPending}",
                      "type="number"",
                      "step="any"",
                      "min="1"",
                      "placeholder="Amount"",
                      "className="input input-bordered w-full"",
                      "value={amount}",
                      "onChange={(e) => setAmount(e.target.value)}",
                      "/>",
                      "</AppModal>",
                      ")",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/account/account-ui.tsx",
                  },
                },
                "path": "./web-app/src/app/account",
              },
              "app-routes.tsx": {
                "content": [
                  "import { lazy } from 'react'",
                  "import { Navigate, RouteObject, useRoutes } from 'react-router-dom'",
                  "import { UiLayout } from './ui/ui-layout'",
                  "const AccountListFeature = lazy(() => import('./account/account-list-feature'))",
                  "const AccountDetailFeature = lazy(() => import('./account/account-detail-feature'))",
                  "const ClusterFeature = lazy(() => import('./cluster/cluster-feature'))",
                  "const DashboardFeature = lazy(() => import('./dashboard/dashboard-feature'))",
                  "const CounterFeature = lazy(() => import('./counter/counter-feature'))",
                  "const MyAnchorBasicProgramFeature = lazy(() => import('./my-anchor-basic-program/my-anchor-basic-program-feature'))",
                  "const links: { label: string, path: string }[] = [",
                  "{ label: 'Account', path: '/account' },",
                  "{ label: 'Clusters', path: '/clusters' },",
                  "{ label: 'Counter Program', path: '/counter' },",
                  "{ label: 'MyAnchorBasicProgram Program', path: '/my-anchor-basic-program' },",
                  "]",
                  "const routes: RouteObject[] = [",
                  "{ path: '/account/', element: <AccountListFeature /> },",
                  "{ path: '/account/:address', element: <AccountDetailFeature /> },",
                  "{ path: '/clusters', element: <ClusterFeature /> },",
                  "{ path: 'counter/*', element: <CounterFeature /> },",
                  "{ path: 'my-anchor-basic-program/*', element: <MyAnchorBasicProgramFeature /> },",
                  "]",
                  "export function AppRoutes() {",
                  "return (",
                  "<UiLayout links={links}>",
                  "{useRoutes([",
                  "{ index: true, element: <Navigate to={'/dashboard'} replace={true} /> },",
                  "{ path: '/dashboard', element: <DashboardFeature /> },",
                  "...routes,",
                  "{ path: '*', element: <Navigate to={'/dashboard'} replace={true} /> },",
                  "])}",
                  "</UiLayout>",
                  ")",
                  "}",
                ],
                "isBinary": false,
                "path": "./web-app/src/app/app-routes.tsx",
              },
              "app.tsx": {
                "content": [
                  "import { AppRoutes } from './app-routes'",
                  "import { ClusterProvider } from './cluster/cluster-data-access'",
                  "import { SolanaProvider } from './solana/solana-provider'",
                  "import { QueryClient, QueryClientProvider } from '@tanstack/react-query'",
                  "const client = new QueryClient()",
                  "export function App() {",
                  "return (",
                  "<QueryClientProvider client={client}>",
                  "<ClusterProvider>",
                  "<SolanaProvider>",
                  "<AppRoutes />",
                  "</SolanaProvider>",
                  "</ClusterProvider>",
                  "</QueryClientProvider>",
                  ")",
                  "}",
                ],
                "isBinary": false,
                "path": "./web-app/src/app/app.tsx",
              },
              "cluster": {
                "children": {
                  "cluster-data-access.tsx": {
                    "content": [
                      "import { clusterApiUrl, Connection } from '@solana/web3.js'",
                      "import { atom, useAtomValue, useSetAtom } from 'jotai'",
                      "import { atomWithStorage } from 'jotai/utils'",
                      "import { createContext, ReactNode, useContext } from 'react'",
                      "import toast from 'react-hot-toast';",
                      "export interface Cluster {",
                      "name: string",
                      "endpoint: string",
                      "network?: ClusterNetwork",
                      "active?: boolean",
                      "}",
                      "export enum ClusterNetwork {",
                      "Mainnet = 'mainnet-beta',",
                      "Testnet = 'testnet',",
                      "Devnet = 'devnet',",
                      "Custom = 'custom',",
                      "}",
                      "// By default, we don't configure the mainnet-beta cluster",
                      "// The endpoint provided by clusterApiUrl('mainnet-beta') does not allow access from the browser due to CORS restrictions",
                      "// To use the mainnet-beta cluster, provide a custom endpoint",
                      "export const defaultClusters: Cluster[] = [",
                      "{",
                      "name: 'devnet',",
                      "endpoint: clusterApiUrl('devnet'),",
                      "network: ClusterNetwork.Devnet,",
                      "},",
                      "{ name: 'local', endpoint: 'http://localhost:8899' },",
                      "{",
                      "name: 'testnet',",
                      "endpoint: clusterApiUrl('testnet'),",
                      "network: ClusterNetwork.Testnet,",
                      "},",
                      "]",
                      "const clusterAtom = atomWithStorage<Cluster>('solana-cluster', defaultClusters[0])",
                      "const clustersAtom = atomWithStorage<Cluster[]>('solana-clusters', defaultClusters)",
                      "const activeClustersAtom = atom<Cluster[]>((get) => {",
                      "const clusters = get(clustersAtom)",
                      "const cluster = get(clusterAtom)",
                      "return clusters.map((item) => ({",
                      "...item,",
                      "active: item.name === cluster.name,",
                      "}))",
                      "})",
                      "const activeClusterAtom = atom<Cluster>((get) => {",
                      "const clusters = get(activeClustersAtom)",
                      "return clusters.find((item) => item.active) || clusters[0]",
                      "})",
                      "export interface ClusterProviderContext {",
                      "cluster: Cluster",
                      "clusters: Cluster[]",
                      "addCluster: (cluster: Cluster) => void",
                      "deleteCluster: (cluster: Cluster) => void",
                      "setCluster: (cluster: Cluster) => void",
                      "getExplorerUrl(path: string): string",
                      "}",
                      "const Context = createContext<ClusterProviderContext>({} as ClusterProviderContext)",
                      "export function ClusterProvider({ children }: { children: ReactNode }) {",
                      "const cluster = useAtomValue(activeClusterAtom)",
                      "const clusters = useAtomValue(activeClustersAtom)",
                      "const setCluster = useSetAtom(clusterAtom)",
                      "const setClusters = useSetAtom(clustersAtom)",
                      "const value: ClusterProviderContext = {",
                      "cluster,",
                      "clusters: clusters.sort((a, b) => (a.name > b.name ? 1 : -1)),",
                      "addCluster: (cluster: Cluster) => {",
                      "try {",
                      "new Connection(cluster.endpoint);",
                      "setClusters([...clusters, cluster]);",
                      "} catch (err) {",
                      "toast.error(\`\${err}\`);",
                      "}",
                      "},",
                      "deleteCluster: (cluster: Cluster) => {",
                      "setClusters(clusters.filter((item) => item.name !== cluster.name))",
                      "},",
                      "setCluster: (cluster: Cluster) => setCluster(cluster),",
                      "getExplorerUrl: (path: string) => \`https://explorer.solana.com/\${path}\${getClusterUrlParam(cluster)}\`,",
                      "}",
                      "return <Context.Provider value={value}>{children}</Context.Provider>",
                      "}",
                      "export function useCluster() {",
                      "return useContext(Context)",
                      "}",
                      "function getClusterUrlParam(cluster: Cluster): string {",
                      "let suffix = ''",
                      "switch (cluster.network) {",
                      "case ClusterNetwork.Devnet:",
                      "suffix = 'devnet'",
                      "break",
                      "case ClusterNetwork.Mainnet:",
                      "suffix = ''",
                      "break",
                      "case ClusterNetwork.Testnet:",
                      "suffix = 'testnet'",
                      "break",
                      "default:",
                      "suffix = \`custom&customUrl=\${encodeURIComponent(cluster.endpoint)}\`",
                      "break",
                      "}",
                      "return suffix.length ? \`?cluster=\${suffix}\` : ''",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/cluster/cluster-data-access.tsx",
                  },
                  "cluster-feature.tsx": {
                    "content": [
                      "import { useState } from 'react'",
                      "import { AppHero } from '../ui/ui-layout'",
                      "import { ClusterUiModal } from './cluster-ui'",
                      "import { ClusterUiTable } from './cluster-ui'",
                      "export default function ClusterFeature() {",
                      "const [showModal, setShowModal] = useState(false)",
                      "return (",
                      "<div>",
                      "<AppHero title="Clusters" subtitle="Manage and select your Solana clusters">",
                      "<ClusterUiModal show={showModal} hideModal={() => setShowModal(false)} />",
                      "<button className="btn btn-xs lg:btn-md btn-primary" onClick={() => setShowModal(true)}>",
                      "Add Cluster",
                      "</button>",
                      "</AppHero>",
                      "<ClusterUiTable />",
                      "</div>",
                      ")",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/cluster/cluster-feature.tsx",
                  },
                  "cluster-ui.tsx": {
                    "content": [
                      "import { useConnection } from '@solana/wallet-adapter-react'",
                      "import { IconTrash } from '@tabler/icons-react'",
                      "import { useQuery } from '@tanstack/react-query'",
                      "import { ReactNode, useState } from 'react'",
                      "import { AppModal } from '../ui/ui-layout'",
                      "import { ClusterNetwork, useCluster } from './cluster-data-access'",
                      "import { Connection } from '@solana/web3.js'",
                      "export function ExplorerLink({ path, label, className }: { path: string; label: string; className?: string }) {",
                      "const { getExplorerUrl } = useCluster()",
                      "return (",
                      "<a",
                      "href={getExplorerUrl(path)}",
                      "target="_blank"",
                      "rel="noopener noreferrer"",
                      "className={className ? className : \`link font-mono\`}",
                      ">",
                      "{label}",
                      "</a>",
                      ")",
                      "}",
                      "export function ClusterChecker({ children }: { children: ReactNode }) {",
                      "const { cluster } = useCluster()",
                      "const { connection } = useConnection()",
                      "const query = useQuery({",
                      "queryKey: ['version', { cluster, endpoint: connection.rpcEndpoint }],",
                      "queryFn: () => connection.getVersion(),",
                      "retry: 1,",
                      "})",
                      "if (query.isLoading) {",
                      "return null",
                      "}",
                      "if (query.isError || !query.data) {",
                      "return (",
                      "<div className="alert alert-warning text-warning-content/80 rounded-none flex justify-center">",
                      "<span>",
                      "Error connecting to cluster <strong>{cluster.name}</strong>",
                      "</span>",
                      "<button className="btn btn-xs btn-neutral" onClick={() => query.refetch()}>",
                      "Refresh",
                      "</button>",
                      "</div>",
                      ")",
                      "}",
                      "return children",
                      "}",
                      "export function ClusterUiSelect() {",
                      "const { clusters, setCluster, cluster } = useCluster()",
                      "return (",
                      "<div className="dropdown dropdown-end">",
                      "<label tabIndex={0} className="btn btn-primary rounded-btn">",
                      "{cluster.name}",
                      "</label>",
                      "<ul tabIndex={0} className="menu dropdown-content z-[1] p-2 shadow bg-base-100 rounded-box w-52 mt-4">",
                      "{clusters.map((item) => (",
                      "<li key={item.name}>",
                      "<button",
                      "className={\`btn btn-sm \${item.active ? 'btn-primary' : 'btn-ghost'}\`}",
                      "onClick={() => setCluster(item)}",
                      ">",
                      "{item.name}",
                      "</button>",
                      "</li>",
                      "))}",
                      "</ul>",
                      "</div>",
                      ")",
                      "}",
                      "export function ClusterUiModal({ hideModal, show }: { hideModal: () => void; show: boolean }) {",
                      "const { addCluster } = useCluster()",
                      "const [name, setName] = useState('')",
                      "const [network, setNetwork] = useState<ClusterNetwork | undefined>()",
                      "const [endpoint, setEndpoint] = useState('')",
                      "return (",
                      "<AppModal",
                      "title={'Add Cluster'}",
                      "hide={hideModal}",
                      "show={show}",
                      "submit={() => {",
                      "try {",
                      "new Connection(endpoint);",
                      "if (name) {",
                      "addCluster({ name, network, endpoint });",
                      "hideModal();",
                      "}",
                      "else {",
                      "console.log("Invalid cluster name");",
                      "}",
                      "}",
                      "catch {",
                      "console.log("Invalid cluster endpoint");",
                      "}",
                      "}}",
                      "submitLabel="Save"",
                      ">",
                      "<input",
                      "type="text"",
                      "placeholder="Name"",
                      "className="input input-bordered w-full"",
                      "value={name}",
                      "onChange={(e) => setName(e.target.value)}",
                      "/>",
                      "<input",
                      "type="text"",
                      "placeholder="Endpoint"",
                      "className="input input-bordered w-full"",
                      "value={endpoint}",
                      "onChange={(e) => setEndpoint(e.target.value)}",
                      "/>",
                      "<select",
                      "className="select select-bordered w-full"",
                      "value={network}",
                      "onChange={(e) => setNetwork(e.target.value as ClusterNetwork)}",
                      ">",
                      "<option value={undefined}>Select a network</option>",
                      "<option value={ClusterNetwork.Devnet}>Devnet</option>",
                      "<option value={ClusterNetwork.Testnet}>Testnet</option>",
                      "<option value={ClusterNetwork.Mainnet}>Mainnet</option>",
                      "</select>",
                      "</AppModal>",
                      ")",
                      "}",
                      "export function ClusterUiTable() {",
                      "const { clusters, setCluster, deleteCluster } = useCluster()",
                      "return (",
                      "<div className="overflow-x-auto">",
                      "<table className="table border-4 border-separate border-base-300">",
                      "<thead>",
                      "<tr>",
                      "<th>Name/ Network / Endpoint</th>",
                      "<th className="text-center">Actions</th>",
                      "</tr>",
                      "</thead>",
                      "<tbody>",
                      "{clusters.map((item) => (",
                      "<tr key={item.name} className={item?.active ? 'bg-base-200' : ''}>",
                      "<td className="space-y-2">",
                      "<div className="whitespace-nowrap space-x-2">",
                      "<span className="text-xl">",
                      "{item?.active ? (",
                      "item.name",
                      ") : (",
                      "<button title="Select cluster" className="link link-secondary" onClick={() => setCluster(item)}>",
                      "{item.name}",
                      "</button>",
                      ")}",
                      "</span>",
                      "</div>",
                      "<span className="text-xs">Network: {item.network ?? 'custom'}</span>",
                      "<div className="whitespace-nowrap text-gray-500 text-xs">{item.endpoint}</div>",
                      "</td>",
                      "<td className="space-x-2 whitespace-nowrap text-center">",
                      "<button",
                      "disabled={item?.active}",
                      "className="btn btn-xs btn-default btn-outline"",
                      "onClick={() => {",
                      "if (!window.confirm('Are you sure?')) return",
                      "deleteCluster(item)",
                      "}}",
                      ">",
                      "<IconTrash size={16} />",
                      "</button>",
                      "</td>",
                      "</tr>",
                      "))}",
                      "</tbody>",
                      "</table>",
                      "</div>",
                      ")",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/cluster/cluster-ui.tsx",
                  },
                },
                "path": "./web-app/src/app/cluster",
              },
              "counter": {
                "children": {
                  "counter-data-access.tsx": {
                    "content": [
                      "import { getCounterProgram, getCounterProgramId } from '@proj/anchor'",
                      "import { Program } from '@coral-xyz/anchor';",
                      "import { useConnection } from '@solana/wallet-adapter-react';",
                      "import { Cluster, Keypair, PublicKey } from '@solana/web3.js';",
                      "import { useMutation, useQuery } from '@tanstack/react-query';",
                      "import { useMemo } from 'react';",
                      "import toast from 'react-hot-toast';",
                      "import { useCluster } from '../cluster/cluster-data-access'",
                      "import { useAnchorProvider } from '../solana/solana-provider'",
                      "import { useTransactionToast } from '../ui/ui-layout'",
                      "export function useCounterProgram() {",
                      "const { connection } = useConnection()",
                      "const { cluster } = useCluster()",
                      "const transactionToast = useTransactionToast()",
                      "const provider = useAnchorProvider()",
                      "const programId = useMemo(",
                      "() => getCounterProgramId(cluster.network as Cluster),",
                      "[cluster]",
                      ");",
                      "const program = getCounterProgram(provider)",
                      "const accounts = useQuery({",
                      "queryKey: ['counter', 'all', { cluster }],",
                      "queryFn: () => program.account.counter.all(),",
                      "})",
                      "const getProgramAccount = useQuery({",
                      "queryKey: ['get-program-account', { cluster }],",
                      "queryFn: () => connection.getParsedAccountInfo(programId),",
                      "})",
                      "const initialize = useMutation({",
                      "mutationKey: ['counter', 'initialize', { cluster }],",
                      "mutationFn: (keypair: Keypair) =>",
                      "program.methods.initialize().accounts({ counter: keypair.publicKey }).signers([keypair]).rpc(),",
                      "onSuccess: (signature) => {",
                      "transactionToast(signature)",
                      "return accounts.refetch()",
                      "},",
                      "onError: () => toast.error('Failed to initialize account'),",
                      "})",
                      "return {",
                      "program,",
                      "programId,",
                      "accounts,",
                      "getProgramAccount,",
                      "initialize,",
                      "}",
                      "}",
                      "export function useCounterProgramAccount({ account }: { account: PublicKey }) {",
                      "const { cluster } = useCluster()",
                      "const transactionToast = useTransactionToast()",
                      "const { program, accounts } = useCounterProgram()",
                      "const accountQuery = useQuery({",
                      "queryKey: ['counter', 'fetch', { cluster, account }],",
                      "queryFn: () => program.account.counter.fetch(account),",
                      "})",
                      "const closeMutation = useMutation({",
                      "mutationKey: ['counter', 'close', { cluster, account }],",
                      "mutationFn: () => program.methods.close().accounts({ counter: account }).rpc(),",
                      "onSuccess: (tx) => {",
                      "transactionToast(tx)",
                      "return accounts.refetch()",
                      "},",
                      "})",
                      "const decrementMutation = useMutation({",
                      "mutationKey: ['counter', 'decrement', { cluster, account }],",
                      "mutationFn: () => program.methods.decrement().accounts({ counter: account }).rpc(),",
                      "onSuccess: (tx) => {",
                      "transactionToast(tx)",
                      "return accountQuery.refetch()",
                      "},",
                      "})",
                      "const incrementMutation = useMutation({",
                      "mutationKey: ['counter', 'increment', { cluster, account }],",
                      "mutationFn: () => program.methods.increment().accounts({ counter: account }).rpc(),",
                      "onSuccess: (tx) => {",
                      "transactionToast(tx)",
                      "return accountQuery.refetch()",
                      "},",
                      "})",
                      "const setMutation = useMutation({",
                      "mutationKey: ['counter', 'set', { cluster, account }],",
                      "mutationFn: (value: number) => program.methods.set(value).accounts({ counter: account }).rpc(),",
                      "onSuccess: (tx) => {",
                      "transactionToast(tx)",
                      "return accountQuery.refetch()",
                      "},",
                      "})",
                      "return {",
                      "accountQuery,",
                      "closeMutation,",
                      "decrementMutation,",
                      "incrementMutation,",
                      "setMutation,",
                      "}",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/counter/counter-data-access.tsx",
                  },
                  "counter-feature.tsx": {
                    "content": [
                      "import { useWallet } from '@solana/wallet-adapter-react';",
                      "import { WalletButton } from '../solana/solana-provider';",
                      "import { AppHero, ellipsify } from '../ui/ui-layout';",
                      "import { ExplorerLink } from '../cluster/cluster-ui';",
                      "import { useCounterProgram } from './counter-data-access';",
                      "import { CounterCreate, CounterList } from './counter-ui';",
                      "export default function CounterFeature() {",
                      "const { publicKey } = useWallet()",
                      "const { programId } = useCounterProgram();",
                      "return publicKey ? (",
                      "<div>",
                      "<AppHero",
                      "title="Counter"",
                      "subtitle={",
                      "'Create a new account by clicking the "Create" button. The state of a account is stored on-chain and can be manipulated by calling the program\\'s methods (increment, decrement, set, and close).'",
                      "}",
                      ">",
                      "<p className="mb-6">",
                      "<ExplorerLink path={\`account/\${programId}\`} label={ellipsify(programId.toString())} />",
                      "</p>",
                      "<CounterCreate />",
                      "</AppHero>",
                      "<CounterList />",
                      "</div>",
                      ") : (",
                      "<div className="max-w-4xl mx-auto">",
                      "<div className="hero py-[64px]">",
                      "<div className="hero-content text-center"><WalletButton /></div>",
                      "</div>",
                      "</div>",
                      ")",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/counter/counter-feature.tsx",
                  },
                  "counter-ui.tsx": {
                    "content": [
                      "import { Keypair, PublicKey } from '@solana/web3.js'",
                      "import { useMemo } from 'react'",
                      "import { ellipsify } from '../ui/ui-layout'",
                      "import { ExplorerLink } from '../cluster/cluster-ui'",
                      "import { useCounterProgram, useCounterProgramAccount } from './counter-data-access'",
                      "export function CounterCreate() {",
                      "const { initialize } = useCounterProgram()",
                      "return (",
                      "<button",
                      "className="btn btn-xs lg:btn-md btn-primary"",
                      "onClick={() => initialize.mutateAsync(Keypair.generate())}",
                      "disabled={initialize.isPending}",
                      ">",
                      "Create {initialize.isPending && '...'}",
                      "</button>",
                      ")",
                      "}",
                      "export function CounterList() {",
                      "const { accounts, getProgramAccount } = useCounterProgram()",
                      "if (getProgramAccount.isLoading) {",
                      "return <span className="loading loading-spinner loading-lg"></span>",
                      "}",
                      "if (!getProgramAccount.data?.value) {",
                      "return (",
                      "<div className="alert alert-info flex justify-center">",
                      "<span>Program account not found. Make sure you have deployed the program and are on the correct cluster.</span>",
                      "</div>",
                      ")",
                      "}",
                      "return (",
                      "<div className={'space-y-6'}>",
                      "{accounts.isLoading ? (",
                      "<span className="loading loading-spinner loading-lg"></span>",
                      ") : accounts.data?.length ? (",
                      "<div className="grid md:grid-cols-2 gap-4">",
                      "{accounts.data?.map((account) => (",
                      "<CounterCard key={account.publicKey.toString()} account={account.publicKey} />",
                      "))}",
                      "</div>",
                      ") : (",
                      "<div className="text-center">",
                      "<h2 className={'text-2xl'}>No accounts</h2>",
                      "No accounts found. Create one above to get started.",
                      "</div>",
                      ")}",
                      "</div>",
                      ")",
                      "}",
                      "function CounterCard({ account }: { account: PublicKey }) {",
                      "const {",
                      "accountQuery,",
                      "incrementMutation,",
                      "setMutation,",
                      "decrementMutation,",
                      "closeMutation,",
                      "} = useCounterProgramAccount({ account })",
                      "const count = useMemo(() => accountQuery.data?.count ?? 0, [accountQuery.data?.count])",
                      "return accountQuery.isLoading ? (",
                      "<span className="loading loading-spinner loading-lg"></span>",
                      ") : (",
                      "<div className="card card-bordered border-base-300 border-4 text-neutral-content">",
                      "<div className="card-body items-center text-center">",
                      "<div className="space-y-6">",
                      "<h2 className="card-title justify-center text-3xl cursor-pointer" onClick={() => accountQuery.refetch()}>",
                      "{count}",
                      "</h2>",
                      "<div className="card-actions justify-around">",
                      "<button",
                      "className="btn btn-xs lg:btn-md btn-outline"",
                      "onClick={() => incrementMutation.mutateAsync()}",
                      "disabled={incrementMutation.isPending}",
                      ">",
                      "Increment",
                      "</button>",
                      "<button",
                      "className="btn btn-xs lg:btn-md btn-outline"",
                      "onClick={() => {",
                      "const value = window.prompt('Set value to:', count.toString() ?? '0')",
                      "if (!value || parseInt(value) === count || isNaN(parseInt(value))) {",
                      "return",
                      "}",
                      "return setMutation.mutateAsync(parseInt(value))",
                      "}}",
                      "disabled={setMutation.isPending}",
                      ">",
                      "Set",
                      "</button>",
                      "<button",
                      "className="btn btn-xs lg:btn-md btn-outline"",
                      "onClick={() => decrementMutation.mutateAsync()}",
                      "disabled={decrementMutation.isPending}",
                      ">",
                      "Decrement",
                      "</button>",
                      "</div>",
                      "<div className="text-center space-y-4">",
                      "<p>",
                      "<ExplorerLink path={\`account/\${account}\`} label={ellipsify(account.toString())} />",
                      "</p>",
                      "<button",
                      "className="btn btn-xs btn-secondary btn-outline"",
                      "onClick={() => {",
                      "if (!window.confirm('Are you sure you want to close this account?')) {",
                      "return",
                      "}",
                      "return closeMutation.mutateAsync()",
                      "}}",
                      "disabled={closeMutation.isPending}",
                      ">",
                      "Close",
                      "</button>",
                      "</div>",
                      "</div>",
                      "</div>",
                      "</div>",
                      ")",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/counter/counter-ui.tsx",
                  },
                },
                "path": "./web-app/src/app/counter",
              },
              "dashboard": {
                "children": {
                  "dashboard-feature.tsx": {
                    "content": [
                      "import { AppHero } from '../ui/ui-layout'",
                      "const links: { label: string; href: string }[] = [",
                      "{ label: 'Solana Docs', href: 'https://docs.solana.com/' },",
                      "{ label: 'Solana Faucet', href: 'https://faucet.solana.com/' },",
                      "{ label: 'Solana Cookbook', href: 'https://solanacookbook.com/' },",
                      "{ label: 'Solana Stack Overflow', href: 'https://solana.stackexchange.com/' },",
                      "{ label: 'Solana Developers GitHub', href: 'https://github.com/solana-developers/' },",
                      "]",
                      "export default function DashboardFeature() {",
                      "return (",
                      "<div>",
                      "<AppHero title="gm" subtitle="Say hi to your new Solana dApp." />",
                      "<div className="max-w-xl mx-auto py-6 sm:px-6 lg:px-8 text-center">",
                      "<div className="space-y-2">",
                      "<p>Here are some helpful links to get you started.</p>",
                      "{links.map((link, index) => (",
                      "<div key={index}>",
                      "<a href={link.href} className="link" target="_blank" rel="noopener noreferrer">",
                      "{link.label}",
                      "</a>",
                      "</div>",
                      "))}",
                      "</div>",
                      "</div>",
                      "</div>",
                      ")",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/dashboard/dashboard-feature.tsx",
                  },
                },
                "path": "./web-app/src/app/dashboard",
              },
              "my-anchor-basic-program": {
                "children": {
                  "my-anchor-basic-program-data-access.tsx": {
                    "content": [
                      "import { programId, getMyAnchorBasicProgramProgram } from '@proj/anchor';",
                      "import { Program } from '@coral-xyz/anchor';",
                      "import { useConnection } from '@solana/wallet-adapter-react';",
                      "import { Keypair } from '@solana/web3.js';",
                      "import { useMutation, useQuery } from '@tanstack/react-query';",
                      "import toast from 'react-hot-toast';",
                      "import { useCluster } from '../cluster/cluster-data-access';",
                      "import { useAnchorProvider } from '../solana/solana-provider';",
                      "import { useTransactionToast } from '../ui/ui-layout';",
                      "export function useMyAnchorBasicProgramProgram() {",
                      "const { connection } = useConnection();",
                      "const { cluster } = useCluster();",
                      "const transactionToast = useTransactionToast();",
                      "const provider = useAnchorProvider();",
                      "const program = getMyAnchorBasicProgramProgram(provider);",
                      "const getProgramAccount = useQuery({",
                      "queryKey: ['get-program-account', { cluster }],",
                      "queryFn: () => connection.getParsedAccountInfo(programId),",
                      "});",
                      "const greet = useMutation({",
                      "mutationKey: ['myAnchorBasicProgram', 'greet', { cluster }],",
                      "mutationFn: (keypair: Keypair) => program.methods.greet().rpc(),",
                      "onSuccess: (signature) => {",
                      "transactionToast(signature);",
                      "},",
                      "onError: () => toast.error('Failed to run program'),",
                      "});",
                      "return {",
                      "program,",
                      "programId,",
                      "getProgramAccount,",
                      "greet,",
                      "};",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/my-anchor-basic-program/my-anchor-basic-program-data-access.tsx",
                  },
                  "my-anchor-basic-program-feature.tsx": {
                    "content": [
                      "import { useWallet } from '@solana/wallet-adapter-react';",
                      "import { ExplorerLink } from '../cluster/cluster-ui';",
                      "import { WalletButton } from '../solana/solana-provider';",
                      "import { AppHero, ellipsify } from '../ui/ui-layout';",
                      "import { useMyAnchorBasicProgramProgram } from './my-anchor-basic-program-data-access';",
                      "import { MyAnchorBasicProgramCreate, MyAnchorBasicProgramProgram } from './my-anchor-basic-program-ui';",
                      "export default function MyAnchorBasicProgramFeature() {",
                      "const { publicKey } = useWallet();",
                      "const { programId } = useMyAnchorBasicProgramProgram();",
                      "return publicKey ? (",
                      "<div>",
                      "<AppHero title="MyAnchorBasicProgram" subtitle={'Run the program by clicking the "Run program" button.'}>",
                      "<p className="mb-6">",
                      "<ExplorerLink path={\`account/\${programId}\`} label={ellipsify(programId.toString())} />",
                      "</p>",
                      "<MyAnchorBasicProgramCreate />",
                      "</AppHero>",
                      "<MyAnchorBasicProgramProgram />",
                      "</div>",
                      ") : (",
                      "<div className="max-w-4xl mx-auto">",
                      "<div className="hero py-[64px]">",
                      "<div className="hero-content text-center">",
                      "<WalletButton className="btn btn-primary" />",
                      "</div>",
                      "</div>",
                      "</div>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/my-anchor-basic-program/my-anchor-basic-program-feature.tsx",
                  },
                  "my-anchor-basic-program-ui.tsx": {
                    "content": [
                      "import { Keypair } from '@solana/web3.js';",
                      "import { useMyAnchorBasicProgramProgram } from './my-anchor-basic-program-data-access';",
                      "export function MyAnchorBasicProgramCreate() {",
                      "const { greet } = useMyAnchorBasicProgramProgram();",
                      "return (",
                      "<button",
                      "className="btn btn-xs lg:btn-md btn-primary"",
                      "onClick={() => greet.mutateAsync(Keypair.generate())}",
                      "disabled={greet.isPending}",
                      ">",
                      "Run program{greet.isPending && '...'}",
                      "</button>",
                      ");",
                      "}",
                      "export function MyAnchorBasicProgramProgram() {",
                      "const { getProgramAccount } = useMyAnchorBasicProgramProgram();",
                      "if (getProgramAccount.isLoading) {",
                      "return <span className="loading loading-spinner loading-lg"></span>;",
                      "}",
                      "if (!getProgramAccount.data?.value) {",
                      "return (",
                      "<div className="alert alert-info flex justify-center">",
                      "<span>",
                      "Program account not found. Make sure you have deployed the program and",
                      "are on the correct cluster.",
                      "</span>",
                      "</div>",
                      ");",
                      "}",
                      "return (",
                      "<div className={'space-y-6'}>",
                      "<pre>{JSON.stringify(getProgramAccount.data.value, null, 2)}</pre>",
                      "</div>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/my-anchor-basic-program/my-anchor-basic-program-ui.tsx",
                  },
                },
                "path": "./web-app/src/app/my-anchor-basic-program",
              },
              "solana": {
                "children": {
                  "solana-provider.tsx": {
                    "content": [
                      "import { AnchorProvider } from '@coral-xyz/anchor'",
                      "import { WalletError } from '@solana/wallet-adapter-base'",
                      "import {",
                      "AnchorWallet, useConnection, useWallet,",
                      "ConnectionProvider,",
                      "WalletProvider,",
                      "} from '@solana/wallet-adapter-react'",
                      "import { WalletModalProvider, WalletMultiButton } from '@solana/wallet-adapter-react-ui'",
                      "import { ReactNode, useCallback, useMemo } from 'react'",
                      "import { useCluster } from '../cluster/cluster-data-access'",
                      "require('@solana/wallet-adapter-react-ui/styles.css')",
                      "export const WalletButton = WalletMultiButton;",
                      "export function SolanaProvider({ children }: { children: ReactNode }) {",
                      "const { cluster } = useCluster()",
                      "const endpoint = useMemo(() => cluster.endpoint, [cluster])",
                      "const onError = useCallback((error: WalletError) => {",
                      "console.error(error)",
                      "}, [])",
                      "return (",
                      "<ConnectionProvider endpoint={endpoint}>",
                      "<WalletProvider wallets={[]} onError={onError} autoConnect={true}>",
                      "<WalletModalProvider>{children}</WalletModalProvider>",
                      "</WalletProvider>",
                      "</ConnectionProvider>",
                      ")",
                      "}",
                      "export function useAnchorProvider() {",
                      "const { connection } = useConnection()",
                      "const wallet = useWallet()",
                      "return new AnchorProvider(connection, wallet as AnchorWallet, { commitment: 'confirmed' })",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/solana/solana-provider.tsx",
                  },
                },
                "path": "./web-app/src/app/solana",
              },
              "ui": {
                "children": {
                  "ui-layout.tsx": {
                    "content": [
                      "import { WalletButton } from '../solana/solana-provider'",
                      "import * as React from 'react'",
                      "import { ReactNode, Suspense, useEffect, useRef } from 'react'",
                      "import { Link, useLocation } from 'react-router-dom'",
                      "import { AccountChecker } from '../account/account-ui'",
                      "import { ClusterChecker, ClusterUiSelect, ExplorerLink } from '../cluster/cluster-ui'",
                      "import toast, { Toaster } from 'react-hot-toast'",
                      "export function UiLayout({ children, links }: { children: ReactNode, links: { label: string, path: string }[] }) {",
                      "const { pathname } = useLocation()",
                      "return (",
                      "<div className="h-full flex flex-col">",
                      "<div className="navbar bg-base-300 text-neutral-content flex-col md:flex-row space-y-2 md:space-y-0">",
                      "<div className="flex-1">",
                      "<Link className="btn btn-ghost normal-case text-xl"",
                      "to="/"",
                      ">",
                      "<img className="h-4 md:h-6" alt="Logo"",
                      "src="/assets/logo.png"",
                      "/>",
                      "</Link>",
                      "<ul className="menu menu-horizontal px-1 space-x-2">",
                      "{links.map(({ label, path }) => (",
                      "<li key={path}>",
                      "<Link className={pathname.startsWith(path) ? 'active' : ''}",
                      "to={path}",
                      ">",
                      "{label}",
                      "</Link>",
                      "</li>",
                      "))}",
                      "</ul>",
                      "</div>",
                      "<div className="flex-none space-x-2">",
                      "<WalletButton />",
                      "<ClusterUiSelect />",
                      "</div>",
                      "</div>",
                      "<ClusterChecker>",
                      "<AccountChecker />",
                      "</ClusterChecker>",
                      "<div className="flex-grow mx-4 lg:mx-auto">",
                      "<Suspense",
                      "fallback={",
                      "<div className="text-center my-32">",
                      "<span className="loading loading-spinner loading-lg"></span>",
                      "</div>",
                      "}",
                      ">",
                      "{children}",
                      "</Suspense>",
                      "<Toaster position="bottom-right" />",
                      "</div>",
                      "<footer className="footer footer-center p-4 bg-base-300 text-base-content">",
                      "<aside>",
                      "<p>",
                      "Generated by{' '}",
                      "<a",
                      "className="link hover:text-white"",
                      "href="https://github.com/solana-developers/create-solana-dapp"",
                      "target="_blank"",
                      "rel="noopener noreferrer"",
                      ">",
                      "create-solana-dapp",
                      "</a>",
                      "</p>",
                      "</aside>",
                      "</footer>",
                      "</div>",
                      ")",
                      "}",
                      "export function AppModal({",
                      "children,",
                      "title,",
                      "hide,",
                      "show,",
                      "submit,",
                      "submitDisabled,",
                      "submitLabel,",
                      "}: {",
                      "children: ReactNode",
                      "title: string",
                      "hide: () => void",
                      "show: boolean",
                      "submit?: () => void",
                      "submitDisabled?: boolean",
                      "submitLabel?: string",
                      "}) {",
                      "const dialogRef = useRef<HTMLDialogElement | null>(null)",
                      "useEffect(() => {",
                      "if (!dialogRef.current) return",
                      "if (show) {",
                      "dialogRef.current.showModal()",
                      "} else {",
                      "dialogRef.current.close()",
                      "}",
                      "}, [show, dialogRef])",
                      "return (",
                      "<dialog className="modal" ref={dialogRef}>",
                      "<div className="modal-box space-y-5">",
                      "<h3 className="font-bold text-lg">{title}</h3>",
                      "{children}",
                      "<div className="modal-action">",
                      "<div className="join space-x-2">",
                      "{submit ? (",
                      "<button className="btn btn-xs lg:btn-md btn-primary" onClick={submit} disabled={submitDisabled}>",
                      "{submitLabel || 'Save'}",
                      "</button>",
                      ") : null}",
                      "<button onClick={hide} className="btn">",
                      "Close",
                      "</button>",
                      "</div>",
                      "</div>",
                      "</div>",
                      "</dialog>",
                      ")",
                      "}",
                      "export function AppHero({",
                      "children,",
                      "title,",
                      "subtitle,",
                      "}: {",
                      "children?: ReactNode",
                      "title: ReactNode",
                      "subtitle: ReactNode",
                      "}) {",
                      "return (",
                      "<div className="hero py-[64px]">",
                      "<div className="hero-content text-center">",
                      "<div className="max-w-2xl">",
                      "{typeof title === 'string' ? <h1 className="text-5xl font-bold">{title}</h1> : title}",
                      "{typeof subtitle === 'string' ? <p className="py-6">{subtitle}</p> : subtitle}",
                      "{children}",
                      "</div>",
                      "</div>",
                      "</div>",
                      ")",
                      "}",
                      "export function ellipsify(str = '', len = 4) {",
                      "if (str.length > 30) {",
                      "return str.substring(0, len) + '..' + str.substring(str.length - len, str.length)",
                      "}",
                      "return str",
                      "}",
                      "export function useTransactionToast() {",
                      "return (signature: string) => {",
                      "toast.success(",
                      "<div className={'text-center'}>",
                      "<div className="text-lg">Transaction sent</div>",
                      "<ExplorerLink path={\`tx/\${signature}\`} label={'View Transaction'} className="btn btn-xs btn-primary" />",
                      "</div>,",
                      ")",
                      "}",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/ui/ui-layout.tsx",
                  },
                },
                "path": "./web-app/src/app/ui",
              },
            },
            "path": "./web-app/src/app",
          },
          "assets": {
            "children": {
              ".gitkeep": {
                "content": [],
                "isBinary": false,
                "path": "./web-app/src/assets/.gitkeep",
              },
              "logo.png": {
                "content": null,
                "isBinary": true,
                "path": "./web-app/src/assets/logo.png",
              },
            },
            "path": "./web-app/src/assets",
          },
          "favicon.ico": {
            "content": null,
            "isBinary": true,
            "path": "./web-app/src/favicon.ico",
          },
          "index.html": {
            "content": [
              "<!DOCTYPE html>",
              "<html lang="en">",
              "<head>",
              "<meta charset="utf-8" />",
              "<title>WebApp</title>",
              "<base href="/" />",
              "<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />",
              "<link rel="icon" type="image/x-icon" href="favicon.ico" />",
              "</head>",
              "<body>",
              "<div id="root"></div>",
              "</body>",
              "</html>",
            ],
            "isBinary": false,
            "path": "./web-app/src/index.html",
          },
          "main.tsx": {
            "content": [
              "import { StrictMode } from 'react'",
              "import * as ReactDOM from 'react-dom/client'",
              "import { BrowserRouter } from 'react-router-dom'",
              "import './polyfills'",
              "import { App } from './app/app'",
              "const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement)",
              "root.render(",
              "<StrictMode>",
              "<BrowserRouter>",
              "<App />",
              "</BrowserRouter>",
              "</StrictMode>,",
              ")",
            ],
            "isBinary": false,
            "path": "./web-app/src/main.tsx",
          },
          "polyfills.ts": {
            "content": [
              "import * as buffer from 'buffer';",
              "window.Buffer = buffer.Buffer;",
            ],
            "isBinary": false,
            "path": "./web-app/src/polyfills.ts",
          },
          "styles.css": {
            "content": [
              "@tailwind base;",
              "@tailwind components;",
              "@tailwind utilities;",
              "@tailwind base;",
              "@tailwind components;",
              "@tailwind utilities;",
              "html,",
              "body,",
              "#root {",
              "height: 100%;",
              "}",
              ".wallet-adapter-button-trigger {",
              "background: rgb(100, 26, 230) !important;",
              "border-radius: 8px !important;",
              "padding-left: 16px !important;",
              "padding-right: 16px !important;",
              "}",
              ".wallet-adapter-dropdown-list,",
              ".wallet-adapter-button {",
              "font-family: inherit !important;",
              "}",
            ],
            "isBinary": false,
            "path": "./web-app/src/styles.css",
          },
        },
        "path": "./web-app/src",
      },
      "tailwind.config.js": {
        "content": [
          "const { createGlobPatternsForDependencies } = require('@nx/react/tailwind');",
          "const { join } = require('path');",
          "/** @type {import('tailwindcss').Config} */",
          "module.exports = {",
          "content: [",
          "join(",
          "__dirname,",
          "'{src,pages,components,app}/**/*!(*.stories|*.spec).{ts,tsx,html}'",
          "),",
          "...createGlobPatternsForDependencies(__dirname),",
          "],",
          "theme: {",
          "extend: {},",
          "},",
          "plugins: [require('daisyui')],",
          "};",
        ],
        "isBinary": false,
        "path": "./web-app/tailwind.config.js",
      },
      "tsconfig.app.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""types": [",
          ""node",",
          ""@nx/react/typings/cssmodule.d.ts",",
          ""@nx/react/typings/image.d.ts"",
          "]",
          "},",
          ""exclude": ["jest.config.ts","src/**/*.spec.ts", "src/**/*.test.ts", "src/**/*.spec.tsx", "src/**/*.test.tsx", "src/**/*.spec.js", "src/**/*.test.js", "src/**/*.spec.jsx", "src/**/*.test.jsx"],",
          ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
          "}",
        ],
        "isBinary": false,
        "path": "./web-app/tsconfig.app.json",
      },
      "tsconfig.json": {
        "content": [
          "{",
          ""compilerOptions": {",
          ""jsx": "react-jsx",",
          ""allowJs": false,",
          ""esModuleInterop": false,",
          ""allowSyntheticDefaultImports": true,",
          ""strict": true",
          "},",
          ""files": [],",
          ""include": [],",
          ""references": [",
          "{",
          ""path": "./tsconfig.app.json"",
          "}",
          "],",
          ""extends": "../tsconfig.base.json"",
          "}",
        ],
        "isBinary": false,
        "path": "./web-app/tsconfig.json",
      },
      "webpack.config.js": {
        "content": [
          "const { composePlugins, withNx } = require('@nx/webpack');",
          "const { withReact } = require('@nx/react');",
          "// Nx plugins for webpack.",
          "module.exports = composePlugins(withNx(), withReact(), (config) => {",
          "// Update the webpack config as needed here.",
          "// e.g. \`config.plugins.push(new MyPlugin())\`",
          "config.ignoreWarnings = [/Failed to parse source map/];",
          "config.resolve.fallback = {",
          "crypto: require.resolve('crypto-browserify'),",
          "stream: require.resolve('stream-browserify'),",
          "};",
          "return config;",
          "});",
        ],
        "isBinary": false,
        "path": "./web-app/webpack.config.js",
      },
    },
    "path": "./web-app",
  },
}
`;

exports[`react-feature generator should generate files for anchor-counter feature 1`] = `
{
  ".eslintignore": {
    "content": [
      "node_modules",
    ],
    "isBinary": false,
    "path": "./.eslintignore",
  },
  ".eslintrc.json": {
    "content": [
      "{",
      ""root": true,",
      ""ignorePatterns": [",
      ""**/*"",
      "],",
      ""plugins": [",
      ""@nx"",
      "],",
      ""overrides": [",
      "{",
      ""files": [",
      ""*.ts",",
      ""*.tsx",",
      ""*.js",",
      ""*.jsx"",
      "],",
      ""rules": {",
      ""@nx/enforce-module-boundaries": [",
      ""error",",
      "{",
      ""enforceBuildableLibDependency": true,",
      ""allow": [],",
      ""depConstraints": [",
      "{",
      ""sourceTag": "*",",
      ""onlyDependOnLibsWithTags": [",
      ""*"",
      "]",
      "}",
      "]",
      "}",
      "]",
      "}",
      "},",
      "{",
      ""files": [",
      ""*.ts",",
      ""*.tsx"",
      "],",
      ""extends": [",
      ""plugin:@nx/typescript"",
      "],",
      ""rules": {}",
      "},",
      "{",
      ""files": [",
      ""*.js",",
      ""*.jsx"",
      "],",
      ""extends": [",
      ""plugin:@nx/javascript"",
      "],",
      ""rules": {}",
      "}",
      "]",
      "}",
    ],
    "isBinary": false,
    "path": "./.eslintrc.json",
  },
  ".prettierignore": {
    "content": [
      "# Add files here to ignore them from prettier formatting",
      "/dist",
      "/coverage",
      "/.nx/cache",
      ".anchor",
      "anchor-app/target/deploy",
      "anchor-app/target/debug",
      "anchor-app/target/release",
      "anchor-app/target/sbf-solana-solana",
      "anchor-app/target/.rustc_info.json",
      "!anchor-app/target/idl/*.json",
      "!anchor-app/target/types/*.ts",
      "node_modules",
      "dist",
      "tmp",
      "build",
      "test-ledger",
    ],
    "isBinary": false,
    "path": "./.prettierignore",
  },
  ".prettierrc": {
    "content": [
      "{"singleQuote":true}",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "LICENSE": {
    "content": [
      "MIT License",
      "Copyright (c) 2024 test",
      "Permission is hereby granted, free of charge, to any person obtaining a copy",
      "of this software and associated documentation files (the "Software"), to deal",
      "in the Software without restriction, including without limitation the rights",
      "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
      "copies of the Software, and to permit persons to whom the Software is",
      "furnished to do so, subject to the following conditions:",
      "The above copyright notice and this permission notice shall be included in all",
      "copies or substantial portions of the Software.",
      "THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
      "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
      "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
      "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
      "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
      "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
      "SOFTWARE.",
    ],
    "isBinary": false,
    "path": "./LICENSE",
  },
  "README.md": {
    "content": [
      "# proj",
      "This project is generated with the [create-solana-dapp](https://github.com/solana-developers/create-solana-dapp) generator.",
      "## Getting Started",
      "### Prerequisites",
      "- Node v18.18.0 or higher",
      "- Rust v1.77.2 or higher",
      "- Anchor CLI 0.30.0 or higher",
      "- Solana CLI 1.18.9 or higher",
      "### Installation",
      "#### Clone the repo",
      "\`\`\`shell",
      "git clone <repo-url>",
      "cd <repo-name>",
      "\`\`\`",
      "#### Install Dependencies",
      "\`\`\`shell",
      "yarn install",
      "\`\`\`",
      "#### Start the web app",
      "\`\`\`",
      "yarn dev",
      "\`\`\`",
      "## Apps",
      "### anchor",
      "This is a Solana program written in Rust using the Anchor framework.",
      "#### Commands",
      "You can use any normal anchor commands. Either move to the \`anchor-app\` directory and run the \`anchor\` command or prefix the command with \`yarn\`, eg: \`yarn anchor\`.",
      "#### Sync the program id:",
      "Running this command will create a new keypair in the \`anchor-app/target/deploy\` directory and save the address to the Anchor config file and update the \`declare_id!\` macro in the \`./src/lib.rs\` file of the program.",
      "You will manually need to update the constant in \`anchor-app/lib/counter-exports.ts\` to match the new program id.",
      "\`\`\`shell",
      "yarn anchor keys sync",
      "\`\`\`",
      "#### Build the program:",
      "\`\`\`shell",
      "yarn anchor-build",
      "\`\`\`",
      "#### Start the test validator with the program deployed:",
      "\`\`\`shell",
      "yarn anchor-localnet",
      "\`\`\`",
      "#### Run the tests",
      "\`\`\`shell",
      "yarn anchor-test",
      "\`\`\`",
      "#### Deploy to Devnet",
      "\`\`\`shell",
      "yarn anchor deploy --provider.cluster devnet",
      "\`\`\`",
      "### web",
      "This is a React app that uses the Anchor generated client to interact with the Solana program.",
      "#### Commands",
      "Start the web app",
      "\`\`\`shell",
      "yarn dev",
      "\`\`\`",
      "Build the web app",
      "\`\`\`shell",
      "yarn build",
      "\`\`\`",
    ],
    "isBinary": false,
    "path": "./README.md",
  },
  "anchor-app": {
    "children": {
      ".eslintrc.json": {
        "content": [
          "{",
          ""extends": [",
          ""../.eslintrc.json"",
          "],",
          ""ignorePatterns": [",
          ""!**/*"",
          "],",
          ""overrides": [",
          "{",
          ""files": [",
          ""*.ts",",
          ""*.tsx",",
          ""*.js",",
          ""*.jsx"",
          "],",
          ""rules": {}",
          "},",
          "{",
          ""files": [",
          ""*.ts",",
          ""*.tsx"",
          "],",
          ""rules": {}",
          "},",
          "{",
          ""files": [",
          ""*.js",",
          ""*.jsx"",
          "],",
          ""rules": {}",
          "},",
          "{",
          ""files": [",
          ""*.json"",
          "],",
          ""parser": "jsonc-eslint-parser",",
          ""rules": {",
          ""@nx/dependency-checks": [",
          ""error",",
          "{",
          ""ignoredFiles": [",
          ""{projectRoot}/rollup.config.{js,ts,mjs,mts}"",
          "]",
          "}",
          "]",
          "}",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor-app/.eslintrc.json",
      },
      ".swcrc": {
        "content": [
          "{",
          ""jsc": {",
          ""target": "es2017",",
          ""parser": {",
          ""syntax": "typescript",",
          ""decorators": true,",
          ""dynamicImport": true",
          "},",
          ""transform": {",
          ""decoratorMetadata": true,",
          ""legacyDecorator": true",
          "},",
          ""keepClassNames": true,",
          ""externalHelpers": true,",
          ""loose": true",
          "},",
          ""module": {",
          ""type": "es6"",
          "},",
          ""sourceMaps": true,",
          ""exclude": ["jest.config.ts",".*\\\\.spec.tsx?$",".*\\\\.test.tsx?$","./src/jest-setup.ts$","./**/jest-setup.ts$",".*.js$"]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor-app/.swcrc",
      },
      "Anchor.toml": {
        "content": [
          "[toolchain]",
          "[features]",
          "seeds = false",
          "skip-lint = false",
          "[programs.localnet]",
          "my_anchor_counter_program = "GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA"",
          "[registry]",
          "url = "https://api.apr.dev"",
          "[provider]",
          "cluster = "Localnet"",
          "wallet = "~/.config/solana/id.json"",
          "[scripts]",
          "test = "../node_modules/.bin/nx run anchor-app:jest"",
          "[test]",
          "startup_wait = 5000",
          "shutdown_wait = 2000",
          "upgradeable = false",
          "[test.validator]",
          "bind_address = "127.0.0.1"",
          "ledger = ".anchor/test-ledger"",
          "rpc_port = 8899",
        ],
        "isBinary": false,
        "path": "./anchor-app/Anchor.toml",
      },
      "Cargo.lock": {
        "content": null,
        "isBinary": true,
        "path": "./anchor-app/Cargo.lock",
      },
      "Cargo.toml": {
        "content": [
          "[workspace]",
          "members = [",
          ""programs/*"",
          "]",
          "resolver = "2"",
          "[profile.release]",
          "overflow-checks = true",
          "lto = "fat"",
          "codegen-units = 1",
          "[profile.release.build-override]",
          "opt-level = 3",
          "incremental = false",
          "codegen-units = 1",
        ],
        "isBinary": false,
        "path": "./anchor-app/Cargo.toml",
      },
      "README.md": {
        "content": [
          "# anchor-app",
          "This library was generated with [Nx](https://nx.dev).",
          "## Building",
          "Run \`nx build anchor-app\` to build the library.",
          "## Running unit tests",
          "Run \`nx test anchor-app\` to execute the unit tests via [Jest](https://jestjs.io).",
        ],
        "isBinary": false,
        "path": "./anchor-app/README.md",
      },
      "jest.config.ts": {
        "content": [
          "/* eslint-disable */",
          "import { readFileSync } from 'fs';",
          "// Reading the SWC compilation config and remove the "exclude"",
          "// for the test files to be compiled by SWC",
          "const { exclude: _, ...swcJestConfig } = JSON.parse(",
          "readFileSync(\`\${__dirname}/.swcrc\`, 'utf-8')",
          ");",
          "// disable .swcrc look-up by SWC core because we're passing in swcJestConfig ourselves.",
          "// If we do not disable this, SWC Core will read .swcrc and won't transform our test files due to "exclude"",
          "if (swcJestConfig.swcrc === undefined) {",
          "swcJestConfig.swcrc = false;",
          "}",
          "// Uncomment if using global setup/teardown files being transformed via swc",
          "// https://nx.dev/packages/jest/documents/overview#global-setup/teardown-with-nx-libraries",
          "// jest needs EsModule Interop to find the default exported setup/teardown functions",
          "// swcJestConfig.module.noInterop = false;",
          "export default {",
          "displayName: 'anchor-app',",
          "preset: '../jest.preset.js',",
          "transform: {",
          "'^.+\\\\.[tj]s$': ['@swc/jest', swcJestConfig],",
          "},",
          "moduleFileExtensions: ['ts', 'js', 'html'],",
          "testEnvironment: '',",
          "coverageDirectory: '../coverage/anchor-app'",
          "};",
        ],
        "isBinary": false,
        "path": "./anchor-app/jest.config.ts",
      },
      "migrations": {
        "children": {
          "deploy.ts": {
            "content": [
              "// Migrations are an early feature. Currently, they're nothing more than this",
              "// single deploy script that's invoked from the CLI, injecting a provider",
              "// configured from the workspace's Anchor.toml.",
              "import * as anchor from '@coral-xyz/anchor';",
              "module.exports = async function (provider) {",
              "// Configure client to use the provider.",
              "anchor.setProvider(provider);",
              "// Add your deploy script here.",
              "};",
            ],
            "isBinary": false,
            "path": "./anchor-app/migrations/deploy.ts",
          },
        },
        "path": "./anchor-app/migrations",
      },
      "package.json": {
        "content": [
          "{",
          ""name": "@proj/anchor-app",",
          ""version": "0.0.1",",
          ""dependencies": {",
          ""@coral-xyz/anchor": "^0.30.0",",
          ""@solana/web3.js": "1.91.7"",
          "},",
          ""main": "./index.cjs",",
          ""module": "./index.js",",
          ""private": true",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor-app/package.json",
      },
      "programs": {
        "children": {
          "counter": {
            "children": {
              "Cargo.toml": {
                "content": [
                  "[package]",
                  "name = "counter"",
                  "version = "0.1.0"",
                  "description = "Created with Anchor"",
                  "edition = "2021"",
                  "[lib]",
                  "crate-type = ["cdylib", "lib"]",
                  "name = "counter"",
                  "[features]",
                  "no-entrypoint = []",
                  "no-idl = []",
                  "no-log-ix-name = []",
                  "cpi = ["no-entrypoint"]",
                  "default = []",
                  "idl-build = ["anchor-lang/idl-build"]",
                  "[dependencies]",
                  "anchor-lang = "0.30.0"",
                ],
                "isBinary": false,
                "path": "./anchor-app/programs/counter/Cargo.toml",
              },
              "Xargo.toml": {
                "content": [
                  "[target.bpfel-unknown-unknown.dependencies.std]",
                  "features = []",
                ],
                "isBinary": false,
                "path": "./anchor-app/programs/counter/Xargo.toml",
              },
              "src": {
                "children": {
                  "lib.rs": {
                    "content": [
                      "#![allow(clippy::result_large_err)]",
                      "use anchor_lang::prelude::*;",
                      "declare_id!("GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA");",
                      "#[program]",
                      "pub mod counter {",
                      "use super::*;",
                      "pub fn close(_ctx: Context<CloseCounter>) -> Result<()> {",
                      "Ok(())",
                      "}",
                      "pub fn decrement(ctx: Context<Update>) -> Result<()> {",
                      "ctx.accounts.counter.count = ctx.accounts.counter.count.checked_sub(1).unwrap();",
                      "Ok(())",
                      "}",
                      "pub fn increment(ctx: Context<Update>) -> Result<()> {",
                      "ctx.accounts.counter.count = ctx.accounts.counter.count.checked_add(1).unwrap();",
                      "Ok(())",
                      "}",
                      "pub fn initialize(_ctx: Context<InitializeCounter>) -> Result<()> {",
                      "Ok(())",
                      "}",
                      "pub fn set(ctx: Context<Update>, value: u8) -> Result<()> {",
                      "ctx.accounts.counter.count = value.clone();",
                      "Ok(())",
                      "}",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct InitializeCounter<'info> {",
                      "#[account(mut)]",
                      "pub payer: Signer<'info>,",
                      "#[account(",
                      "init,",
                      "space = 8 + Counter::INIT_SPACE,",
                      "payer = payer",
                      ")]",
                      "pub counter: Account<'info, Counter>,",
                      "pub system_program: Program<'info, System>,",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct CloseCounter<'info> {",
                      "#[account(mut)]",
                      "pub payer: Signer<'info>,",
                      "#[account(",
                      "mut,",
                      "close = payer, // close account and return lamports to payer",
                      ")]",
                      "pub counter: Account<'info, Counter>,",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct Update<'info> {",
                      "#[account(mut)]",
                      "pub counter: Account<'info, Counter>,",
                      "}",
                      "#[account]",
                      "#[derive(InitSpace)]",
                      "pub struct Counter {",
                      "count: u8,",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./anchor-app/programs/counter/src/lib.rs",
                  },
                },
                "path": "./anchor-app/programs/counter/src",
              },
            },
            "path": "./anchor-app/programs/counter",
          },
          "my-anchor-counter-program": {
            "children": {
              "Cargo.toml": {
                "content": [
                  "[package]",
                  "name = "my-anchor-counter-program"",
                  "version = "0.1.0"",
                  "description = "Created with Anchor"",
                  "edition = "2021"",
                  "[lib]",
                  "crate-type = ["cdylib", "lib"]",
                  "name = "my_anchor_counter_program"",
                  "[features]",
                  "no-entrypoint = []",
                  "no-idl = []",
                  "no-log-ix-name = []",
                  "cpi = ["no-entrypoint"]",
                  "default = []",
                  "idl-build = ["anchor-lang/idl-build"]",
                  "[dependencies]",
                  "anchor-lang = "0.30.0"",
                ],
                "isBinary": false,
                "path": "./anchor-app/programs/my-anchor-counter-program/Cargo.toml",
              },
              "Xargo.toml": {
                "content": [
                  "[target.bpfel-unknown-unknown.dependencies.std]",
                  "features = []",
                ],
                "isBinary": false,
                "path": "./anchor-app/programs/my-anchor-counter-program/Xargo.toml",
              },
              "src": {
                "children": {
                  "lib.rs": {
                    "content": [
                      "#![allow(clippy::result_large_err)]",
                      "use anchor_lang::prelude::*;",
                      "declare_id!("GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA");",
                      "#[program]",
                      "pub mod my_anchor_counter_program {",
                      "use super::*;",
                      "pub fn close(_ctx: Context<CloseMyAnchorCounterProgram>) -> Result<()> {",
                      "Ok(())",
                      "}",
                      "pub fn decrement(ctx: Context<Update>) -> Result<()> {",
                      "ctx.accounts.my_anchor_counter_program.count = ctx.accounts.my_anchor_counter_program.count.checked_sub(1).unwrap();",
                      "Ok(())",
                      "}",
                      "pub fn increment(ctx: Context<Update>) -> Result<()> {",
                      "ctx.accounts.my_anchor_counter_program.count = ctx.accounts.my_anchor_counter_program.count.checked_add(1).unwrap();",
                      "Ok(())",
                      "}",
                      "pub fn initialize(_ctx: Context<InitializeMyAnchorCounterProgram>) -> Result<()> {",
                      "Ok(())",
                      "}",
                      "pub fn set(ctx: Context<Update>, value: u8) -> Result<()> {",
                      "ctx.accounts.my_anchor_counter_program.count = value.clone();",
                      "Ok(())",
                      "}",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct InitializeMyAnchorCounterProgram<'info> {",
                      "#[account(mut)]",
                      "pub payer: Signer<'info>,",
                      "#[account(",
                      "init,",
                      "space = 8 + MyAnchorCounterProgram::INIT_SPACE,",
                      "payer = payer",
                      ")]",
                      "pub my_anchor_counter_program: Account<'info, MyAnchorCounterProgram>,",
                      "pub system_program: Program<'info, System>,",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct CloseMyAnchorCounterProgram<'info> {",
                      "#[account(mut)]",
                      "pub payer: Signer<'info>,",
                      "#[account(",
                      "mut,",
                      "close = payer, // close account and return lamports to payer",
                      ")]",
                      "pub my_anchor_counter_program: Account<'info, MyAnchorCounterProgram>,",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct Update<'info> {",
                      "#[account(mut)]",
                      "pub my_anchor_counter_program: Account<'info, MyAnchorCounterProgram>,",
                      "}",
                      "#[account]",
                      "#[derive(InitSpace)]",
                      "pub struct MyAnchorCounterProgram {",
                      "count: u8,",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./anchor-app/programs/my-anchor-counter-program/src/lib.rs",
                  },
                },
                "path": "./anchor-app/programs/my-anchor-counter-program/src",
              },
            },
            "path": "./anchor-app/programs/my-anchor-counter-program",
          },
        },
        "path": "./anchor-app/programs",
      },
      "project.json": {
        "content": [
          "{",
          ""name": "anchor-app",",
          ""$schema": "../node_modules/nx/schemas/project-schema.json",",
          ""sourceRoot": "anchor-app/src",",
          ""projectType": "library",",
          ""tags": [],",
          ""targets": {",
          ""build": {",
          ""executor": "@nx/rollup:rollup",",
          ""outputs": [",
          ""{options.outputPath}"",
          "],",
          ""options": {",
          ""outputPath": "dist/anchor-app",",
          ""main": "anchor-app/src/index.ts",",
          ""tsConfig": "anchor-app/tsconfig.lib.json",",
          ""assets": [],",
          ""project": "anchor-app/package.json",",
          ""compiler": "swc",",
          ""format": [",
          ""cjs",",
          ""esm"",
          "]",
          "}",
          "},",
          ""lint": {",
          ""executor": "@nx/eslint:lint"",
          "},",
          ""test": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor-app",",
          ""commands": [",
          ""anchor test"",
          "],",
          ""parallel": false",
          "}",
          "},",
          ""anchor": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor-app",",
          ""commands": [",
          ""anchor"",
          "],",
          ""parallel": false",
          "}",
          "},",
          ""localnet": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor-app",",
          ""commands": [",
          ""anchor localnet"",
          "],",
          ""parallel": false",
          "}",
          "},",
          ""jest": {",
          ""executor": "@nx/jest:jest",",
          ""outputs": [",
          ""{workspaceRoot}/coverage/{projectRoot}"",
          "],",
          ""options": {",
          ""jestConfig": "anchor-app/jest.config.ts"",
          "}",
          "}",
          "}",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor-app/project.json",
      },
      "src": {
        "children": {
          "counter-exports.ts": {
            "content": [
              "// Here we export some useful types and functions for interacting with the Anchor program.",
              "import { AnchorProvider, Program } from '@coral-xyz/anchor';",
              "import { Cluster, PublicKey } from '@solana/web3.js';",
              "import CounterIDL from '../target/idl/counter.json';",
              "import type { Counter } from '../target/types/counter';",
              "// Re-export the generated IDL and type",
              "export { Counter, CounterIDL };",
              "// The programId is imported from the program IDL.",
              "export const COUNTER_PROGRAM_ID = new PublicKey(CounterIDL.address)",
              "// This is a helper function to get the Counter Anchor program.",
              "export function getCounterProgram(provider: AnchorProvider) {",
              "return new Program(CounterIDL as Counter, provider);",
              "}",
              "// This is a helper function to get the program ID for the Counter program depending on the cluster.",
              "export function getCounterProgramId(cluster: Cluster) {",
              "switch (cluster) {",
              "case 'devnet':",
              "case 'testnet':",
              "// This is the program ID for the Counter program on devnet and testnet.",
              "return new PublicKey('CounNZdmsQmWh7uVngV9FXW2dZ6zAgbJyYsvBpqbykg')",
              "case 'mainnet-beta':",
              "default:",
              "return COUNTER_PROGRAM_ID",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "./anchor-app/src/counter-exports.ts",
          },
          "index.ts": {
            "content": [
              "// This file was generated by preset-anchor. Programs are exported from this file.",
              "export * from './counter-exports'",
              "export * from './my-anchor-counter-program-exports'",
            ],
            "isBinary": false,
            "path": "./anchor-app/src/index.ts",
          },
          "my-anchor-counter-program-exports.ts": {
            "content": [
              "// Here we export some useful types and functions for interacting with the Anchor program.",
              "import { AnchorProvider, Program } from '@coral-xyz/anchor';",
              "import { Cluster, PublicKey } from '@solana/web3.js';",
              "import MyAnchorCounterProgramIDL from '../target/idl/my_anchor_counter_program.json';",
              "import type { MyAnchorCounterProgram } from '../target/types/my_anchor_counter_program';",
              "// Re-export the generated IDL and type",
              "export { MyAnchorCounterProgram, MyAnchorCounterProgramIDL };",
              "// The programId is imported from the program IDL.",
              "export const MY_ANCHOR_COUNTER_PROGRAM_PROGRAM_ID = new PublicKey(MyAnchorCounterProgramIDL.address)",
              "// This is a helper function to get the MyAnchorCounterProgram Anchor program.",
              "export function getMyAnchorCounterProgramProgram(provider: AnchorProvider) {",
              "return new Program(MyAnchorCounterProgramIDL as MyAnchorCounterProgram, provider);",
              "}",
              "// This is a helper function to get the program ID for the MyAnchorCounterProgram program depending on the cluster.",
              "export function getMyAnchorCounterProgramProgramId(cluster: Cluster) {",
              "switch (cluster) {",
              "case 'devnet':",
              "case 'testnet':",
              "case 'mainnet-beta':",
              "default:",
              "return MY_ANCHOR_COUNTER_PROGRAM_PROGRAM_ID",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "./anchor-app/src/my-anchor-counter-program-exports.ts",
          },
        },
        "path": "./anchor-app/src",
      },
      "target": {
        "children": {
          "deploy": {
            "children": {
              "counter-keypair.json": {
                "content": [
                  "[102,57,177,113,190,89,227,160,193,179,207,89,103,112,83,251,142,20,242,30,81,26,82,85,207,97,28,129,190,28,128,71,228,27,114,255,63,136,164,140,185,151,50,58,148,32,197,184,85,144,79,78,24,248,25,138,254,31,96,78,56,230,148,1]",
                ],
                "isBinary": false,
                "path": "./anchor-app/target/deploy/counter-keypair.json",
              },
              "my_anchor_counter_program-keypair.json": {
                "content": [
                  "[102,57,177,113,190,89,227,160,193,179,207,89,103,112,83,251,142,20,242,30,81,26,82,85,207,97,28,129,190,28,128,71,228,27,114,255,63,136,164,140,185,151,50,58,148,32,197,184,85,144,79,78,24,248,25,138,254,31,96,78,56,230,148,1]",
                ],
                "isBinary": false,
                "path": "./anchor-app/target/deploy/my_anchor_counter_program-keypair.json",
              },
            },
            "path": "./anchor-app/target/deploy",
          },
          "idl": {
            "children": {
              "counter.json": {
                "content": [
                  "{",
                  ""address": "GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA",",
                  ""metadata": {",
                  ""name": "counter",",
                  ""version": "0.1.0",",
                  ""spec": "0.1.0",",
                  ""description": "Created with Anchor"",
                  "},",
                  ""instructions": [",
                  "{",
                  ""name": "close",",
                  ""discriminator": [",
                  "98,",
                  "165,",
                  "201,",
                  "177,",
                  "108,",
                  "65,",
                  "206,",
                  "96",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "payer",",
                  ""writable": true,",
                  ""signer": true",
                  "},",
                  "{",
                  ""name": "counter",",
                  ""writable": true",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "decrement",",
                  ""discriminator": [",
                  "106,",
                  "227,",
                  "168,",
                  "59,",
                  "248,",
                  "27,",
                  "150,",
                  "101",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "counter",",
                  ""writable": true",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "increment",",
                  ""discriminator": [",
                  "11,",
                  "18,",
                  "104,",
                  "9,",
                  "104,",
                  "174,",
                  "59,",
                  "33",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "counter",",
                  ""writable": true",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "initialize",",
                  ""discriminator": [",
                  "175,",
                  "175,",
                  "109,",
                  "31,",
                  "13,",
                  "152,",
                  "155,",
                  "237",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "payer",",
                  ""writable": true,",
                  ""signer": true",
                  "},",
                  "{",
                  ""name": "counter",",
                  ""writable": true,",
                  ""signer": true",
                  "},",
                  "{",
                  ""name": "system_program",",
                  ""address": "11111111111111111111111111111111"",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "set",",
                  ""discriminator": [",
                  "198,",
                  "51,",
                  "53,",
                  "241,",
                  "116,",
                  "29,",
                  "126,",
                  "194",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "counter",",
                  ""writable": true",
                  "}",
                  "],",
                  ""args": [",
                  "{",
                  ""name": "value",",
                  ""type": "u8"",
                  "}",
                  "]",
                  "}",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "Counter",",
                  ""discriminator": [",
                  "135,",
                  "64,",
                  "223,",
                  "168,",
                  "233,",
                  "143,",
                  "162,",
                  "215",
                  "]",
                  "}",
                  "],",
                  ""types": [",
                  "{",
                  ""name": "Counter",",
                  ""type": {",
                  ""kind": "struct",",
                  ""fields": [",
                  "{",
                  ""name": "count",",
                  ""type": "u8"",
                  "}",
                  "]",
                  "}",
                  "}",
                  "]",
                  "}",
                ],
                "isBinary": false,
                "path": "./anchor-app/target/idl/counter.json",
              },
              "my_anchor_counter_program.json": {
                "content": [
                  "{",
                  ""address": "GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA",",
                  ""metadata": {",
                  ""name": "my_anchor_counter_program",",
                  ""version": "0.1.0",",
                  ""spec": "0.1.0",",
                  ""description": "Created with Anchor"",
                  "},",
                  ""instructions": [",
                  "{",
                  ""name": "close",",
                  ""discriminator": [",
                  "98,",
                  "165,",
                  "201,",
                  "177,",
                  "108,",
                  "65,",
                  "206,",
                  "96",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "payer",",
                  ""writable": true,",
                  ""signer": true",
                  "},",
                  "{",
                  ""name": "my_anchor_counter_program",",
                  ""writable": true",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "decrement",",
                  ""discriminator": [",
                  "106,",
                  "227,",
                  "168,",
                  "59,",
                  "248,",
                  "27,",
                  "150,",
                  "101",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "my_anchor_counter_program",",
                  ""writable": true",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "increment",",
                  ""discriminator": [",
                  "11,",
                  "18,",
                  "104,",
                  "9,",
                  "104,",
                  "174,",
                  "59,",
                  "33",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "my_anchor_counter_program",",
                  ""writable": true",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "initialize",",
                  ""discriminator": [",
                  "175,",
                  "175,",
                  "109,",
                  "31,",
                  "13,",
                  "152,",
                  "155,",
                  "237",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "payer",",
                  ""writable": true,",
                  ""signer": true",
                  "},",
                  "{",
                  ""name": "my_anchor_counter_program",",
                  ""writable": true,",
                  ""signer": true",
                  "},",
                  "{",
                  ""name": "system_program",",
                  ""address": "11111111111111111111111111111111"",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "set",",
                  ""discriminator": [",
                  "198,",
                  "51,",
                  "53,",
                  "241,",
                  "116,",
                  "29,",
                  "126,",
                  "194",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "my_anchor_counter_program",",
                  ""writable": true",
                  "}",
                  "],",
                  ""args": [",
                  "{",
                  ""name": "value",",
                  ""type": "u8"",
                  "}",
                  "]",
                  "}",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "MyAnchorCounterProgram",",
                  ""discriminator": [",
                  "135,",
                  "64,",
                  "223,",
                  "168,",
                  "233,",
                  "143,",
                  "162,",
                  "215",
                  "]",
                  "}",
                  "],",
                  ""types": [",
                  "{",
                  ""name": "MyAnchorCounterProgram",",
                  ""type": {",
                  ""kind": "struct",",
                  ""fields": [",
                  "{",
                  ""name": "count",",
                  ""type": "u8"",
                  "}",
                  "]",
                  "}",
                  "}",
                  "]",
                  "}",
                ],
                "isBinary": false,
                "path": "./anchor-app/target/idl/my_anchor_counter_program.json",
              },
            },
            "path": "./anchor-app/target/idl",
          },
          "types": {
            "children": {
              "counter.ts": {
                "content": [
                  "/**",
                  "* Program IDL in camelCase format in order to be used in JS/TS.",
                  "*",
                  "* Note that this is only a type helper and is not the actual IDL. The original",
                  "* IDL can be found at \`target/idl/counter.json\`.",
                  "*/",
                  "export type Counter = {",
                  "address: 'GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA';",
                  "metadata: {",
                  "name: 'counter';",
                  "version: '0.1.0';",
                  "spec: '0.1.0';",
                  "description: 'Created with Anchor';",
                  "};",
                  "instructions: [",
                  "{",
                  "name: 'close';",
                  "discriminator: [98, 165, 201, 177, 108, 65, 206, 96];",
                  "accounts: [",
                  "{",
                  "name: 'payer';",
                  "writable: true;",
                  "signer: true;",
                  "},",
                  "{",
                  "name: 'counter';",
                  "writable: true;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'decrement';",
                  "discriminator: [106, 227, 168, 59, 248, 27, 150, 101];",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "writable: true;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'increment';",
                  "discriminator: [11, 18, 104, 9, 104, 174, 59, 33];",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "writable: true;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'initialize';",
                  "discriminator: [175, 175, 109, 31, 13, 152, 155, 237];",
                  "accounts: [",
                  "{",
                  "name: 'payer';",
                  "writable: true;",
                  "signer: true;",
                  "},",
                  "{",
                  "name: 'counter';",
                  "writable: true;",
                  "signer: true;",
                  "},",
                  "{",
                  "name: 'systemProgram';",
                  "address: '11111111111111111111111111111111';",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'set';",
                  "discriminator: [198, 51, 53, 241, 116, 29, 126, 194];",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "writable: true;",
                  "}",
                  "];",
                  "args: [",
                  "{",
                  "name: 'value';",
                  "type: 'u8';",
                  "}",
                  "];",
                  "}",
                  "];",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "discriminator: [135, 64, 223, 168, 233, 143, 162, 215];",
                  "}",
                  "];",
                  "types: [",
                  "{",
                  "name: 'counter';",
                  "type: {",
                  "kind: 'struct';",
                  "fields: [",
                  "{",
                  "name: 'count';",
                  "type: 'u8';",
                  "}",
                  "];",
                  "};",
                  "}",
                  "];",
                  "};",
                ],
                "isBinary": false,
                "path": "./anchor-app/target/types/counter.ts",
              },
              "my_anchor_counter_program.ts": {
                "content": [
                  "/**",
                  "* Program IDL in camelCase format in order to be used in JS/TS.",
                  "*",
                  "* Note that this is only a type helper and is not the actual IDL. The original",
                  "* IDL can be found at \`target/idl/my_anchor_counter_program.json\`.",
                  "*/",
                  "export type MyAnchorCounterProgram = {",
                  "address: 'GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA';",
                  "metadata: {",
                  "name: 'myAnchorCounterProgram';",
                  "version: '0.1.0';",
                  "spec: '0.1.0';",
                  "description: 'Created with Anchor';",
                  "};",
                  "instructions: [",
                  "{",
                  "name: 'close';",
                  "discriminator: [98, 165, 201, 177, 108, 65, 206, 96];",
                  "accounts: [",
                  "{",
                  "name: 'payer';",
                  "writable: true;",
                  "signer: true;",
                  "},",
                  "{",
                  "name: 'myAnchorCounterProgram';",
                  "writable: true;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'decrement';",
                  "discriminator: [106, 227, 168, 59, 248, 27, 150, 101];",
                  "accounts: [",
                  "{",
                  "name: 'myAnchorCounterProgram';",
                  "writable: true;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'increment';",
                  "discriminator: [11, 18, 104, 9, 104, 174, 59, 33];",
                  "accounts: [",
                  "{",
                  "name: 'myAnchorCounterProgram';",
                  "writable: true;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'initialize';",
                  "discriminator: [175, 175, 109, 31, 13, 152, 155, 237];",
                  "accounts: [",
                  "{",
                  "name: 'payer';",
                  "writable: true;",
                  "signer: true;",
                  "},",
                  "{",
                  "name: 'myAnchorCounterProgram';",
                  "writable: true;",
                  "signer: true;",
                  "},",
                  "{",
                  "name: 'systemProgram';",
                  "address: '11111111111111111111111111111111';",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'set';",
                  "discriminator: [198, 51, 53, 241, 116, 29, 126, 194];",
                  "accounts: [",
                  "{",
                  "name: 'myAnchorCounterProgram';",
                  "writable: true;",
                  "}",
                  "];",
                  "args: [",
                  "{",
                  "name: 'value';",
                  "type: 'u8';",
                  "}",
                  "];",
                  "}",
                  "];",
                  "accounts: [",
                  "{",
                  "name: 'myAnchorCounterProgram';",
                  "discriminator: [135, 64, 223, 168, 233, 143, 162, 215];",
                  "}",
                  "];",
                  "types: [",
                  "{",
                  "name: 'myAnchorCounterProgram';",
                  "type: {",
                  "kind: 'struct';",
                  "fields: [",
                  "{",
                  "name: 'count';",
                  "type: 'u8';",
                  "}",
                  "];",
                  "};",
                  "}",
                  "];",
                  "};",
                ],
                "isBinary": false,
                "path": "./anchor-app/target/types/my_anchor_counter_program.ts",
              },
            },
            "path": "./anchor-app/target/types",
          },
        },
        "path": "./anchor-app/target",
      },
      "tests": {
        "children": {
          "counter.spec.ts": {
            "content": [
              "import * as anchor from '@coral-xyz/anchor'",
              "import { Program } from '@coral-xyz/anchor'",
              "import { Keypair } from '@solana/web3.js'",
              "import { Counter } from "../target/types/counter";",
              "describe("counter", () => {",
              "// Configure the client to use the local cluster.",
              "const provider = anchor.AnchorProvider.env()",
              "anchor.setProvider(provider)",
              "const payer = provider.wallet as anchor.Wallet",
              "const program = anchor.workspace.Counter as Program<Counter>;",
              "const counterKeypair = Keypair.generate()",
              "it('Initialize Counter', async () => {",
              "await program.methods",
              ".initialize()",
              ".accounts({",
              "counter: counterKeypair.publicKey,",
              "payer: payer.publicKey,",
              "})",
              ".signers([counterKeypair])",
              ".rpc()",
              "const currentCount = await program.account.counter.fetch(counterKeypair.publicKey)",
              "expect(currentCount.count).toEqual(0)",
              "})",
              "it('Increment Counter', async () => {",
              "await program.methods.increment().accounts({ counter: counterKeypair.publicKey }).rpc()",
              "const currentCount = await program.account.counter.fetch(counterKeypair.publicKey)",
              "expect(currentCount.count).toEqual(1)",
              "})",
              "it('Increment Counter Again', async () => {",
              "await program.methods.increment().accounts({ counter: counterKeypair.publicKey }).rpc()",
              "const currentCount = await program.account.counter.fetch(counterKeypair.publicKey)",
              "expect(currentCount.count).toEqual(2)",
              "})",
              "it('Decrement Counter', async () => {",
              "await program.methods.decrement().accounts({ counter: counterKeypair.publicKey }).rpc()",
              "const currentCount = await program.account.counter.fetch(counterKeypair.publicKey)",
              "expect(currentCount.count).toEqual(1)",
              "})",
              "it('Set counter value', async () => {",
              "await program.methods.set(42).accounts({ counter: counterKeypair.publicKey }).rpc()",
              "const currentCount = await program.account.counter.fetch(counterKeypair.publicKey)",
              "expect(currentCount.count).toEqual(42)",
              "})",
              "it('Set close the counter account', async () => {",
              "await program.methods",
              ".close()",
              ".accounts({",
              "payer: payer.publicKey,",
              "counter: counterKeypair.publicKey,",
              "})",
              ".rpc()",
              "// The account should no longer exist, returning null.",
              "const userAccount = await program.account.counter.fetchNullable(counterKeypair.publicKey)",
              "expect(userAccount).toBeNull()",
              "})",
              "})",
            ],
            "isBinary": false,
            "path": "./anchor-app/tests/counter.spec.ts",
          },
          "my-anchor-counter-program.spec.ts": {
            "content": [
              "import * as anchor from '@coral-xyz/anchor'",
              "import { Program } from '@coral-xyz/anchor'",
              "import { Keypair } from '@solana/web3.js'",
              "import { MyAnchorCounterProgram } from "../target/types/my_anchor_counter_program";",
              "describe("my-anchor-counter-program", () => {",
              "// Configure the client to use the local cluster.",
              "const provider = anchor.AnchorProvider.env()",
              "anchor.setProvider(provider)",
              "const payer = provider.wallet as anchor.Wallet",
              "const program = anchor.workspace.MyAnchorCounterProgram as Program<MyAnchorCounterProgram>;",
              "const myAnchorCounterProgramKeypair = Keypair.generate()",
              "it('Initialize MyAnchorCounterProgram', async () => {",
              "await program.methods",
              ".initialize()",
              ".accounts({",
              "myAnchorCounterProgram: myAnchorCounterProgramKeypair.publicKey,",
              "payer: payer.publicKey,",
              "})",
              ".signers([myAnchorCounterProgramKeypair])",
              ".rpc()",
              "const currentCount = await program.account.myAnchorCounterProgram.fetch(myAnchorCounterProgramKeypair.publicKey)",
              "expect(currentCount.count).toEqual(0)",
              "})",
              "it('Increment MyAnchorCounterProgram', async () => {",
              "await program.methods.increment().accounts({ myAnchorCounterProgram: myAnchorCounterProgramKeypair.publicKey }).rpc()",
              "const currentCount = await program.account.myAnchorCounterProgram.fetch(myAnchorCounterProgramKeypair.publicKey)",
              "expect(currentCount.count).toEqual(1)",
              "})",
              "it('Increment MyAnchorCounterProgram Again', async () => {",
              "await program.methods.increment().accounts({ myAnchorCounterProgram: myAnchorCounterProgramKeypair.publicKey }).rpc()",
              "const currentCount = await program.account.myAnchorCounterProgram.fetch(myAnchorCounterProgramKeypair.publicKey)",
              "expect(currentCount.count).toEqual(2)",
              "})",
              "it('Decrement MyAnchorCounterProgram', async () => {",
              "await program.methods.decrement().accounts({ myAnchorCounterProgram: myAnchorCounterProgramKeypair.publicKey }).rpc()",
              "const currentCount = await program.account.myAnchorCounterProgram.fetch(myAnchorCounterProgramKeypair.publicKey)",
              "expect(currentCount.count).toEqual(1)",
              "})",
              "it('Set myAnchorCounterProgram value', async () => {",
              "await program.methods.set(42).accounts({ myAnchorCounterProgram: myAnchorCounterProgramKeypair.publicKey }).rpc()",
              "const currentCount = await program.account.myAnchorCounterProgram.fetch(myAnchorCounterProgramKeypair.publicKey)",
              "expect(currentCount.count).toEqual(42)",
              "})",
              "it('Set close the myAnchorCounterProgram account', async () => {",
              "await program.methods",
              ".close()",
              ".accounts({",
              "payer: payer.publicKey,",
              "myAnchorCounterProgram: myAnchorCounterProgramKeypair.publicKey,",
              "})",
              ".rpc()",
              "// The account should no longer exist, returning null.",
              "const userAccount = await program.account.myAnchorCounterProgram.fetchNullable(myAnchorCounterProgramKeypair.publicKey)",
              "expect(userAccount).toBeNull()",
              "})",
              "})",
            ],
            "isBinary": false,
            "path": "./anchor-app/tests/my-anchor-counter-program.spec.ts",
          },
        },
        "path": "./anchor-app/tests",
      },
      "tsconfig.json": {
        "content": [
          "{",
          ""extends": "../tsconfig.base.json",",
          ""compilerOptions": {",
          ""module": "commonjs"",
          "},",
          ""files": [],",
          ""include": [],",
          ""references": [",
          "{",
          ""path": "./tsconfig.lib.json"",
          "},",
          "{",
          ""path": "./tsconfig.spec.json"",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor-app/tsconfig.json",
      },
      "tsconfig.lib.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""declaration": true,",
          ""types": [",
          ""node"",
          "],",
          ""resolveJsonModule": true,",
          ""allowSyntheticDefaultImports": true",
          "},",
          ""include": [",
          ""src/**/*.ts"",
          "],",
          ""exclude": [",
          ""jest.config.ts",",
          ""src/**/*.spec.ts",",
          ""src/**/*.test.ts"",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor-app/tsconfig.lib.json",
      },
      "tsconfig.spec.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""module": "commonjs",",
          ""types": ["jest", "node"]",
          "},",
          ""include": [",
          ""jest.config.ts",",
          ""src/**/*.test.ts",",
          ""src/**/*.spec.ts",",
          ""src/**/*.d.ts"",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor-app/tsconfig.spec.json",
      },
    },
    "path": "./anchor-app",
  },
  "jest.config.ts": {
    "content": [
      "import { getJestProjectsAsync } from '@nx/jest';",
      "export default async () => ({",
      "projects: await getJestProjectsAsync()",
      "});",
    ],
    "isBinary": false,
    "path": "./jest.config.ts",
  },
  "jest.preset.js": {
    "content": [
      "const nxPreset = require('@nx/jest/preset').default;",
      "module.exports = { ...nxPreset }",
    ],
    "isBinary": false,
    "path": "./jest.preset.js",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": {",
      ""defaultBase": "main"",
      "},",
      ""targetDefaults": {",
      ""build": {",
      ""cache": true",
      "},",
      ""lint": {",
      ""cache": true",
      "},",
      ""@nx/eslint:lint": {",
      ""cache": true,",
      ""inputs": [",
      ""default",",
      ""{workspaceRoot}/.eslintrc.json",",
      ""{workspaceRoot}/.eslintignore",",
      ""{workspaceRoot}/eslint.config.js"",
      "]",
      "},",
      ""@nx/rollup:rollup": {",
      ""cache": true,",
      ""dependsOn": [",
      ""^build"",
      "],",
      ""inputs": [",
      ""default",",
      ""^default"",
      "]",
      "},",
      ""@nx/jest:jest": {",
      ""cache": true,",
      ""inputs": [",
      ""default",",
      ""^default",",
      ""{workspaceRoot}/jest.preset.js"",
      "],",
      ""options": {",
      ""passWithNoTests": true",
      "},",
      ""configurations": {",
      ""ci": {",
      ""ci": true,",
      ""codeCoverage": true",
      "}",
      "}",
      "}",
      "},",
      ""generators": {",
      ""@nx/react": {",
      ""application": {",
      ""babel": true,",
      ""style": "css",",
      ""linter": "eslint",",
      ""bundler": "webpack"",
      "},",
      ""component": {",
      ""style": "css"",
      "},",
      ""library": {",
      ""style": "css",",
      ""linter": "eslint"",
      "}",
      "}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {",
      ""@coral-xyz/anchor": "^0.30.0",",
      ""@solana/spl-token": "0.4.6",",
      ""@solana/wallet-adapter-base": "^0.9.23",",
      ""@solana/wallet-adapter-react": "^0.15.35",",
      ""@solana/wallet-adapter-react-ui": "^0.9.35",",
      ""@solana/web3.js": "1.91.7",",
      ""@tabler/icons-react": "3.2.0",",
      ""@tailwindcss/typography": "0.5.12",",
      ""@tanstack/react-query": "5.31.0",",
      ""bs58": "5.0.0",",
      ""buffer": "6.0.3",",
      ""crypto-browserify": "3.12.0",",
      ""daisyui": "4.10.2",",
      ""jotai": "2.8.0",",
      ""react": "18.2.0",",
      ""react-dom": "18.2.0",",
      ""react-hot-toast": "2.4.1",",
      ""react-router-dom": "6.11.2",",
      ""stream-browserify": "3.0.0",",
      ""tslib": "^2.3.0"",
      "},",
      ""devDependencies": {",
      ""@babel/core": "^7.14.5",",
      ""@babel/preset-react": "^7.14.5",",
      ""@nx/eslint": "18.3.3",",
      ""@nx/eslint-plugin": "18.3.3",",
      ""@nx/jest": "18.3.3",",
      ""@nx/js": "18.3.3",",
      ""@nx/react": "18.3.3",",
      ""@nx/rollup": "18.3.3",",
      ""@nx/web": "18.3.3",",
      ""@nx/webpack": "18.3.3",",
      ""@pmmmwh/react-refresh-webpack-plugin": "^0.5.7",",
      ""@svgr/webpack": "^8.0.1",",
      ""@swc-node/register": "~1.8.0",",
      ""@swc/cli": "~0.1.62",",
      ""@swc/core": "~1.3.85",",
      ""@swc/helpers": "~0.5.2",",
      ""@swc/jest": "0.2.20",",
      ""@types/jest": "^29.4.0",",
      ""@types/node": "18.16.9",",
      ""@types/react": "18.2.33",",
      ""@types/react-dom": "18.2.14",",
      ""@typescript-eslint/eslint-plugin": "^7.3.0",",
      ""@typescript-eslint/parser": "^7.3.0",",
      ""autoprefixer": "10.4.13",",
      ""eslint": "~8.57.0",",
      ""eslint-config-prettier": "^9.0.0",",
      ""eslint-plugin-import": "2.27.5",",
      ""eslint-plugin-jsx-a11y": "6.7.1",",
      ""eslint-plugin-react": "7.32.2",",
      ""eslint-plugin-react-hooks": "4.6.0",",
      ""jest": "^29.4.1",",
      ""jest-environment-jsdom": "^29.4.1",",
      ""postcss": "8.4.21",",
      ""prettier": "^2.6.2",",
      ""react-refresh": "^0.10.0",",
      ""tailwindcss": "3.2.7",",
      ""ts-jest": "^29.1.0",",
      ""ts-node": "10.9.1",",
      ""typescript": "~5.4.2"",
      "},",
      ""scripts": {",
      ""anchor": "nx run anchor-app:anchor",",
      ""anchor-build": "nx run anchor-app:anchor build",",
      ""anchor-localnet": "nx run anchor-app:anchor localnet",",
      ""anchor-test": "nx run anchor-app:anchor test",",
      ""feature": "nx generate @solana-developers/preset-react:feature",",
      ""build": "nx build web-app",",
      ""dev": "nx serve web-app"",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {",
      ""@proj/anchor-app": [",
      ""anchor-app/src/index.ts"",
      "]",
      "}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
  "web-app": {
    "children": {
      ".babelrc": {
        "content": [
          "{",
          ""presets": [",
          "[",
          ""@nx/react/babel",",
          "{",
          ""runtime": "automatic"",
          "}",
          "]",
          "],",
          ""plugins": []",
          "}",
        ],
        "isBinary": false,
        "path": "./web-app/.babelrc",
      },
      ".eslintrc.json": {
        "content": [
          "{",
          ""extends": [",
          ""plugin:@nx/react",",
          ""../.eslintrc.json"",
          "],",
          ""ignorePatterns": [",
          ""!**/*"",
          "],",
          ""overrides": [",
          "{",
          ""files": [",
          ""*.ts",",
          ""*.tsx",",
          ""*.js",",
          ""*.jsx"",
          "],",
          ""rules": {}",
          "},",
          "{",
          ""files": [",
          ""*.ts",",
          ""*.tsx"",
          "],",
          ""rules": {}",
          "},",
          "{",
          ""files": [",
          ""*.js",",
          ""*.jsx"",
          "],",
          ""rules": {}",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./web-app/.eslintrc.json",
      },
      "postcss.config.js": {
        "content": [
          "const { join } = require('path');",
          "// Note: If you use library-specific PostCSS/Tailwind configuration then you should remove the \`postcssConfig\` build",
          "// option from your application's configuration (i.e. project.json).",
          "//",
          "// See: https://nx.dev/guides/using-tailwind-css-in-react#step-4:-applying-configuration-to-libraries",
          "module.exports = {",
          "plugins: {",
          "tailwindcss: {",
          "config: join(__dirname, 'tailwind.config.js'),",
          "},",
          "autoprefixer: {},",
          "},",
          "}",
        ],
        "isBinary": false,
        "path": "./web-app/postcss.config.js",
      },
      "project.json": {
        "content": [
          "{",
          ""name": "web-app",",
          ""$schema": "../node_modules/nx/schemas/project-schema.json",",
          ""sourceRoot": "web-app/src",",
          ""projectType": "application",",
          ""tags": [],",
          ""targets": {",
          ""build": {",
          ""executor": "@nx/webpack:webpack",",
          ""outputs": [",
          ""{options.outputPath}"",
          "],",
          ""defaultConfiguration": "production",",
          ""options": {",
          ""compiler": "babel",",
          ""outputPath": "dist/web-app",",
          ""index": "web-app/src/index.html",",
          ""baseHref": "/",",
          ""main": "web-app/src/main.tsx",",
          ""tsConfig": "web-app/tsconfig.app.json",",
          ""assets": [",
          ""web-app/src/favicon.ico",",
          ""web-app/src/assets"",
          "],",
          ""styles": [",
          ""web-app/src/styles.css"",
          "],",
          ""scripts": [],",
          ""webpackConfig": "web-app/webpack.config.js",",
          ""postcssConfig": "web-app/postcss.config.js"",
          "},",
          ""configurations": {",
          ""development": {",
          ""extractLicenses": false,",
          ""optimization": false,",
          ""sourceMap": true,",
          ""vendorChunk": true",
          "},",
          ""production": {",
          ""fileReplacements": [",
          "{",
          ""replace": "web-app/src/environments/environment.ts",",
          ""with": "web-app/src/environments/environment.prod.ts"",
          "}",
          "],",
          ""optimization": true,",
          ""outputHashing": "all",",
          ""sourceMap": false,",
          ""namedChunks": false,",
          ""extractLicenses": true,",
          ""vendorChunk": false",
          "}",
          "}",
          "},",
          ""serve": {",
          ""executor": "@nx/webpack:dev-server",",
          ""defaultConfiguration": "development",",
          ""options": {",
          ""buildTarget": "web-app:build",",
          ""hmr": true,",
          ""port": 3000",
          "},",
          ""configurations": {",
          ""development": {",
          ""buildTarget": "web-app:build:development"",
          "},",
          ""production": {",
          ""buildTarget": "web-app:build:production",",
          ""hmr": false",
          "}",
          "}",
          "},",
          ""lint": {",
          ""executor": "@nx/eslint:lint"",
          "}",
          "}",
          "}",
        ],
        "isBinary": false,
        "path": "./web-app/project.json",
      },
      "src": {
        "children": {
          "app": {
            "children": {
              "account": {
                "children": {
                  "account-data-access.tsx": {
                    "content": [
                      "import { useConnection, useWallet } from '@solana/wallet-adapter-react'",
                      "import { TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from '@solana/spl-token'",
                      "import {",
                      "Connection,",
                      "LAMPORTS_PER_SOL,",
                      "PublicKey,",
                      "SystemProgram,",
                      "TransactionMessage,",
                      "TransactionSignature,",
                      "VersionedTransaction,",
                      "} from '@solana/web3.js'",
                      "import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'",
                      "import toast from 'react-hot-toast'",
                      "import { useTransactionToast } from '../ui/ui-layout'",
                      "export function useGetBalance({ address }: { address: PublicKey }) {",
                      "const { connection } = useConnection()",
                      "return useQuery({",
                      "queryKey: ['get-balance', { endpoint: connection.rpcEndpoint, address }],",
                      "queryFn: () => connection.getBalance(address),",
                      "})",
                      "}",
                      "export function useGetSignatures({ address }: { address: PublicKey }) {",
                      "const { connection } = useConnection()",
                      "return useQuery({",
                      "queryKey: ['get-signatures', { endpoint: connection.rpcEndpoint, address }],",
                      "queryFn: () => connection.getConfirmedSignaturesForAddress2(address),",
                      "})",
                      "}",
                      "export function useGetTokenAccounts({ address }: { address: PublicKey }) {",
                      "const { connection } = useConnection()",
                      "return useQuery({",
                      "queryKey: ['get-token-accounts', { endpoint: connection.rpcEndpoint, address }],",
                      "queryFn: async () => {",
                      "const [tokenAccounts, token2022Accounts] = await Promise.all([",
                      "connection.getParsedTokenAccountsByOwner(address, {",
                      "programId: TOKEN_PROGRAM_ID,",
                      "}),",
                      "connection.getParsedTokenAccountsByOwner(address, {",
                      "programId: TOKEN_2022_PROGRAM_ID,",
                      "}),",
                      "])",
                      "return [...tokenAccounts.value, ...token2022Accounts.value]",
                      "},",
                      "})",
                      "}",
                      "export function useTransferSol({ address }: { address: PublicKey }) {",
                      "const { connection } = useConnection()",
                      "const transactionToast = useTransactionToast()",
                      "const wallet = useWallet()",
                      "const client = useQueryClient()",
                      "return useMutation({",
                      "mutationKey: ['transfer-sol', { endpoint: connection.rpcEndpoint, address }],",
                      "mutationFn: async (input: { destination: PublicKey; amount: number }) => {",
                      "let signature: TransactionSignature = ''",
                      "try {",
                      "const { transaction, latestBlockhash } = await createTransaction({",
                      "publicKey: address,",
                      "destination: input.destination,",
                      "amount: input.amount,",
                      "connection,",
                      "})",
                      "// Send transaction and await for signature",
                      "signature = await wallet.sendTransaction(transaction, connection)",
                      "// Send transaction and await for signature",
                      "await connection.confirmTransaction({ signature, ...latestBlockhash }, 'confirmed')",
                      "console.log(signature)",
                      "return signature",
                      "} catch (error: unknown) {",
                      "console.log('error', \`Transaction failed! \${error}\`, signature)",
                      "return",
                      "}",
                      "},",
                      "onSuccess: (signature) => {",
                      "if (signature) {",
                      "transactionToast(signature)",
                      "}",
                      "return Promise.all([",
                      "client.invalidateQueries({",
                      "queryKey: ['get-balance', { endpoint: connection.rpcEndpoint, address }],",
                      "}),",
                      "client.invalidateQueries({",
                      "queryKey: ['get-signatures', { endpoint: connection.rpcEndpoint, address }],",
                      "}),",
                      "])",
                      "},",
                      "onError: (error) => {",
                      "toast.error(\`Transaction failed! \${error}\`)",
                      "},",
                      "})",
                      "}",
                      "export function useRequestAirdrop({ address }: { address: PublicKey }) {",
                      "const { connection } = useConnection()",
                      "const transactionToast = useTransactionToast()",
                      "const client = useQueryClient()",
                      "return useMutation({",
                      "mutationKey: ['airdrop', { endpoint: connection.rpcEndpoint, address }],",
                      "mutationFn: async (amount: number = 1) => {",
                      "const [latestBlockhash, signature] = await Promise.all([",
                      "connection.getLatestBlockhash(),",
                      "connection.requestAirdrop(address, amount * LAMPORTS_PER_SOL),",
                      "])",
                      "await connection.confirmTransaction({ signature, ...latestBlockhash }, 'confirmed')",
                      "return signature",
                      "},",
                      "onSuccess: (signature) => {",
                      "transactionToast(signature)",
                      "return Promise.all([",
                      "client.invalidateQueries({",
                      "queryKey: ['get-balance', { endpoint: connection.rpcEndpoint, address }],",
                      "}),",
                      "client.invalidateQueries({",
                      "queryKey: ['get-signatures', { endpoint: connection.rpcEndpoint, address }],",
                      "}),",
                      "])",
                      "},",
                      "})",
                      "}",
                      "async function createTransaction({",
                      "publicKey,",
                      "destination,",
                      "amount,",
                      "connection,",
                      "}: {",
                      "publicKey: PublicKey",
                      "destination: PublicKey",
                      "amount: number",
                      "connection: Connection",
                      "}): Promise<{",
                      "transaction: VersionedTransaction",
                      "latestBlockhash: { blockhash: string; lastValidBlockHeight: number }",
                      "}> {",
                      "// Get the latest blockhash to use in our transaction",
                      "const latestBlockhash = await connection.getLatestBlockhash()",
                      "// Create instructions to send, in this case a simple transfer",
                      "const instructions = [",
                      "SystemProgram.transfer({",
                      "fromPubkey: publicKey,",
                      "toPubkey: destination,",
                      "lamports: amount * LAMPORTS_PER_SOL,",
                      "}),",
                      "]",
                      "// Create a new TransactionMessage with version and compile it to legacy",
                      "const messageLegacy = new TransactionMessage({",
                      "payerKey: publicKey,",
                      "recentBlockhash: latestBlockhash.blockhash,",
                      "instructions,",
                      "}).compileToLegacyMessage()",
                      "// Create a new VersionedTransaction which supports legacy and v0",
                      "const transaction = new VersionedTransaction(messageLegacy)",
                      "return {",
                      "transaction,",
                      "latestBlockhash,",
                      "}",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/account/account-data-access.tsx",
                  },
                  "account-detail-feature.tsx": {
                    "content": [
                      "import { PublicKey } from '@solana/web3.js'",
                      "import { useMemo } from 'react'",
                      "import { useParams } from 'react-router-dom'",
                      "import { ExplorerLink } from '../cluster/cluster-ui'",
                      "import { AppHero, ellipsify } from '../ui/ui-layout'",
                      "import { AccountBalance, AccountButtons, AccountTokens, AccountTransactions } from './account-ui'",
                      "export default function AccountDetailFeature() {",
                      "const params = useParams()",
                      "const address = useMemo(() => {",
                      "if (!params.address) {",
                      "return",
                      "}",
                      "try {",
                      "return new PublicKey(params.address)",
                      "} catch (e) {",
                      "console.log(\`Invalid public key\`, e)",
                      "}",
                      "}, [params])",
                      "if (!address) {",
                      "return <div>Error loading account</div>",
                      "}",
                      "return (",
                      "<div>",
                      "<AppHero",
                      "title={<AccountBalance address={address} />}",
                      "subtitle={",
                      "<div className="my-4">",
                      "<ExplorerLink path={\`account/\${address}\`} label={ellipsify(address.toString())} />",
                      "</div>",
                      "}",
                      ">",
                      "<div className="my-4">",
                      "<AccountButtons address={address} />",
                      "</div>",
                      "</AppHero>",
                      "<div className="space-y-8">",
                      "<AccountTokens address={address} />",
                      "<AccountTransactions address={address} />",
                      "</div>",
                      "</div>",
                      ")",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/account/account-detail-feature.tsx",
                  },
                  "account-list-feature.tsx": {
                    "content": [
                      "import { useWallet } from '@solana/wallet-adapter-react'",
                      "import { WalletButton } from '../solana/solana-provider'",
                      "import { Navigate } from 'react-router-dom'",
                      "export default function AccountListFeature() {",
                      "const { publicKey } = useWallet()",
                      "if (publicKey) {",
                      "return <Navigate to={publicKey.toString()} replace />",
                      "}",
                      "return (",
                      "<div className="hero py-[64px]">",
                      "<div className="hero-content text-center"><WalletButton /></div>",
                      "</div>",
                      ")",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/account/account-list-feature.tsx",
                  },
                  "account-ui.tsx": {
                    "content": [
                      "import { useWallet } from '@solana/wallet-adapter-react'",
                      "import { LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js'",
                      "import { IconRefresh } from '@tabler/icons-react'",
                      "import { useQueryClient } from '@tanstack/react-query'",
                      "import { useMemo, useState } from 'react'",
                      "import { AppModal, ellipsify } from '../ui/ui-layout'",
                      "import { useCluster } from '../cluster/cluster-data-access'",
                      "import { ExplorerLink } from '../cluster/cluster-ui'",
                      "import {",
                      "useGetBalance,",
                      "useGetSignatures,",
                      "useGetTokenAccounts,",
                      "useRequestAirdrop,",
                      "useTransferSol,",
                      "} from './account-data-access'",
                      "export function AccountBalance({ address }: { address: PublicKey }) {",
                      "const query = useGetBalance({ address })",
                      "return (",
                      "<div>",
                      "<h1 className="text-5xl font-bold cursor-pointer" onClick={() => query.refetch()}>",
                      "{query.data ? <BalanceSol balance={query.data} /> : '...'} SOL",
                      "</h1>",
                      "</div>",
                      ")",
                      "}",
                      "export function AccountChecker() {",
                      "const { publicKey } = useWallet()",
                      "if (!publicKey) {",
                      "return null",
                      "}",
                      "return <AccountBalanceCheck address={publicKey} />",
                      "}",
                      "export function AccountBalanceCheck({ address }: { address: PublicKey }) {",
                      "const { cluster } = useCluster()",
                      "const mutation = useRequestAirdrop({ address })",
                      "const query = useGetBalance({ address })",
                      "if (query.isLoading) {",
                      "return null",
                      "}",
                      "if (query.isError || !query.data) {",
                      "return (",
                      "<div className="alert alert-warning text-warning-content/80 rounded-none flex justify-center">",
                      "<span>",
                      "You are connected to <strong>{cluster.name}</strong> but your account is not found on this cluster.",
                      "</span>",
                      "<button",
                      "className="btn btn-xs btn-neutral"",
                      "onClick={() => mutation.mutateAsync(1).catch((err) => console.log(err))}",
                      ">",
                      "Request Airdrop",
                      "</button>",
                      "</div>",
                      ")",
                      "}",
                      "return null",
                      "}",
                      "export function AccountButtons({ address }: { address: PublicKey }) {",
                      "const wallet = useWallet()",
                      "const { cluster } = useCluster()",
                      "const [showAirdropModal, setShowAirdropModal] = useState(false)",
                      "const [showReceiveModal, setShowReceiveModal] = useState(false)",
                      "const [showSendModal, setShowSendModal] = useState(false)",
                      "return (",
                      "<div>",
                      "<ModalAirdrop hide={() => setShowAirdropModal(false)} address={address} show={showAirdropModal} />",
                      "<ModalReceive address={address} show={showReceiveModal} hide={() => setShowReceiveModal(false)} />",
                      "<ModalSend address={address} show={showSendModal} hide={() => setShowSendModal(false)} />",
                      "<div className="space-x-2">",
                      "<button",
                      "disabled={cluster.network?.includes('mainnet')}",
                      "className="btn btn-xs lg:btn-md btn-outline"",
                      "onClick={() => setShowAirdropModal(true)}",
                      ">",
                      "Airdrop",
                      "</button>",
                      "<button",
                      "disabled={wallet.publicKey?.toString() !== address.toString()}",
                      "className="btn btn-xs lg:btn-md btn-outline"",
                      "onClick={() => setShowSendModal(true)}",
                      ">",
                      "Send",
                      "</button>",
                      "<button className="btn btn-xs lg:btn-md btn-outline" onClick={() => setShowReceiveModal(true)}>",
                      "Receive",
                      "</button>",
                      "</div>",
                      "</div>",
                      ")",
                      "}",
                      "export function AccountTokens({ address }: { address: PublicKey }) {",
                      "const [showAll, setShowAll] = useState(false)",
                      "const query = useGetTokenAccounts({ address })",
                      "const client = useQueryClient()",
                      "const items = useMemo(() => {",
                      "if (showAll) return query.data",
                      "return query.data?.slice(0, 5)",
                      "}, [query.data, showAll])",
                      "return (",
                      "<div className="space-y-2">",
                      "<div className="justify-between">",
                      "<div className="flex justify-between">",
                      "<h2 className="text-2xl font-bold">Token Accounts</h2>",
                      "<div className="space-x-2">",
                      "{query.isLoading ? (",
                      "<span className="loading loading-spinner"></span>",
                      ") : (",
                      "<button",
                      "className="btn btn-sm btn-outline"",
                      "onClick={async () => {",
                      "await query.refetch()",
                      "await client.invalidateQueries({",
                      "queryKey: ['getTokenAccountBalance'],",
                      "})",
                      "}}",
                      ">",
                      "<IconRefresh size={16} />",
                      "</button>",
                      ")}",
                      "</div>",
                      "</div>",
                      "</div>",
                      "{query.isError && <pre className="alert alert-error">Error: {query.error?.message.toString()}</pre>}",
                      "{query.isSuccess && (",
                      "<div>",
                      "{query.data.length === 0 ? (",
                      "<div>No token accounts found.</div>",
                      ") : (",
                      "<table className="table border-4 rounded-lg border-separate border-base-300">",
                      "<thead>",
                      "<tr>",
                      "<th>Public Key</th>",
                      "<th>Mint</th>",
                      "<th className="text-right">Balance</th>",
                      "</tr>",
                      "</thead>",
                      "<tbody>",
                      "{items?.map(({ account, pubkey }) => (",
                      "<tr key={pubkey.toString()}>",
                      "<td>",
                      "<div className="flex space-x-2">",
                      "<span className="font-mono">",
                      "<ExplorerLink label={ellipsify(pubkey.toString())} path={\`account/\${pubkey.toString()}\`} />",
                      "</span>",
                      "</div>",
                      "</td>",
                      "<td>",
                      "<div className="flex space-x-2">",
                      "<span className="font-mono">",
                      "<ExplorerLink",
                      "label={ellipsify(account.data.parsed.info.mint)}",
                      "path={\`account/\${account.data.parsed.info.mint.toString()}\`}",
                      "/>",
                      "</span>",
                      "</div>",
                      "</td>",
                      "<td className="text-right">",
                      "<span className="font-mono">",
                      "{account.data.parsed.info.tokenAmount.uiAmount}",
                      "</span>",
                      "</td>",
                      "</tr>",
                      "))}",
                      "{(query.data?.length ?? 0) > 5 && (",
                      "<tr>",
                      "<td colSpan={4} className="text-center">",
                      "<button className="btn btn-xs btn-outline" onClick={() => setShowAll(!showAll)}>",
                      "{showAll ? 'Show Less' : 'Show All'}",
                      "</button>",
                      "</td>",
                      "</tr>",
                      ")}",
                      "</tbody>",
                      "</table>",
                      ")}",
                      "</div>",
                      ")}",
                      "</div>",
                      ")",
                      "}",
                      "export function AccountTransactions({ address }: { address: PublicKey }) {",
                      "const query = useGetSignatures({ address })",
                      "const [showAll, setShowAll] = useState(false)",
                      "const items = useMemo(() => {",
                      "if (showAll) return query.data",
                      "return query.data?.slice(0, 5)",
                      "}, [query.data, showAll])",
                      "return (",
                      "<div className="space-y-2">",
                      "<div className="flex justify-between">",
                      "<h2 className="text-2xl font-bold">Transaction History</h2>",
                      "<div className="space-x-2">",
                      "{query.isLoading ? (",
                      "<span className="loading loading-spinner"></span>",
                      ") : (",
                      "<button className="btn btn-sm btn-outline" onClick={() => query.refetch()}>",
                      "<IconRefresh size={16} />",
                      "</button>",
                      ")}",
                      "</div>",
                      "</div>",
                      "{query.isError && <pre className="alert alert-error">Error: {query.error?.message.toString()}</pre>}",
                      "{query.isSuccess && (",
                      "<div>",
                      "{query.data.length === 0 ? (",
                      "<div>No transactions found.</div>",
                      ") : (",
                      "<table className="table border-4 rounded-lg border-separate border-base-300">",
                      "<thead>",
                      "<tr>",
                      "<th>Signature</th>",
                      "<th className="text-right">Slot</th>",
                      "<th>Block Time</th>",
                      "<th className="text-right">Status</th>",
                      "</tr>",
                      "</thead>",
                      "<tbody>",
                      "{items?.map((item) => (",
                      "<tr key={item.signature}>",
                      "<th className="font-mono">",
                      "<ExplorerLink path={\`tx/\${item.signature}\`} label={ellipsify(item.signature, 8)} />",
                      "</th>",
                      "<td className="font-mono text-right">",
                      "<ExplorerLink path={\`block/\${item.slot}\`} label={item.slot.toString()} />",
                      "</td>",
                      "<td>{new Date((item.blockTime ?? 0) * 1000).toISOString()}</td>",
                      "<td className="text-right">",
                      "{item.err ? (",
                      "<div className="badge badge-error" title={JSON.stringify(item.err)}>",
                      "Failed",
                      "</div>",
                      ") : (",
                      "<div className="badge badge-success">Success</div>",
                      ")}",
                      "</td>",
                      "</tr>",
                      "))}",
                      "{(query.data?.length ?? 0) > 5 && (",
                      "<tr>",
                      "<td colSpan={4} className="text-center">",
                      "<button className="btn btn-xs btn-outline" onClick={() => setShowAll(!showAll)}>",
                      "{showAll ? 'Show Less' : 'Show All'}",
                      "</button>",
                      "</td>",
                      "</tr>",
                      ")}",
                      "</tbody>",
                      "</table>",
                      ")}",
                      "</div>",
                      ")}",
                      "</div>",
                      ")",
                      "}",
                      "function BalanceSol({ balance }: { balance: number }) {",
                      "return <span>{Math.round((balance / LAMPORTS_PER_SOL) * 100000) / 100000}</span>",
                      "}",
                      "function ModalReceive({ hide, show, address }: { hide: () => void; show: boolean; address: PublicKey }) {",
                      "return (",
                      "<AppModal title="Receive" hide={hide} show={show}>",
                      "<p>Receive assets by sending them to your public key:</p>",
                      "<code>{address.toString()}</code>",
                      "</AppModal>",
                      ")",
                      "}",
                      "function ModalAirdrop({ hide, show, address }: { hide: () => void; show: boolean; address: PublicKey }) {",
                      "const mutation = useRequestAirdrop({ address })",
                      "const [amount, setAmount] = useState('2')",
                      "return (",
                      "<AppModal",
                      "hide={hide}",
                      "show={show}",
                      "title="Airdrop"",
                      "submitDisabled={!amount || mutation.isPending}",
                      "submitLabel="Request Airdrop"",
                      "submit={() => mutation.mutateAsync(parseFloat(amount)).then(() => hide())}",
                      ">",
                      "<input",
                      "disabled={mutation.isPending}",
                      "type="number"",
                      "step="any"",
                      "min="1"",
                      "placeholder="Amount"",
                      "className="input input-bordered w-full"",
                      "value={amount}",
                      "onChange={(e) => setAmount(e.target.value)}",
                      "/>",
                      "</AppModal>",
                      ")",
                      "}",
                      "function ModalSend({ hide, show, address }: { hide: () => void; show: boolean; address: PublicKey }) {",
                      "const wallet = useWallet()",
                      "const mutation = useTransferSol({ address })",
                      "const [destination, setDestination] = useState('')",
                      "const [amount, setAmount] = useState('1')",
                      "if (!address || !wallet.sendTransaction) {",
                      "return <div>Wallet not connected</div>",
                      "}",
                      "return (",
                      "<AppModal",
                      "hide={hide}",
                      "show={show}",
                      "title="Send"",
                      "submitDisabled={!destination || !amount || mutation.isPending}",
                      "submitLabel="Send"",
                      "submit={() => {",
                      "mutation",
                      ".mutateAsync({",
                      "destination: new PublicKey(destination),",
                      "amount: parseFloat(amount),",
                      "})",
                      ".then(() => hide())",
                      "}}",
                      ">",
                      "<input",
                      "disabled={mutation.isPending}",
                      "type="text"",
                      "placeholder="Destination"",
                      "className="input input-bordered w-full"",
                      "value={destination}",
                      "onChange={(e) => setDestination(e.target.value)}",
                      "/>",
                      "<input",
                      "disabled={mutation.isPending}",
                      "type="number"",
                      "step="any"",
                      "min="1"",
                      "placeholder="Amount"",
                      "className="input input-bordered w-full"",
                      "value={amount}",
                      "onChange={(e) => setAmount(e.target.value)}",
                      "/>",
                      "</AppModal>",
                      ")",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/account/account-ui.tsx",
                  },
                },
                "path": "./web-app/src/app/account",
              },
              "app-routes.tsx": {
                "content": [
                  "import { lazy } from 'react'",
                  "import { Navigate, RouteObject, useRoutes } from 'react-router-dom'",
                  "import { UiLayout } from './ui/ui-layout'",
                  "const AccountListFeature = lazy(() => import('./account/account-list-feature'))",
                  "const AccountDetailFeature = lazy(() => import('./account/account-detail-feature'))",
                  "const ClusterFeature = lazy(() => import('./cluster/cluster-feature'))",
                  "const DashboardFeature = lazy(() => import('./dashboard/dashboard-feature'))",
                  "const CounterFeature = lazy(() => import('./counter/counter-feature'))",
                  "const MyAnchorCounterProgramFeature = lazy(() => import('./my-anchor-counter-program/my-anchor-counter-program-feature'))",
                  "const links: { label: string, path: string }[] = [",
                  "{ label: 'Account', path: '/account' },",
                  "{ label: 'Clusters', path: '/clusters' },",
                  "{ label: 'Counter Program', path: '/counter' },",
                  "{ label: 'MyAnchorCounterProgram Program', path: '/my-anchor-counter-program' },",
                  "]",
                  "const routes: RouteObject[] = [",
                  "{ path: '/account/', element: <AccountListFeature /> },",
                  "{ path: '/account/:address', element: <AccountDetailFeature /> },",
                  "{ path: '/clusters', element: <ClusterFeature /> },",
                  "{ path: 'counter/*', element: <CounterFeature /> },",
                  "{ path: 'my-anchor-counter-program/*', element: <MyAnchorCounterProgramFeature /> },",
                  "]",
                  "export function AppRoutes() {",
                  "return (",
                  "<UiLayout links={links}>",
                  "{useRoutes([",
                  "{ index: true, element: <Navigate to={'/dashboard'} replace={true} /> },",
                  "{ path: '/dashboard', element: <DashboardFeature /> },",
                  "...routes,",
                  "{ path: '*', element: <Navigate to={'/dashboard'} replace={true} /> },",
                  "])}",
                  "</UiLayout>",
                  ")",
                  "}",
                ],
                "isBinary": false,
                "path": "./web-app/src/app/app-routes.tsx",
              },
              "app.tsx": {
                "content": [
                  "import { AppRoutes } from './app-routes'",
                  "import { ClusterProvider } from './cluster/cluster-data-access'",
                  "import { SolanaProvider } from './solana/solana-provider'",
                  "import { QueryClient, QueryClientProvider } from '@tanstack/react-query'",
                  "const client = new QueryClient()",
                  "export function App() {",
                  "return (",
                  "<QueryClientProvider client={client}>",
                  "<ClusterProvider>",
                  "<SolanaProvider>",
                  "<AppRoutes />",
                  "</SolanaProvider>",
                  "</ClusterProvider>",
                  "</QueryClientProvider>",
                  ")",
                  "}",
                ],
                "isBinary": false,
                "path": "./web-app/src/app/app.tsx",
              },
              "cluster": {
                "children": {
                  "cluster-data-access.tsx": {
                    "content": [
                      "import { clusterApiUrl, Connection } from '@solana/web3.js'",
                      "import { atom, useAtomValue, useSetAtom } from 'jotai'",
                      "import { atomWithStorage } from 'jotai/utils'",
                      "import { createContext, ReactNode, useContext } from 'react'",
                      "import toast from 'react-hot-toast';",
                      "export interface Cluster {",
                      "name: string",
                      "endpoint: string",
                      "network?: ClusterNetwork",
                      "active?: boolean",
                      "}",
                      "export enum ClusterNetwork {",
                      "Mainnet = 'mainnet-beta',",
                      "Testnet = 'testnet',",
                      "Devnet = 'devnet',",
                      "Custom = 'custom',",
                      "}",
                      "// By default, we don't configure the mainnet-beta cluster",
                      "// The endpoint provided by clusterApiUrl('mainnet-beta') does not allow access from the browser due to CORS restrictions",
                      "// To use the mainnet-beta cluster, provide a custom endpoint",
                      "export const defaultClusters: Cluster[] = [",
                      "{",
                      "name: 'devnet',",
                      "endpoint: clusterApiUrl('devnet'),",
                      "network: ClusterNetwork.Devnet,",
                      "},",
                      "{ name: 'local', endpoint: 'http://localhost:8899' },",
                      "{",
                      "name: 'testnet',",
                      "endpoint: clusterApiUrl('testnet'),",
                      "network: ClusterNetwork.Testnet,",
                      "},",
                      "]",
                      "const clusterAtom = atomWithStorage<Cluster>('solana-cluster', defaultClusters[0])",
                      "const clustersAtom = atomWithStorage<Cluster[]>('solana-clusters', defaultClusters)",
                      "const activeClustersAtom = atom<Cluster[]>((get) => {",
                      "const clusters = get(clustersAtom)",
                      "const cluster = get(clusterAtom)",
                      "return clusters.map((item) => ({",
                      "...item,",
                      "active: item.name === cluster.name,",
                      "}))",
                      "})",
                      "const activeClusterAtom = atom<Cluster>((get) => {",
                      "const clusters = get(activeClustersAtom)",
                      "return clusters.find((item) => item.active) || clusters[0]",
                      "})",
                      "export interface ClusterProviderContext {",
                      "cluster: Cluster",
                      "clusters: Cluster[]",
                      "addCluster: (cluster: Cluster) => void",
                      "deleteCluster: (cluster: Cluster) => void",
                      "setCluster: (cluster: Cluster) => void",
                      "getExplorerUrl(path: string): string",
                      "}",
                      "const Context = createContext<ClusterProviderContext>({} as ClusterProviderContext)",
                      "export function ClusterProvider({ children }: { children: ReactNode }) {",
                      "const cluster = useAtomValue(activeClusterAtom)",
                      "const clusters = useAtomValue(activeClustersAtom)",
                      "const setCluster = useSetAtom(clusterAtom)",
                      "const setClusters = useSetAtom(clustersAtom)",
                      "const value: ClusterProviderContext = {",
                      "cluster,",
                      "clusters: clusters.sort((a, b) => (a.name > b.name ? 1 : -1)),",
                      "addCluster: (cluster: Cluster) => {",
                      "try {",
                      "new Connection(cluster.endpoint);",
                      "setClusters([...clusters, cluster]);",
                      "} catch (err) {",
                      "toast.error(\`\${err}\`);",
                      "}",
                      "},",
                      "deleteCluster: (cluster: Cluster) => {",
                      "setClusters(clusters.filter((item) => item.name !== cluster.name))",
                      "},",
                      "setCluster: (cluster: Cluster) => setCluster(cluster),",
                      "getExplorerUrl: (path: string) => \`https://explorer.solana.com/\${path}\${getClusterUrlParam(cluster)}\`,",
                      "}",
                      "return <Context.Provider value={value}>{children}</Context.Provider>",
                      "}",
                      "export function useCluster() {",
                      "return useContext(Context)",
                      "}",
                      "function getClusterUrlParam(cluster: Cluster): string {",
                      "let suffix = ''",
                      "switch (cluster.network) {",
                      "case ClusterNetwork.Devnet:",
                      "suffix = 'devnet'",
                      "break",
                      "case ClusterNetwork.Mainnet:",
                      "suffix = ''",
                      "break",
                      "case ClusterNetwork.Testnet:",
                      "suffix = 'testnet'",
                      "break",
                      "default:",
                      "suffix = \`custom&customUrl=\${encodeURIComponent(cluster.endpoint)}\`",
                      "break",
                      "}",
                      "return suffix.length ? \`?cluster=\${suffix}\` : ''",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/cluster/cluster-data-access.tsx",
                  },
                  "cluster-feature.tsx": {
                    "content": [
                      "import { useState } from 'react'",
                      "import { AppHero } from '../ui/ui-layout'",
                      "import { ClusterUiModal } from './cluster-ui'",
                      "import { ClusterUiTable } from './cluster-ui'",
                      "export default function ClusterFeature() {",
                      "const [showModal, setShowModal] = useState(false)",
                      "return (",
                      "<div>",
                      "<AppHero title="Clusters" subtitle="Manage and select your Solana clusters">",
                      "<ClusterUiModal show={showModal} hideModal={() => setShowModal(false)} />",
                      "<button className="btn btn-xs lg:btn-md btn-primary" onClick={() => setShowModal(true)}>",
                      "Add Cluster",
                      "</button>",
                      "</AppHero>",
                      "<ClusterUiTable />",
                      "</div>",
                      ")",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/cluster/cluster-feature.tsx",
                  },
                  "cluster-ui.tsx": {
                    "content": [
                      "import { useConnection } from '@solana/wallet-adapter-react'",
                      "import { IconTrash } from '@tabler/icons-react'",
                      "import { useQuery } from '@tanstack/react-query'",
                      "import { ReactNode, useState } from 'react'",
                      "import { AppModal } from '../ui/ui-layout'",
                      "import { ClusterNetwork, useCluster } from './cluster-data-access'",
                      "import { Connection } from '@solana/web3.js'",
                      "export function ExplorerLink({ path, label, className }: { path: string; label: string; className?: string }) {",
                      "const { getExplorerUrl } = useCluster()",
                      "return (",
                      "<a",
                      "href={getExplorerUrl(path)}",
                      "target="_blank"",
                      "rel="noopener noreferrer"",
                      "className={className ? className : \`link font-mono\`}",
                      ">",
                      "{label}",
                      "</a>",
                      ")",
                      "}",
                      "export function ClusterChecker({ children }: { children: ReactNode }) {",
                      "const { cluster } = useCluster()",
                      "const { connection } = useConnection()",
                      "const query = useQuery({",
                      "queryKey: ['version', { cluster, endpoint: connection.rpcEndpoint }],",
                      "queryFn: () => connection.getVersion(),",
                      "retry: 1,",
                      "})",
                      "if (query.isLoading) {",
                      "return null",
                      "}",
                      "if (query.isError || !query.data) {",
                      "return (",
                      "<div className="alert alert-warning text-warning-content/80 rounded-none flex justify-center">",
                      "<span>",
                      "Error connecting to cluster <strong>{cluster.name}</strong>",
                      "</span>",
                      "<button className="btn btn-xs btn-neutral" onClick={() => query.refetch()}>",
                      "Refresh",
                      "</button>",
                      "</div>",
                      ")",
                      "}",
                      "return children",
                      "}",
                      "export function ClusterUiSelect() {",
                      "const { clusters, setCluster, cluster } = useCluster()",
                      "return (",
                      "<div className="dropdown dropdown-end">",
                      "<label tabIndex={0} className="btn btn-primary rounded-btn">",
                      "{cluster.name}",
                      "</label>",
                      "<ul tabIndex={0} className="menu dropdown-content z-[1] p-2 shadow bg-base-100 rounded-box w-52 mt-4">",
                      "{clusters.map((item) => (",
                      "<li key={item.name}>",
                      "<button",
                      "className={\`btn btn-sm \${item.active ? 'btn-primary' : 'btn-ghost'}\`}",
                      "onClick={() => setCluster(item)}",
                      ">",
                      "{item.name}",
                      "</button>",
                      "</li>",
                      "))}",
                      "</ul>",
                      "</div>",
                      ")",
                      "}",
                      "export function ClusterUiModal({ hideModal, show }: { hideModal: () => void; show: boolean }) {",
                      "const { addCluster } = useCluster()",
                      "const [name, setName] = useState('')",
                      "const [network, setNetwork] = useState<ClusterNetwork | undefined>()",
                      "const [endpoint, setEndpoint] = useState('')",
                      "return (",
                      "<AppModal",
                      "title={'Add Cluster'}",
                      "hide={hideModal}",
                      "show={show}",
                      "submit={() => {",
                      "try {",
                      "new Connection(endpoint);",
                      "if (name) {",
                      "addCluster({ name, network, endpoint });",
                      "hideModal();",
                      "}",
                      "else {",
                      "console.log("Invalid cluster name");",
                      "}",
                      "}",
                      "catch {",
                      "console.log("Invalid cluster endpoint");",
                      "}",
                      "}}",
                      "submitLabel="Save"",
                      ">",
                      "<input",
                      "type="text"",
                      "placeholder="Name"",
                      "className="input input-bordered w-full"",
                      "value={name}",
                      "onChange={(e) => setName(e.target.value)}",
                      "/>",
                      "<input",
                      "type="text"",
                      "placeholder="Endpoint"",
                      "className="input input-bordered w-full"",
                      "value={endpoint}",
                      "onChange={(e) => setEndpoint(e.target.value)}",
                      "/>",
                      "<select",
                      "className="select select-bordered w-full"",
                      "value={network}",
                      "onChange={(e) => setNetwork(e.target.value as ClusterNetwork)}",
                      ">",
                      "<option value={undefined}>Select a network</option>",
                      "<option value={ClusterNetwork.Devnet}>Devnet</option>",
                      "<option value={ClusterNetwork.Testnet}>Testnet</option>",
                      "<option value={ClusterNetwork.Mainnet}>Mainnet</option>",
                      "</select>",
                      "</AppModal>",
                      ")",
                      "}",
                      "export function ClusterUiTable() {",
                      "const { clusters, setCluster, deleteCluster } = useCluster()",
                      "return (",
                      "<div className="overflow-x-auto">",
                      "<table className="table border-4 border-separate border-base-300">",
                      "<thead>",
                      "<tr>",
                      "<th>Name/ Network / Endpoint</th>",
                      "<th className="text-center">Actions</th>",
                      "</tr>",
                      "</thead>",
                      "<tbody>",
                      "{clusters.map((item) => (",
                      "<tr key={item.name} className={item?.active ? 'bg-base-200' : ''}>",
                      "<td className="space-y-2">",
                      "<div className="whitespace-nowrap space-x-2">",
                      "<span className="text-xl">",
                      "{item?.active ? (",
                      "item.name",
                      ") : (",
                      "<button title="Select cluster" className="link link-secondary" onClick={() => setCluster(item)}>",
                      "{item.name}",
                      "</button>",
                      ")}",
                      "</span>",
                      "</div>",
                      "<span className="text-xs">Network: {item.network ?? 'custom'}</span>",
                      "<div className="whitespace-nowrap text-gray-500 text-xs">{item.endpoint}</div>",
                      "</td>",
                      "<td className="space-x-2 whitespace-nowrap text-center">",
                      "<button",
                      "disabled={item?.active}",
                      "className="btn btn-xs btn-default btn-outline"",
                      "onClick={() => {",
                      "if (!window.confirm('Are you sure?')) return",
                      "deleteCluster(item)",
                      "}}",
                      ">",
                      "<IconTrash size={16} />",
                      "</button>",
                      "</td>",
                      "</tr>",
                      "))}",
                      "</tbody>",
                      "</table>",
                      "</div>",
                      ")",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/cluster/cluster-ui.tsx",
                  },
                },
                "path": "./web-app/src/app/cluster",
              },
              "counter": {
                "children": {
                  "counter-data-access.tsx": {
                    "content": [
                      "import { getCounterProgram, getCounterProgramId } from '@proj/anchor'",
                      "import { Program } from '@coral-xyz/anchor';",
                      "import { useConnection } from '@solana/wallet-adapter-react';",
                      "import { Cluster, Keypair, PublicKey } from '@solana/web3.js';",
                      "import { useMutation, useQuery } from '@tanstack/react-query';",
                      "import { useMemo } from 'react';",
                      "import toast from 'react-hot-toast';",
                      "import { useCluster } from '../cluster/cluster-data-access'",
                      "import { useAnchorProvider } from '../solana/solana-provider'",
                      "import { useTransactionToast } from '../ui/ui-layout'",
                      "export function useCounterProgram() {",
                      "const { connection } = useConnection()",
                      "const { cluster } = useCluster()",
                      "const transactionToast = useTransactionToast()",
                      "const provider = useAnchorProvider()",
                      "const programId = useMemo(",
                      "() => getCounterProgramId(cluster.network as Cluster),",
                      "[cluster]",
                      ");",
                      "const program = getCounterProgram(provider)",
                      "const accounts = useQuery({",
                      "queryKey: ['counter', 'all', { cluster }],",
                      "queryFn: () => program.account.counter.all(),",
                      "})",
                      "const getProgramAccount = useQuery({",
                      "queryKey: ['get-program-account', { cluster }],",
                      "queryFn: () => connection.getParsedAccountInfo(programId),",
                      "})",
                      "const initialize = useMutation({",
                      "mutationKey: ['counter', 'initialize', { cluster }],",
                      "mutationFn: (keypair: Keypair) =>",
                      "program.methods.initialize().accounts({ counter: keypair.publicKey }).signers([keypair]).rpc(),",
                      "onSuccess: (signature) => {",
                      "transactionToast(signature)",
                      "return accounts.refetch()",
                      "},",
                      "onError: () => toast.error('Failed to initialize account'),",
                      "})",
                      "return {",
                      "program,",
                      "programId,",
                      "accounts,",
                      "getProgramAccount,",
                      "initialize,",
                      "}",
                      "}",
                      "export function useCounterProgramAccount({ account }: { account: PublicKey }) {",
                      "const { cluster } = useCluster()",
                      "const transactionToast = useTransactionToast()",
                      "const { program, accounts } = useCounterProgram()",
                      "const accountQuery = useQuery({",
                      "queryKey: ['counter', 'fetch', { cluster, account }],",
                      "queryFn: () => program.account.counter.fetch(account),",
                      "})",
                      "const closeMutation = useMutation({",
                      "mutationKey: ['counter', 'close', { cluster, account }],",
                      "mutationFn: () => program.methods.close().accounts({ counter: account }).rpc(),",
                      "onSuccess: (tx) => {",
                      "transactionToast(tx)",
                      "return accounts.refetch()",
                      "},",
                      "})",
                      "const decrementMutation = useMutation({",
                      "mutationKey: ['counter', 'decrement', { cluster, account }],",
                      "mutationFn: () => program.methods.decrement().accounts({ counter: account }).rpc(),",
                      "onSuccess: (tx) => {",
                      "transactionToast(tx)",
                      "return accountQuery.refetch()",
                      "},",
                      "})",
                      "const incrementMutation = useMutation({",
                      "mutationKey: ['counter', 'increment', { cluster, account }],",
                      "mutationFn: () => program.methods.increment().accounts({ counter: account }).rpc(),",
                      "onSuccess: (tx) => {",
                      "transactionToast(tx)",
                      "return accountQuery.refetch()",
                      "},",
                      "})",
                      "const setMutation = useMutation({",
                      "mutationKey: ['counter', 'set', { cluster, account }],",
                      "mutationFn: (value: number) => program.methods.set(value).accounts({ counter: account }).rpc(),",
                      "onSuccess: (tx) => {",
                      "transactionToast(tx)",
                      "return accountQuery.refetch()",
                      "},",
                      "})",
                      "return {",
                      "accountQuery,",
                      "closeMutation,",
                      "decrementMutation,",
                      "incrementMutation,",
                      "setMutation,",
                      "}",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/counter/counter-data-access.tsx",
                  },
                  "counter-feature.tsx": {
                    "content": [
                      "import { useWallet } from '@solana/wallet-adapter-react';",
                      "import { WalletButton } from '../solana/solana-provider';",
                      "import { AppHero, ellipsify } from '../ui/ui-layout';",
                      "import { ExplorerLink } from '../cluster/cluster-ui';",
                      "import { useCounterProgram } from './counter-data-access';",
                      "import { CounterCreate, CounterList } from './counter-ui';",
                      "export default function CounterFeature() {",
                      "const { publicKey } = useWallet()",
                      "const { programId } = useCounterProgram();",
                      "return publicKey ? (",
                      "<div>",
                      "<AppHero",
                      "title="Counter"",
                      "subtitle={",
                      "'Create a new account by clicking the "Create" button. The state of a account is stored on-chain and can be manipulated by calling the program\\'s methods (increment, decrement, set, and close).'",
                      "}",
                      ">",
                      "<p className="mb-6">",
                      "<ExplorerLink path={\`account/\${programId}\`} label={ellipsify(programId.toString())} />",
                      "</p>",
                      "<CounterCreate />",
                      "</AppHero>",
                      "<CounterList />",
                      "</div>",
                      ") : (",
                      "<div className="max-w-4xl mx-auto">",
                      "<div className="hero py-[64px]">",
                      "<div className="hero-content text-center"><WalletButton /></div>",
                      "</div>",
                      "</div>",
                      ")",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/counter/counter-feature.tsx",
                  },
                  "counter-ui.tsx": {
                    "content": [
                      "import { Keypair, PublicKey } from '@solana/web3.js'",
                      "import { useMemo } from 'react'",
                      "import { ellipsify } from '../ui/ui-layout'",
                      "import { ExplorerLink } from '../cluster/cluster-ui'",
                      "import { useCounterProgram, useCounterProgramAccount } from './counter-data-access'",
                      "export function CounterCreate() {",
                      "const { initialize } = useCounterProgram()",
                      "return (",
                      "<button",
                      "className="btn btn-xs lg:btn-md btn-primary"",
                      "onClick={() => initialize.mutateAsync(Keypair.generate())}",
                      "disabled={initialize.isPending}",
                      ">",
                      "Create {initialize.isPending && '...'}",
                      "</button>",
                      ")",
                      "}",
                      "export function CounterList() {",
                      "const { accounts, getProgramAccount } = useCounterProgram()",
                      "if (getProgramAccount.isLoading) {",
                      "return <span className="loading loading-spinner loading-lg"></span>",
                      "}",
                      "if (!getProgramAccount.data?.value) {",
                      "return (",
                      "<div className="alert alert-info flex justify-center">",
                      "<span>Program account not found. Make sure you have deployed the program and are on the correct cluster.</span>",
                      "</div>",
                      ")",
                      "}",
                      "return (",
                      "<div className={'space-y-6'}>",
                      "{accounts.isLoading ? (",
                      "<span className="loading loading-spinner loading-lg"></span>",
                      ") : accounts.data?.length ? (",
                      "<div className="grid md:grid-cols-2 gap-4">",
                      "{accounts.data?.map((account) => (",
                      "<CounterCard key={account.publicKey.toString()} account={account.publicKey} />",
                      "))}",
                      "</div>",
                      ") : (",
                      "<div className="text-center">",
                      "<h2 className={'text-2xl'}>No accounts</h2>",
                      "No accounts found. Create one above to get started.",
                      "</div>",
                      ")}",
                      "</div>",
                      ")",
                      "}",
                      "function CounterCard({ account }: { account: PublicKey }) {",
                      "const {",
                      "accountQuery,",
                      "incrementMutation,",
                      "setMutation,",
                      "decrementMutation,",
                      "closeMutation,",
                      "} = useCounterProgramAccount({ account })",
                      "const count = useMemo(() => accountQuery.data?.count ?? 0, [accountQuery.data?.count])",
                      "return accountQuery.isLoading ? (",
                      "<span className="loading loading-spinner loading-lg"></span>",
                      ") : (",
                      "<div className="card card-bordered border-base-300 border-4 text-neutral-content">",
                      "<div className="card-body items-center text-center">",
                      "<div className="space-y-6">",
                      "<h2 className="card-title justify-center text-3xl cursor-pointer" onClick={() => accountQuery.refetch()}>",
                      "{count}",
                      "</h2>",
                      "<div className="card-actions justify-around">",
                      "<button",
                      "className="btn btn-xs lg:btn-md btn-outline"",
                      "onClick={() => incrementMutation.mutateAsync()}",
                      "disabled={incrementMutation.isPending}",
                      ">",
                      "Increment",
                      "</button>",
                      "<button",
                      "className="btn btn-xs lg:btn-md btn-outline"",
                      "onClick={() => {",
                      "const value = window.prompt('Set value to:', count.toString() ?? '0')",
                      "if (!value || parseInt(value) === count || isNaN(parseInt(value))) {",
                      "return",
                      "}",
                      "return setMutation.mutateAsync(parseInt(value))",
                      "}}",
                      "disabled={setMutation.isPending}",
                      ">",
                      "Set",
                      "</button>",
                      "<button",
                      "className="btn btn-xs lg:btn-md btn-outline"",
                      "onClick={() => decrementMutation.mutateAsync()}",
                      "disabled={decrementMutation.isPending}",
                      ">",
                      "Decrement",
                      "</button>",
                      "</div>",
                      "<div className="text-center space-y-4">",
                      "<p>",
                      "<ExplorerLink path={\`account/\${account}\`} label={ellipsify(account.toString())} />",
                      "</p>",
                      "<button",
                      "className="btn btn-xs btn-secondary btn-outline"",
                      "onClick={() => {",
                      "if (!window.confirm('Are you sure you want to close this account?')) {",
                      "return",
                      "}",
                      "return closeMutation.mutateAsync()",
                      "}}",
                      "disabled={closeMutation.isPending}",
                      ">",
                      "Close",
                      "</button>",
                      "</div>",
                      "</div>",
                      "</div>",
                      "</div>",
                      ")",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/counter/counter-ui.tsx",
                  },
                },
                "path": "./web-app/src/app/counter",
              },
              "dashboard": {
                "children": {
                  "dashboard-feature.tsx": {
                    "content": [
                      "import { AppHero } from '../ui/ui-layout'",
                      "const links: { label: string; href: string }[] = [",
                      "{ label: 'Solana Docs', href: 'https://docs.solana.com/' },",
                      "{ label: 'Solana Faucet', href: 'https://faucet.solana.com/' },",
                      "{ label: 'Solana Cookbook', href: 'https://solanacookbook.com/' },",
                      "{ label: 'Solana Stack Overflow', href: 'https://solana.stackexchange.com/' },",
                      "{ label: 'Solana Developers GitHub', href: 'https://github.com/solana-developers/' },",
                      "]",
                      "export default function DashboardFeature() {",
                      "return (",
                      "<div>",
                      "<AppHero title="gm" subtitle="Say hi to your new Solana dApp." />",
                      "<div className="max-w-xl mx-auto py-6 sm:px-6 lg:px-8 text-center">",
                      "<div className="space-y-2">",
                      "<p>Here are some helpful links to get you started.</p>",
                      "{links.map((link, index) => (",
                      "<div key={index}>",
                      "<a href={link.href} className="link" target="_blank" rel="noopener noreferrer">",
                      "{link.label}",
                      "</a>",
                      "</div>",
                      "))}",
                      "</div>",
                      "</div>",
                      "</div>",
                      ")",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/dashboard/dashboard-feature.tsx",
                  },
                },
                "path": "./web-app/src/app/dashboard",
              },
              "my-anchor-counter-program": {
                "children": {
                  "my-anchor-counter-program-data-access.tsx": {
                    "content": [
                      "import { getMyAnchorCounterProgramProgram, getMyAnchorCounterProgramProgramId } from '@proj/anchor'",
                      "import { Program } from '@coral-xyz/anchor';",
                      "import { useConnection } from '@solana/wallet-adapter-react';",
                      "import { Cluster, Keypair, PublicKey } from '@solana/web3.js';",
                      "import { useMutation, useQuery } from '@tanstack/react-query';",
                      "import { useMemo } from 'react';",
                      "import toast from 'react-hot-toast';",
                      "import { useCluster } from '../cluster/cluster-data-access'",
                      "import { useAnchorProvider } from '../solana/solana-provider'",
                      "import { useTransactionToast } from '../ui/ui-layout'",
                      "export function useMyAnchorCounterProgramProgram() {",
                      "const { connection } = useConnection()",
                      "const { cluster } = useCluster()",
                      "const transactionToast = useTransactionToast()",
                      "const provider = useAnchorProvider()",
                      "const programId = useMemo(",
                      "() => getMyAnchorCounterProgramProgramId(cluster.network as Cluster),",
                      "[cluster]",
                      ");",
                      "const program = getMyAnchorCounterProgramProgram(provider)",
                      "const accounts = useQuery({",
                      "queryKey: ['my-anchor-counter-program', 'all', { cluster }],",
                      "queryFn: () => program.account.myAnchorCounterProgram.all(),",
                      "})",
                      "const getProgramAccount = useQuery({",
                      "queryKey: ['get-program-account', { cluster }],",
                      "queryFn: () => connection.getParsedAccountInfo(programId),",
                      "})",
                      "const initialize = useMutation({",
                      "mutationKey: ['my-anchor-counter-program', 'initialize', { cluster }],",
                      "mutationFn: (keypair: Keypair) =>",
                      "program.methods.initialize().accounts({ myAnchorCounterProgram: keypair.publicKey }).signers([keypair]).rpc(),",
                      "onSuccess: (signature) => {",
                      "transactionToast(signature)",
                      "return accounts.refetch()",
                      "},",
                      "onError: () => toast.error('Failed to initialize account'),",
                      "})",
                      "return {",
                      "program,",
                      "programId,",
                      "accounts,",
                      "getProgramAccount,",
                      "initialize,",
                      "}",
                      "}",
                      "export function useMyAnchorCounterProgramProgramAccount({ account }: { account: PublicKey }) {",
                      "const { cluster } = useCluster()",
                      "const transactionToast = useTransactionToast()",
                      "const { program, accounts } = useMyAnchorCounterProgramProgram()",
                      "const accountQuery = useQuery({",
                      "queryKey: ['my-anchor-counter-program', 'fetch', { cluster, account }],",
                      "queryFn: () => program.account.myAnchorCounterProgram.fetch(account),",
                      "})",
                      "const closeMutation = useMutation({",
                      "mutationKey: ['my-anchor-counter-program', 'close', { cluster, account }],",
                      "mutationFn: () => program.methods.close().accounts({ myAnchorCounterProgram: account }).rpc(),",
                      "onSuccess: (tx) => {",
                      "transactionToast(tx)",
                      "return accounts.refetch()",
                      "},",
                      "})",
                      "const decrementMutation = useMutation({",
                      "mutationKey: ['my-anchor-counter-program', 'decrement', { cluster, account }],",
                      "mutationFn: () => program.methods.decrement().accounts({ myAnchorCounterProgram: account }).rpc(),",
                      "onSuccess: (tx) => {",
                      "transactionToast(tx)",
                      "return accountQuery.refetch()",
                      "},",
                      "})",
                      "const incrementMutation = useMutation({",
                      "mutationKey: ['my-anchor-counter-program', 'increment', { cluster, account }],",
                      "mutationFn: () => program.methods.increment().accounts({ myAnchorCounterProgram: account }).rpc(),",
                      "onSuccess: (tx) => {",
                      "transactionToast(tx)",
                      "return accountQuery.refetch()",
                      "},",
                      "})",
                      "const setMutation = useMutation({",
                      "mutationKey: ['my-anchor-counter-program', 'set', { cluster, account }],",
                      "mutationFn: (value: number) => program.methods.set(value).accounts({ myAnchorCounterProgram: account }).rpc(),",
                      "onSuccess: (tx) => {",
                      "transactionToast(tx)",
                      "return accountQuery.refetch()",
                      "},",
                      "})",
                      "return {",
                      "accountQuery,",
                      "closeMutation,",
                      "decrementMutation,",
                      "incrementMutation,",
                      "setMutation,",
                      "}",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/my-anchor-counter-program/my-anchor-counter-program-data-access.tsx",
                  },
                  "my-anchor-counter-program-feature.tsx": {
                    "content": [
                      "import { useWallet } from '@solana/wallet-adapter-react';",
                      "import { WalletButton } from '../solana/solana-provider';",
                      "import { AppHero, ellipsify } from '../ui/ui-layout';",
                      "import { ExplorerLink } from '../cluster/cluster-ui';",
                      "import { useMyAnchorCounterProgramProgram } from './my-anchor-counter-program-data-access';",
                      "import { MyAnchorCounterProgramCreate, MyAnchorCounterProgramList } from './my-anchor-counter-program-ui';",
                      "export default function MyAnchorCounterProgramFeature() {",
                      "const { publicKey } = useWallet()",
                      "const { programId } = useMyAnchorCounterProgramProgram();",
                      "return publicKey ? (",
                      "<div>",
                      "<AppHero",
                      "title="MyAnchorCounterProgram"",
                      "subtitle={",
                      "'Create a new account by clicking the "Create" button. The state of a account is stored on-chain and can be manipulated by calling the program\\'s methods (increment, decrement, set, and close).'",
                      "}",
                      ">",
                      "<p className="mb-6">",
                      "<ExplorerLink path={\`account/\${programId}\`} label={ellipsify(programId.toString())} />",
                      "</p>",
                      "<MyAnchorCounterProgramCreate />",
                      "</AppHero>",
                      "<MyAnchorCounterProgramList />",
                      "</div>",
                      ") : (",
                      "<div className="max-w-4xl mx-auto">",
                      "<div className="hero py-[64px]">",
                      "<div className="hero-content text-center"><WalletButton /></div>",
                      "</div>",
                      "</div>",
                      ")",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/my-anchor-counter-program/my-anchor-counter-program-feature.tsx",
                  },
                  "my-anchor-counter-program-ui.tsx": {
                    "content": [
                      "import { Keypair, PublicKey } from '@solana/web3.js'",
                      "import { useMemo } from 'react'",
                      "import { ellipsify } from '../ui/ui-layout'",
                      "import { ExplorerLink } from '../cluster/cluster-ui'",
                      "import { useMyAnchorCounterProgramProgram, useMyAnchorCounterProgramProgramAccount } from './my-anchor-counter-program-data-access'",
                      "export function MyAnchorCounterProgramCreate() {",
                      "const { initialize } = useMyAnchorCounterProgramProgram()",
                      "return (",
                      "<button",
                      "className="btn btn-xs lg:btn-md btn-primary"",
                      "onClick={() => initialize.mutateAsync(Keypair.generate())}",
                      "disabled={initialize.isPending}",
                      ">",
                      "Create {initialize.isPending && '...'}",
                      "</button>",
                      ")",
                      "}",
                      "export function MyAnchorCounterProgramList() {",
                      "const { accounts, getProgramAccount } = useMyAnchorCounterProgramProgram()",
                      "if (getProgramAccount.isLoading) {",
                      "return <span className="loading loading-spinner loading-lg"></span>",
                      "}",
                      "if (!getProgramAccount.data?.value) {",
                      "return (",
                      "<div className="alert alert-info flex justify-center">",
                      "<span>Program account not found. Make sure you have deployed the program and are on the correct cluster.</span>",
                      "</div>",
                      ")",
                      "}",
                      "return (",
                      "<div className={'space-y-6'}>",
                      "{accounts.isLoading ? (",
                      "<span className="loading loading-spinner loading-lg"></span>",
                      ") : accounts.data?.length ? (",
                      "<div className="grid md:grid-cols-2 gap-4">",
                      "{accounts.data?.map((account) => (",
                      "<MyAnchorCounterProgramCard key={account.publicKey.toString()} account={account.publicKey} />",
                      "))}",
                      "</div>",
                      ") : (",
                      "<div className="text-center">",
                      "<h2 className={'text-2xl'}>No accounts</h2>",
                      "No accounts found. Create one above to get started.",
                      "</div>",
                      ")}",
                      "</div>",
                      ")",
                      "}",
                      "function MyAnchorCounterProgramCard({ account }: { account: PublicKey }) {",
                      "const {",
                      "accountQuery,",
                      "incrementMutation,",
                      "setMutation,",
                      "decrementMutation,",
                      "closeMutation,",
                      "} = useMyAnchorCounterProgramProgramAccount({ account })",
                      "const count = useMemo(() => accountQuery.data?.count ?? 0, [accountQuery.data?.count])",
                      "return accountQuery.isLoading ? (",
                      "<span className="loading loading-spinner loading-lg"></span>",
                      ") : (",
                      "<div className="card card-bordered border-base-300 border-4 text-neutral-content">",
                      "<div className="card-body items-center text-center">",
                      "<div className="space-y-6">",
                      "<h2 className="card-title justify-center text-3xl cursor-pointer" onClick={() => accountQuery.refetch()}>",
                      "{count}",
                      "</h2>",
                      "<div className="card-actions justify-around">",
                      "<button",
                      "className="btn btn-xs lg:btn-md btn-outline"",
                      "onClick={() => incrementMutation.mutateAsync()}",
                      "disabled={incrementMutation.isPending}",
                      ">",
                      "Increment",
                      "</button>",
                      "<button",
                      "className="btn btn-xs lg:btn-md btn-outline"",
                      "onClick={() => {",
                      "const value = window.prompt('Set value to:', count.toString() ?? '0')",
                      "if (!value || parseInt(value) === count || isNaN(parseInt(value))) {",
                      "return",
                      "}",
                      "return setMutation.mutateAsync(parseInt(value))",
                      "}}",
                      "disabled={setMutation.isPending}",
                      ">",
                      "Set",
                      "</button>",
                      "<button",
                      "className="btn btn-xs lg:btn-md btn-outline"",
                      "onClick={() => decrementMutation.mutateAsync()}",
                      "disabled={decrementMutation.isPending}",
                      ">",
                      "Decrement",
                      "</button>",
                      "</div>",
                      "<div className="text-center space-y-4">",
                      "<p>",
                      "<ExplorerLink path={\`account/\${account}\`} label={ellipsify(account.toString())} />",
                      "</p>",
                      "<button",
                      "className="btn btn-xs btn-secondary btn-outline"",
                      "onClick={() => {",
                      "if (!window.confirm('Are you sure you want to close this account?')) {",
                      "return",
                      "}",
                      "return closeMutation.mutateAsync()",
                      "}}",
                      "disabled={closeMutation.isPending}",
                      ">",
                      "Close",
                      "</button>",
                      "</div>",
                      "</div>",
                      "</div>",
                      "</div>",
                      ")",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/my-anchor-counter-program/my-anchor-counter-program-ui.tsx",
                  },
                },
                "path": "./web-app/src/app/my-anchor-counter-program",
              },
              "solana": {
                "children": {
                  "solana-provider.tsx": {
                    "content": [
                      "import { AnchorProvider } from '@coral-xyz/anchor'",
                      "import { WalletError } from '@solana/wallet-adapter-base'",
                      "import {",
                      "AnchorWallet, useConnection, useWallet,",
                      "ConnectionProvider,",
                      "WalletProvider,",
                      "} from '@solana/wallet-adapter-react'",
                      "import { WalletModalProvider, WalletMultiButton } from '@solana/wallet-adapter-react-ui'",
                      "import { ReactNode, useCallback, useMemo } from 'react'",
                      "import { useCluster } from '../cluster/cluster-data-access'",
                      "require('@solana/wallet-adapter-react-ui/styles.css')",
                      "export const WalletButton = WalletMultiButton;",
                      "export function SolanaProvider({ children }: { children: ReactNode }) {",
                      "const { cluster } = useCluster()",
                      "const endpoint = useMemo(() => cluster.endpoint, [cluster])",
                      "const onError = useCallback((error: WalletError) => {",
                      "console.error(error)",
                      "}, [])",
                      "return (",
                      "<ConnectionProvider endpoint={endpoint}>",
                      "<WalletProvider wallets={[]} onError={onError} autoConnect={true}>",
                      "<WalletModalProvider>{children}</WalletModalProvider>",
                      "</WalletProvider>",
                      "</ConnectionProvider>",
                      ")",
                      "}",
                      "export function useAnchorProvider() {",
                      "const { connection } = useConnection()",
                      "const wallet = useWallet()",
                      "return new AnchorProvider(connection, wallet as AnchorWallet, { commitment: 'confirmed' })",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/solana/solana-provider.tsx",
                  },
                },
                "path": "./web-app/src/app/solana",
              },
              "ui": {
                "children": {
                  "ui-layout.tsx": {
                    "content": [
                      "import { WalletButton } from '../solana/solana-provider'",
                      "import * as React from 'react'",
                      "import { ReactNode, Suspense, useEffect, useRef } from 'react'",
                      "import { Link, useLocation } from 'react-router-dom'",
                      "import { AccountChecker } from '../account/account-ui'",
                      "import { ClusterChecker, ClusterUiSelect, ExplorerLink } from '../cluster/cluster-ui'",
                      "import toast, { Toaster } from 'react-hot-toast'",
                      "export function UiLayout({ children, links }: { children: ReactNode, links: { label: string, path: string }[] }) {",
                      "const { pathname } = useLocation()",
                      "return (",
                      "<div className="h-full flex flex-col">",
                      "<div className="navbar bg-base-300 text-neutral-content flex-col md:flex-row space-y-2 md:space-y-0">",
                      "<div className="flex-1">",
                      "<Link className="btn btn-ghost normal-case text-xl"",
                      "to="/"",
                      ">",
                      "<img className="h-4 md:h-6" alt="Logo"",
                      "src="/assets/logo.png"",
                      "/>",
                      "</Link>",
                      "<ul className="menu menu-horizontal px-1 space-x-2">",
                      "{links.map(({ label, path }) => (",
                      "<li key={path}>",
                      "<Link className={pathname.startsWith(path) ? 'active' : ''}",
                      "to={path}",
                      ">",
                      "{label}",
                      "</Link>",
                      "</li>",
                      "))}",
                      "</ul>",
                      "</div>",
                      "<div className="flex-none space-x-2">",
                      "<WalletButton />",
                      "<ClusterUiSelect />",
                      "</div>",
                      "</div>",
                      "<ClusterChecker>",
                      "<AccountChecker />",
                      "</ClusterChecker>",
                      "<div className="flex-grow mx-4 lg:mx-auto">",
                      "<Suspense",
                      "fallback={",
                      "<div className="text-center my-32">",
                      "<span className="loading loading-spinner loading-lg"></span>",
                      "</div>",
                      "}",
                      ">",
                      "{children}",
                      "</Suspense>",
                      "<Toaster position="bottom-right" />",
                      "</div>",
                      "<footer className="footer footer-center p-4 bg-base-300 text-base-content">",
                      "<aside>",
                      "<p>",
                      "Generated by{' '}",
                      "<a",
                      "className="link hover:text-white"",
                      "href="https://github.com/solana-developers/create-solana-dapp"",
                      "target="_blank"",
                      "rel="noopener noreferrer"",
                      ">",
                      "create-solana-dapp",
                      "</a>",
                      "</p>",
                      "</aside>",
                      "</footer>",
                      "</div>",
                      ")",
                      "}",
                      "export function AppModal({",
                      "children,",
                      "title,",
                      "hide,",
                      "show,",
                      "submit,",
                      "submitDisabled,",
                      "submitLabel,",
                      "}: {",
                      "children: ReactNode",
                      "title: string",
                      "hide: () => void",
                      "show: boolean",
                      "submit?: () => void",
                      "submitDisabled?: boolean",
                      "submitLabel?: string",
                      "}) {",
                      "const dialogRef = useRef<HTMLDialogElement | null>(null)",
                      "useEffect(() => {",
                      "if (!dialogRef.current) return",
                      "if (show) {",
                      "dialogRef.current.showModal()",
                      "} else {",
                      "dialogRef.current.close()",
                      "}",
                      "}, [show, dialogRef])",
                      "return (",
                      "<dialog className="modal" ref={dialogRef}>",
                      "<div className="modal-box space-y-5">",
                      "<h3 className="font-bold text-lg">{title}</h3>",
                      "{children}",
                      "<div className="modal-action">",
                      "<div className="join space-x-2">",
                      "{submit ? (",
                      "<button className="btn btn-xs lg:btn-md btn-primary" onClick={submit} disabled={submitDisabled}>",
                      "{submitLabel || 'Save'}",
                      "</button>",
                      ") : null}",
                      "<button onClick={hide} className="btn">",
                      "Close",
                      "</button>",
                      "</div>",
                      "</div>",
                      "</div>",
                      "</dialog>",
                      ")",
                      "}",
                      "export function AppHero({",
                      "children,",
                      "title,",
                      "subtitle,",
                      "}: {",
                      "children?: ReactNode",
                      "title: ReactNode",
                      "subtitle: ReactNode",
                      "}) {",
                      "return (",
                      "<div className="hero py-[64px]">",
                      "<div className="hero-content text-center">",
                      "<div className="max-w-2xl">",
                      "{typeof title === 'string' ? <h1 className="text-5xl font-bold">{title}</h1> : title}",
                      "{typeof subtitle === 'string' ? <p className="py-6">{subtitle}</p> : subtitle}",
                      "{children}",
                      "</div>",
                      "</div>",
                      "</div>",
                      ")",
                      "}",
                      "export function ellipsify(str = '', len = 4) {",
                      "if (str.length > 30) {",
                      "return str.substring(0, len) + '..' + str.substring(str.length - len, str.length)",
                      "}",
                      "return str",
                      "}",
                      "export function useTransactionToast() {",
                      "return (signature: string) => {",
                      "toast.success(",
                      "<div className={'text-center'}>",
                      "<div className="text-lg">Transaction sent</div>",
                      "<ExplorerLink path={\`tx/\${signature}\`} label={'View Transaction'} className="btn btn-xs btn-primary" />",
                      "</div>,",
                      ")",
                      "}",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./web-app/src/app/ui/ui-layout.tsx",
                  },
                },
                "path": "./web-app/src/app/ui",
              },
            },
            "path": "./web-app/src/app",
          },
          "assets": {
            "children": {
              ".gitkeep": {
                "content": [],
                "isBinary": false,
                "path": "./web-app/src/assets/.gitkeep",
              },
              "logo.png": {
                "content": null,
                "isBinary": true,
                "path": "./web-app/src/assets/logo.png",
              },
            },
            "path": "./web-app/src/assets",
          },
          "favicon.ico": {
            "content": null,
            "isBinary": true,
            "path": "./web-app/src/favicon.ico",
          },
          "index.html": {
            "content": [
              "<!DOCTYPE html>",
              "<html lang="en">",
              "<head>",
              "<meta charset="utf-8" />",
              "<title>WebApp</title>",
              "<base href="/" />",
              "<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />",
              "<link rel="icon" type="image/x-icon" href="favicon.ico" />",
              "</head>",
              "<body>",
              "<div id="root"></div>",
              "</body>",
              "</html>",
            ],
            "isBinary": false,
            "path": "./web-app/src/index.html",
          },
          "main.tsx": {
            "content": [
              "import { StrictMode } from 'react'",
              "import * as ReactDOM from 'react-dom/client'",
              "import { BrowserRouter } from 'react-router-dom'",
              "import './polyfills'",
              "import { App } from './app/app'",
              "const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement)",
              "root.render(",
              "<StrictMode>",
              "<BrowserRouter>",
              "<App />",
              "</BrowserRouter>",
              "</StrictMode>,",
              ")",
            ],
            "isBinary": false,
            "path": "./web-app/src/main.tsx",
          },
          "polyfills.ts": {
            "content": [
              "import * as buffer from 'buffer';",
              "window.Buffer = buffer.Buffer;",
            ],
            "isBinary": false,
            "path": "./web-app/src/polyfills.ts",
          },
          "styles.css": {
            "content": [
              "@tailwind base;",
              "@tailwind components;",
              "@tailwind utilities;",
              "@tailwind base;",
              "@tailwind components;",
              "@tailwind utilities;",
              "html,",
              "body,",
              "#root {",
              "height: 100%;",
              "}",
              ".wallet-adapter-button-trigger {",
              "background: rgb(100, 26, 230) !important;",
              "border-radius: 8px !important;",
              "padding-left: 16px !important;",
              "padding-right: 16px !important;",
              "}",
              ".wallet-adapter-dropdown-list,",
              ".wallet-adapter-button {",
              "font-family: inherit !important;",
              "}",
            ],
            "isBinary": false,
            "path": "./web-app/src/styles.css",
          },
        },
        "path": "./web-app/src",
      },
      "tailwind.config.js": {
        "content": [
          "const { createGlobPatternsForDependencies } = require('@nx/react/tailwind');",
          "const { join } = require('path');",
          "/** @type {import('tailwindcss').Config} */",
          "module.exports = {",
          "content: [",
          "join(",
          "__dirname,",
          "'{src,pages,components,app}/**/*!(*.stories|*.spec).{ts,tsx,html}'",
          "),",
          "...createGlobPatternsForDependencies(__dirname),",
          "],",
          "theme: {",
          "extend: {},",
          "},",
          "plugins: [require('daisyui')],",
          "};",
        ],
        "isBinary": false,
        "path": "./web-app/tailwind.config.js",
      },
      "tsconfig.app.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""types": [",
          ""node",",
          ""@nx/react/typings/cssmodule.d.ts",",
          ""@nx/react/typings/image.d.ts"",
          "]",
          "},",
          ""exclude": ["jest.config.ts","src/**/*.spec.ts", "src/**/*.test.ts", "src/**/*.spec.tsx", "src/**/*.test.tsx", "src/**/*.spec.js", "src/**/*.test.js", "src/**/*.spec.jsx", "src/**/*.test.jsx"],",
          ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
          "}",
        ],
        "isBinary": false,
        "path": "./web-app/tsconfig.app.json",
      },
      "tsconfig.json": {
        "content": [
          "{",
          ""compilerOptions": {",
          ""jsx": "react-jsx",",
          ""allowJs": false,",
          ""esModuleInterop": false,",
          ""allowSyntheticDefaultImports": true,",
          ""strict": true",
          "},",
          ""files": [],",
          ""include": [],",
          ""references": [",
          "{",
          ""path": "./tsconfig.app.json"",
          "}",
          "],",
          ""extends": "../tsconfig.base.json"",
          "}",
        ],
        "isBinary": false,
        "path": "./web-app/tsconfig.json",
      },
      "webpack.config.js": {
        "content": [
          "const { composePlugins, withNx } = require('@nx/webpack');",
          "const { withReact } = require('@nx/react');",
          "// Nx plugins for webpack.",
          "module.exports = composePlugins(withNx(), withReact(), (config) => {",
          "// Update the webpack config as needed here.",
          "// e.g. \`config.plugins.push(new MyPlugin())\`",
          "config.ignoreWarnings = [/Failed to parse source map/];",
          "config.resolve.fallback = {",
          "crypto: require.resolve('crypto-browserify'),",
          "stream: require.resolve('stream-browserify'),",
          "};",
          "return config;",
          "});",
        ],
        "isBinary": false,
        "path": "./web-app/webpack.config.js",
      },
    },
    "path": "./web-app",
  },
}
`;
