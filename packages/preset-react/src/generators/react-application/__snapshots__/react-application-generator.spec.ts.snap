// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`react-application generator custom apps should generate app without anchor 1`] = `
{
  ".eslintignore": {
    "content": [
      "node_modules",
    ],
    "isBinary": false,
    "path": "./.eslintignore",
  },
  ".eslintrc.json": {
    "content": [
      "{",
      ""root": true,",
      ""ignorePatterns": ["**/*"],",
      ""plugins": ["@nx"],",
      ""overrides": [",
      "{",
      ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
      ""rules": {",
      ""@nx/enforce-module-boundaries": [",
      ""error",",
      "{",
      ""enforceBuildableLibDependency": true,",
      ""allow": [],",
      ""depConstraints": [",
      "{",
      ""sourceTag": "*",",
      ""onlyDependOnLibsWithTags": ["*"]",
      "}",
      "]",
      "}",
      "]",
      "}",
      "},",
      "{",
      ""files": ["*.ts", "*.tsx"],",
      ""extends": ["plugin:@nx/typescript"],",
      ""rules": {}",
      "},",
      "{",
      ""files": ["*.js", "*.jsx"],",
      ""extends": ["plugin:@nx/javascript"],",
      ""rules": {}",
      "}",
      "]",
      "}",
    ],
    "isBinary": false,
    "path": "./.eslintrc.json",
  },
  ".prettierignore": {
    "content": [
      "# Add files here to ignore them from prettier formatting",
      "/dist",
      "/coverage",
      "/.nx/cache",
    ],
    "isBinary": false,
    "path": "./.prettierignore",
  },
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": {",
      ""defaultBase": "main"",
      "},",
      ""targetDefaults": {",
      ""build": {",
      ""cache": true",
      "},",
      ""lint": {",
      ""cache": true,",
      ""inputs": [",
      ""default",",
      ""{workspaceRoot}/.eslintrc.json",",
      ""{workspaceRoot}/.eslintignore",",
      ""{workspaceRoot}/eslint.config.js"",
      "]",
      "},",
      ""e2e": {",
      ""cache": true",
      "}",
      "},",
      ""generators": {",
      ""@nx/react": {",
      ""application": {",
      ""style": "css",",
      ""linter": "eslint",",
      ""bundler": "webpack",",
      ""babel": true",
      "},",
      ""component": {",
      ""style": "css"",
      "},",
      ""library": {",
      ""style": "css",",
      ""linter": "eslint"",
      "}",
      "}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {",
      ""@solana/wallet-adapter-base": "^0.9.23",",
      ""@solana/wallet-adapter-react": "^0.15.35",",
      ""@solana/wallet-adapter-react-ui": "^0.9.34",",
      ""@solana/wallet-adapter-solflare": "^0.6.28",",
      ""@solana/wallet-adapter-unsafe-burner": "^0.1.7",",
      ""@solana/web3.js": "1.87.2",",
      ""@swc/helpers": "~0.5.2",",
      ""bs58": "5.0.0",",
      ""react": "18.2.0",",
      ""react-dom": "18.2.0",",
      ""react-router-dom": "6.11.2",",
      ""tslib": "^2.3.0"",
      "},",
      ""devDependencies": {",
      ""@babel/core": "^7.14.5",",
      ""@babel/preset-react": "^7.14.5",",
      ""@nx/eslint": "17.1.3",",
      ""@nx/eslint-plugin": "17.1.3",",
      ""@nx/js": "17.1.3",",
      ""@nx/react": "17.1.3",",
      ""@nx/webpack": "17.1.3",",
      ""@pmmmwh/react-refresh-webpack-plugin": "^0.5.7",",
      ""@svgr/webpack": "^8.0.1",",
      ""@swc-node/register": "~1.6.7",",
      ""@swc/cli": "~0.1.62",",
      ""@swc/core": "~1.3.85",",
      ""@testing-library/react": "14.0.0",",
      ""@types/node": "18.14.2",",
      ""@types/react": "18.2.33",",
      ""@types/react-dom": "18.2.14",",
      ""@typescript-eslint/eslint-plugin": "^6.9.1",",
      ""@typescript-eslint/parser": "^6.9.1",",
      ""eslint": "~8.46.0",",
      ""eslint-config-prettier": "^9.0.0",",
      ""eslint-plugin-import": "2.27.5",",
      ""eslint-plugin-jsx-a11y": "6.7.1",",
      ""eslint-plugin-react": "7.32.2",",
      ""eslint-plugin-react-hooks": "4.6.0",",
      ""prettier": "^2.6.2",",
      ""react-refresh": "^0.10.0",",
      ""typescript": "~5.2.2",",
      ""url-loader": "^4.1.1"",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test-app": {
    "children": {
      ".babelrc": {
        "content": [
          "{",
          ""presets": [",
          "[",
          ""@nx/react/babel",",
          "{",
          ""runtime": "automatic"",
          "}",
          "]",
          "],",
          ""plugins": []",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/.babelrc",
      },
      ".eslintrc.json": {
        "content": [
          "{",
          ""extends": ["plugin:@nx/react", "../.eslintrc.json"],",
          ""ignorePatterns": ["!**/*"],",
          ""overrides": [",
          "{",
          ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.js", "*.jsx"],",
          ""rules": {}",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/.eslintrc.json",
      },
      "project.json": {
        "content": [
          "{",
          ""name": "test-app",",
          ""$schema": "../node_modules/nx/schemas/project-schema.json",",
          ""sourceRoot": "test-app/src",",
          ""projectType": "application",",
          ""targets": {",
          ""build": {",
          ""executor": "@nx/webpack:webpack",",
          ""outputs": ["{options.outputPath}"],",
          ""defaultConfiguration": "production",",
          ""options": {",
          ""compiler": "babel",",
          ""outputPath": "dist/test-app",",
          ""index": "test-app/src/index.html",",
          ""baseHref": "/",",
          ""main": "test-app/src/main.tsx",",
          ""tsConfig": "test-app/tsconfig.app.json",",
          ""assets": ["test-app/src/favicon.ico", "test-app/src/assets"],",
          ""styles": ["test-app/src/styles.css"],",
          ""scripts": [],",
          ""isolatedConfig": true,",
          ""webpackConfig": "test-app/webpack.config.js"",
          "},",
          ""configurations": {",
          ""development": {",
          ""extractLicenses": false,",
          ""optimization": false,",
          ""sourceMap": true,",
          ""vendorChunk": true",
          "},",
          ""production": {",
          ""fileReplacements": [",
          "{",
          ""replace": "test-app/src/environments/environment.ts",",
          ""with": "test-app/src/environments/environment.prod.ts"",
          "}",
          "],",
          ""optimization": true,",
          ""outputHashing": "all",",
          ""sourceMap": false,",
          ""namedChunks": false,",
          ""extractLicenses": true,",
          ""vendorChunk": false",
          "}",
          "}",
          "},",
          ""serve": {",
          ""executor": "@nx/webpack:dev-server",",
          ""defaultConfiguration": "development",",
          ""options": {",
          ""buildTarget": "test-app:build",",
          ""hmr": true",
          "},",
          ""configurations": {",
          ""development": {",
          ""buildTarget": "test-app:build:development"",
          "},",
          ""production": {",
          ""buildTarget": "test-app:build:production",",
          ""hmr": false",
          "}",
          "}",
          "},",
          ""lint": {",
          ""executor": "@nx/eslint:lint",",
          ""outputs": ["{options.outputFile}"],",
          ""options": {",
          ""lintFilePatterns": ["test-app/**/*.{ts,tsx,js,jsx}"]",
          "}",
          "}",
          "},",
          ""tags": []",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/project.json",
      },
      "src": {
        "children": {
          "app": {
            "children": {
              "app-layout.tsx": {
                "content": [
                  "import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';",
                  "import { ReactNode } from 'react';",
                  "import { Link, useLocation } from 'react-router-dom';",
                  "export function AppLayout({ children }: { children: ReactNode }) {",
                  "const { pathname } = useLocation();",
                  "return (",
                  "<div>",
                  "<div>",
                  "<div>",
                  "<Link to="/">@solana-developers/preset-react</Link>",
                  "</div>",
                  "<div>",
                  "<WalletMultiButton />",
                  "</div>",
                  "</div>",
                  "<div>{children}</div>",
                  "<footer>",
                  "<aside>",
                  "<p>",
                  "Powered by{' '}",
                  "<a",
                  "href="https://github.com/solana-developers/create-solana-dapp"",
                  "target="_blank"",
                  "rel="noopener noreferrer"",
                  ">",
                  "create-solana-dapp",
                  "</a>",
                  "</p>",
                  "</aside>",
                  "</footer>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/app-layout.tsx",
              },
              "app-routes.tsx": {
                "content": [
                  "import { useRoutes } from 'react-router-dom';",
                  "export function AppRoutes() {",
                  "return useRoutes([",
                  "{",
                  "index: true,",
                  "path: '/',",
                  "element: <div>Index</div>,",
                  "},",
                  "]);",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/app-routes.tsx",
              },
              "app.tsx": {
                "content": [
                  "import { AppLayout } from './app-layout';",
                  "import { AppRoutes } from './app-routes';",
                  "import { SolanaProvider } from './solana-provider';",
                  "export function App() {",
                  "return (",
                  "<SolanaProvider>",
                  "<AppLayout>",
                  "<AppRoutes />",
                  "</AppLayout>",
                  "</SolanaProvider>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/app.tsx",
              },
              "solana-provider.tsx": {
                "content": [
                  "import { WalletError } from '@solana/wallet-adapter-base';",
                  "import {",
                  "ConnectionProvider,",
                  "WalletProvider,",
                  "} from '@solana/wallet-adapter-react';",
                  "import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';",
                  "import { SolflareWalletAdapter } from '@solana/wallet-adapter-solflare';",
                  "import { UnsafeBurnerWalletAdapter } from '@solana/wallet-adapter-unsafe-burner';",
                  "import { Cluster, clusterApiUrl } from '@solana/web3.js';",
                  "import {",
                  "createContext,",
                  "ReactNode,",
                  "useCallback,",
                  "useContext,",
                  "useMemo,",
                  "useState,",
                  "} from 'react';",
                  "require('@solana/wallet-adapter-react-ui/styles.css');",
                  "export interface SolanaProviderContext {",
                  "cluster: Cluster;",
                  "endpoint: string;",
                  "setCluster?: (cluster: Cluster) => void;",
                  "}",
                  "const Context = createContext<SolanaProviderContext>(",
                  "{} as SolanaProviderContext",
                  ");",
                  "export function SolanaProvider({ children }: { children: ReactNode }) {",
                  "const [cluster, setCluster] = useState<Cluster>('devnet');",
                  "const endpoint = useMemo(() => clusterApiUrl(cluster), [cluster]);",
                  "const wallets = useMemo(",
                  "() => [new UnsafeBurnerWalletAdapter(), new SolflareWalletAdapter()],",
                  "[cluster]",
                  ");",
                  "const onError = useCallback((error: WalletError) => {",
                  "console.error(error);",
                  "}, []);",
                  "const value: SolanaProviderContext = {",
                  "cluster,",
                  "endpoint,",
                  "setCluster,",
                  "};",
                  "return (",
                  "<ConnectionProvider endpoint={endpoint}>",
                  "<WalletProvider wallets={wallets} onError={onError} autoConnect={true}>",
                  "<WalletModalProvider>",
                  "<Context.Provider value={value}>{children}</Context.Provider>",
                  "</WalletModalProvider>",
                  "</WalletProvider>",
                  "</ConnectionProvider>",
                  ");",
                  "}",
                  "export function useSolana() {",
                  "return useContext(Context);",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/solana-provider.tsx",
              },
            },
            "path": "./test-app/src/app",
          },
          "assets": {
            "children": {
              ".gitkeep": {
                "content": [],
                "isBinary": false,
                "path": "./test-app/src/assets/.gitkeep",
              },
            },
            "path": "./test-app/src/assets",
          },
          "environments": {
            "children": {
              "environment.prod.ts": {
                "content": [
                  "export const environment = {",
                  "production: true,",
                  "};",
                ],
                "isBinary": false,
                "path": "./test-app/src/environments/environment.prod.ts",
              },
              "environment.ts": {
                "content": [
                  "// This file can be replaced during build by using the \`fileReplacements\` array.",
                  "// When building for production, this file is replaced with \`environment.prod.ts\`.",
                  "export const environment = {",
                  "production: false,",
                  "};",
                ],
                "isBinary": false,
                "path": "./test-app/src/environments/environment.ts",
              },
            },
            "path": "./test-app/src/environments",
          },
          "favicon.ico": {
            "content": null,
            "isBinary": true,
            "path": "./test-app/src/favicon.ico",
          },
          "index.html": {
            "content": [
              "<!DOCTYPE html>",
              "<html lang="en">",
              "<head>",
              "<meta charset="utf-8" />",
              "<title>@solana-developers/preset-react</title>",
              "<base href="/" />",
              "<meta",
              "name="viewport"",
              "content="width=device-width, initial-scale=1, maximum-scale=1"",
              "/>",
              "<link rel="icon" type="image/x-icon" href="favicon.ico" />",
              "</head>",
              "<body>",
              "<div id="root"></div>",
              "</body>",
              "</html>",
            ],
            "isBinary": false,
            "path": "./test-app/src/index.html",
          },
          "main.tsx": {
            "content": [
              "import { StrictMode } from 'react';",
              "import * as ReactDOM from 'react-dom/client';",
              "import { BrowserRouter } from 'react-router-dom';",
              "import { App } from './app/app';",
              "const root = ReactDOM.createRoot(",
              "document.getElementById('root') as HTMLElement",
              ");",
              "root.render(",
              "<StrictMode>",
              "<BrowserRouter>",
              "<App />",
              "</BrowserRouter>",
              "</StrictMode>",
              ");",
            ],
            "isBinary": false,
            "path": "./test-app/src/main.tsx",
          },
          "styles.css": {
            "content": [
              "html,",
              "body,",
              "#root {",
              "height: 100%;",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/src/styles.css",
          },
        },
        "path": "./test-app/src",
      },
      "tsconfig.app.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""types": [",
          ""node",",
          ""@nx/react/typings/cssmodule.d.ts",",
          ""@nx/react/typings/image.d.ts"",
          "]",
          "},",
          ""exclude": [",
          ""jest.config.ts",",
          ""src/**/*.spec.ts",",
          ""src/**/*.test.ts",",
          ""src/**/*.spec.tsx",",
          ""src/**/*.test.tsx",",
          ""src/**/*.spec.js",",
          ""src/**/*.test.js",",
          ""src/**/*.spec.jsx",",
          ""src/**/*.test.jsx"",
          "],",
          ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/tsconfig.app.json",
      },
      "tsconfig.json": {
        "content": [
          "{",
          ""compilerOptions": {",
          ""jsx": "react-jsx",",
          ""allowJs": false,",
          ""esModuleInterop": false,",
          ""allowSyntheticDefaultImports": true,",
          ""strict": true",
          "},",
          ""files": [],",
          ""include": [],",
          ""references": [",
          "{",
          ""path": "./tsconfig.app.json"",
          "}",
          "],",
          ""extends": "../tsconfig.base.json"",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/tsconfig.json",
      },
      "webpack.config.js": {
        "content": [
          "const { composePlugins, withNx } = require('@nx/webpack');",
          "const { withReact } = require('@nx/react');",
          "// Nx plugins for webpack.",
          "module.exports = composePlugins(withNx(), withReact(), (config) => {",
          "// Update the webpack config as needed here.",
          "// e.g. \`config.plugins.push(new MyPlugin())\`",
          "config.ignoreWarnings = [/Failed to parse source map/];",
          "return config;",
          "});",
        ],
        "isBinary": false,
        "path": "./test-app/webpack.config.js",
      },
    },
    "path": "./test-app",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`react-application generator default apps should generate default app with "none" ui 1`] = `
{
  ".eslintignore": {
    "content": [
      "node_modules",
    ],
    "isBinary": false,
    "path": "./.eslintignore",
  },
  ".eslintrc.json": {
    "content": [
      "{",
      ""root": true,",
      ""ignorePatterns": ["**/*"],",
      ""plugins": ["@nx"],",
      ""overrides": [",
      "{",
      ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
      ""rules": {",
      ""@nx/enforce-module-boundaries": [",
      ""error",",
      "{",
      ""enforceBuildableLibDependency": true,",
      ""allow": [],",
      ""depConstraints": [",
      "{",
      ""sourceTag": "*",",
      ""onlyDependOnLibsWithTags": ["*"]",
      "}",
      "]",
      "}",
      "]",
      "}",
      "},",
      "{",
      ""files": ["*.ts", "*.tsx"],",
      ""extends": ["plugin:@nx/typescript"],",
      ""rules": {}",
      "},",
      "{",
      ""files": ["*.js", "*.jsx"],",
      ""extends": ["plugin:@nx/javascript"],",
      ""rules": {}",
      "}",
      "]",
      "}",
    ],
    "isBinary": false,
    "path": "./.eslintrc.json",
  },
  ".prettierignore": {
    "content": [
      "# Add files here to ignore them from prettier formatting",
      "/dist",
      "/coverage",
      "/.nx/cache",
      ".anchor",
      "target",
      "node_modules",
      "dist",
      "tmp",
      "build",
      "test-ledger",
    ],
    "isBinary": false,
    "path": "./.prettierignore",
  },
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "anchor": {
    "children": {
      ".eslintrc.json": {
        "content": [
          "{",
          ""extends": ["../.eslintrc.json"],",
          ""ignorePatterns": ["!**/*"],",
          ""overrides": [",
          "{",
          ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.js", "*.jsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.json"],",
          ""parser": "jsonc-eslint-parser",",
          ""rules": {",
          ""@nx/dependency-checks": [",
          ""error",",
          "{",
          ""ignoredFiles": ["{projectRoot}/rollup.config.{js,ts,mjs,mts}"]",
          "}",
          "]",
          "}",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/.eslintrc.json",
      },
      ".swcrc": {
        "content": [
          "{",
          ""jsc": {",
          ""target": "es2017",",
          ""parser": {",
          ""syntax": "typescript",",
          ""decorators": true,",
          ""dynamicImport": true",
          "},",
          ""transform": {",
          ""decoratorMetadata": true,",
          ""legacyDecorator": true",
          "},",
          ""keepClassNames": true,",
          ""externalHelpers": true,",
          ""loose": true",
          "},",
          ""module": {",
          ""type": "es6"",
          "},",
          ""sourceMaps": true,",
          ""exclude": [",
          ""jest.config.ts",",
          "".*\\\\.spec.tsx?$",",
          "".*\\\\.test.tsx?$",",
          ""./src/jest-setup.ts$",",
          ""./**/jest-setup.ts$",",
          "".*.js$"",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/.swcrc",
      },
      "Anchor.toml": {
        "content": [
          "[features]",
          "seeds = false",
          "skip-lint = false",
          "[programs.localnet]",
          "counter = "EuJfgknXicf6iZASeagt5U6XDDPpLTQrvWPW31vgAwo8"",
          "[registry]",
          "url = "https://api.apr.dev"",
          "[provider]",
          "cluster = "Localnet"",
          "wallet = "~/.config/solana/id.json"",
          "[scripts]",
          "test = "../node_modules/.bin/nx run anchor:jest"",
          "[test.validator]",
          "bind_address = "127.0.0.1"",
        ],
        "isBinary": false,
        "path": "./anchor/Anchor.toml",
      },
      "Cargo.lock": {
        "content": null,
        "isBinary": true,
        "path": "./anchor/Cargo.lock",
      },
      "Cargo.toml": {
        "content": [
          "[workspace]",
          "members = [",
          ""programs/*"",
          "]",
          "resolver = "2"",
          "[profile.release]",
          "overflow-checks = true",
          "lto = "fat"",
          "codegen-units = 1",
          "[profile.release.build-override]",
          "opt-level = 3",
          "incremental = false",
          "codegen-units = 1",
        ],
        "isBinary": false,
        "path": "./anchor/Cargo.toml",
      },
      "README.md": {
        "content": [
          "# anchor",
          "This library was generated with [Nx](https://nx.dev).",
          "## Building",
          "Run \`nx build anchor\` to build the library.",
          "## Running unit tests",
          "Run \`nx test anchor\` to execute the unit tests via [Jest](https://jestjs.io).",
        ],
        "isBinary": false,
        "path": "./anchor/README.md",
      },
      "jest.config.ts": {
        "content": [
          "/* eslint-disable */",
          "import { readFileSync } from 'fs';",
          "// Reading the SWC compilation config and remove the "exclude"",
          "// for the test files to be compiled by SWC",
          "const { exclude: _, ...swcJestConfig } = JSON.parse(",
          "readFileSync(\`\${__dirname}/.swcrc\`, 'utf-8')",
          ");",
          "// disable .swcrc look-up by SWC core because we're passing in swcJestConfig ourselves.",
          "// If we do not disable this, SWC Core will read .swcrc and won't transform our test files due to "exclude"",
          "if (swcJestConfig.swcrc === undefined) {",
          "swcJestConfig.swcrc = false;",
          "}",
          "// Uncomment if using global setup/teardown files being transformed via swc",
          "// https://nx.dev/packages/jest/documents/overview#global-setup/teardown-with-nx-libraries",
          "// jest needs EsModule Interop to find the default exported setup/teardown functions",
          "// swcJestConfig.module.noInterop = false;",
          "export default {",
          "displayName: 'anchor',",
          "preset: '../jest.preset.js',",
          "transform: {",
          "'^.+\\\\.[tj]s$': ['@swc/jest', swcJestConfig],",
          "},",
          "moduleFileExtensions: ['ts', 'js', 'html'],",
          "testEnvironment: '',",
          "coverageDirectory: '../coverage/anchor',",
          "};",
        ],
        "isBinary": false,
        "path": "./anchor/jest.config.ts",
      },
      "migrations": {
        "children": {
          "deploy.ts": {
            "content": [
              "// Migrations are an early feature. Currently, they're nothing more than this",
              "// single deploy script that's invoked from the CLI, injecting a provider",
              "// configured from the workspace's Anchor.toml.",
              "import * as anchor from '@coral-xyz/anchor';",
              "module.exports = async function (provider) {",
              "// Configure client to use the provider.",
              "anchor.setProvider(provider);",
              "// Add your deploy script here.",
              "};",
            ],
            "isBinary": false,
            "path": "./anchor/migrations/deploy.ts",
          },
        },
        "path": "./anchor/migrations",
      },
      "package.json": {
        "content": [
          "{",
          ""name": "@proj/anchor",",
          ""version": "0.0.1",",
          ""dependencies": {},",
          ""type": "commonjs",",
          ""main": "./index.cjs",",
          ""module": "./index.js"",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/package.json",
      },
      "programs": {
        "children": {
          "counter": {
            "children": {
              "Cargo.toml": {
                "content": [
                  "[package]",
                  "name = "counter"",
                  "version = "0.1.0"",
                  "description = "Created with Anchor"",
                  "edition = "2021"",
                  "[lib]",
                  "crate-type = ["cdylib", "lib"]",
                  "name = "counter"",
                  "[features]",
                  "no-entrypoint = []",
                  "no-idl = []",
                  "no-log-ix-name = []",
                  "cpi = ["no-entrypoint"]",
                  "default = []",
                  "[dependencies]",
                  "anchor-lang = "0.28.0"",
                ],
                "isBinary": false,
                "path": "./anchor/programs/counter/Cargo.toml",
              },
              "Xargo.toml": {
                "content": [
                  "[target.bpfel-unknown-unknown.dependencies.std]",
                  "features = []",
                ],
                "isBinary": false,
                "path": "./anchor/programs/counter/Xargo.toml",
              },
              "src": {
                "children": {
                  "lib.rs": {
                    "content": [
                      "#![allow(clippy::result_large_err)]",
                      "use anchor_lang::prelude::*;",
                      "declare_id!("CounNZdmsQmWh7uVngV9FXW2dZ6zAgbJyYsvBpqbykg");",
                      "#[program]",
                      "pub mod counter {",
                      "use super::*;",
                      "pub fn close_counter(_ctx: Context<CloseCounter>) -> Result<()> {",
                      "Ok(())",
                      "}",
                      "pub fn decrement(ctx: Context<Update>) -> Result<()> {",
                      "ctx.accounts.counter.count = ctx.accounts.counter.count.checked_sub(1).unwrap();",
                      "Ok(())",
                      "}",
                      "pub fn increment(ctx: Context<Update>) -> Result<()> {",
                      "ctx.accounts.counter.count = ctx.accounts.counter.count.checked_add(1).unwrap();",
                      "Ok(())",
                      "}",
                      "pub fn initialize_counter(_ctx: Context<InitializeCounter>) -> Result<()> {",
                      "Ok(())",
                      "}",
                      "pub fn set(ctx: Context<Update>, value: u8) -> Result<()> {",
                      "ctx.accounts.counter.count = value.clone();",
                      "Ok(())",
                      "}",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct InitializeCounter<'info> {",
                      "#[account(mut)]",
                      "pub payer: Signer<'info>,",
                      "#[account(",
                      "init,",
                      "space = 8 + Counter::INIT_SPACE,",
                      "payer = payer",
                      ")]",
                      "pub counter: Account<'info, Counter>,",
                      "pub system_program: Program<'info, System>,",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct CloseCounter<'info> {",
                      "#[account(mut)]",
                      "pub payer: Signer<'info>,",
                      "#[account(",
                      "mut,",
                      "close = payer, // close account and return lamports to payer",
                      ")]",
                      "pub counter: Account<'info, Counter>,",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct Update<'info> {",
                      "#[account(mut)]",
                      "pub counter: Account<'info, Counter>,",
                      "}",
                      "#[account]",
                      "#[derive(InitSpace)]",
                      "pub struct Counter {",
                      "count: u8,",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./anchor/programs/counter/src/lib.rs",
                  },
                },
                "path": "./anchor/programs/counter/src",
              },
            },
            "path": "./anchor/programs/counter",
          },
        },
        "path": "./anchor/programs",
      },
      "project.json": {
        "content": [
          "{",
          ""name": "anchor",",
          ""$schema": "../node_modules/nx/schemas/project-schema.json",",
          ""sourceRoot": "anchor/src",",
          ""projectType": "library",",
          ""targets": {",
          ""build": {",
          ""executor": "@nx/rollup:rollup",",
          ""outputs": ["{options.outputPath}"],",
          ""options": {",
          ""outputPath": "dist/anchor",",
          ""main": "anchor/src/index.ts",",
          ""tsConfig": "anchor/tsconfig.lib.json",",
          ""assets": [],",
          ""project": "anchor/package.json",",
          ""compiler": "swc",",
          ""format": ["cjs", "esm"]",
          "}",
          "},",
          ""lint": {",
          ""executor": "@nx/eslint:lint",",
          ""outputs": ["{options.outputFile}"],",
          ""options": {",
          ""lintFilePatterns": ["anchor/**/*.ts", "anchor/package.json"]",
          "}",
          "},",
          ""test": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor",",
          ""commands": ["anchor test"],",
          ""parallel": false",
          "}",
          "},",
          ""anchor": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor",",
          ""commands": ["anchor"],",
          ""parallel": false",
          "}",
          "},",
          ""localnet": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor",",
          ""commands": ["anchor localnet"],",
          ""parallel": false",
          "}",
          "},",
          ""jest": {",
          ""executor": "@nx/jest:jest",",
          ""outputs": ["{workspaceRoot}/coverage/{projectRoot}"],",
          ""options": {",
          ""jestConfig": "anchor/jest.config.ts"",
          "}",
          "}",
          "},",
          ""tags": []",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/project.json",
      },
      "src": {
        "children": {
          "counter-exports.ts": {
            "content": [
              "import { Program } from '@coral-xyz/anchor';",
              "import { IDL as CounterIDL } from '../target/types/counter';",
              "import type { Counter } from '../target/types/counter';",
              "export { Counter, CounterIDL };",
              "export type CounterProgram = Program<Counter>;",
            ],
            "isBinary": false,
            "path": "./anchor/src/counter-exports.ts",
          },
          "index.ts": {
            "content": [
              "export * from './counter-exports';",
            ],
            "isBinary": false,
            "path": "./anchor/src/index.ts",
          },
        },
        "path": "./anchor/src",
      },
      "target": {
        "children": {
          "idl": {
            "children": {
              "counter.json": {
                "content": [
                  "{",
                  ""version": "0.1.0",",
                  ""name": "counter",",
                  ""instructions": [",
                  "{",
                  ""name": "closeCounter",",
                  ""accounts": [",
                  "{",
                  ""name": "payer",",
                  ""isMut": true,",
                  ""isSigner": true",
                  "},",
                  "{",
                  ""name": "counter",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "decrement",",
                  ""accounts": [",
                  "{",
                  ""name": "counter",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "increment",",
                  ""accounts": [",
                  "{",
                  ""name": "counter",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "initializeCounter",",
                  ""accounts": [",
                  "{",
                  ""name": "payer",",
                  ""isMut": true,",
                  ""isSigner": true",
                  "},",
                  "{",
                  ""name": "counter",",
                  ""isMut": true,",
                  ""isSigner": true",
                  "},",
                  "{",
                  ""name": "systemProgram",",
                  ""isMut": false,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "set",",
                  ""accounts": [",
                  "{",
                  ""name": "counter",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": [",
                  "{",
                  ""name": "value",",
                  ""type": "u8"",
                  "}",
                  "]",
                  "}",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "Counter",",
                  ""type": {",
                  ""kind": "struct",",
                  ""fields": [",
                  "{",
                  ""name": "count",",
                  ""type": "u8"",
                  "}",
                  "]",
                  "}",
                  "}",
                  "],",
                  ""metadata": {",
                  ""address": "CounNZdmsQmWh7uVngV9FXW2dZ6zAgbJyYsvBpqbykg"",
                  "}",
                  "}",
                ],
                "isBinary": false,
                "path": "./anchor/target/idl/counter.json",
              },
            },
            "path": "./anchor/target/idl",
          },
          "types": {
            "children": {
              "counter.ts": {
                "content": [
                  "export type Counter = {",
                  "version: '0.1.0';",
                  "name: 'counter';",
                  "instructions: [",
                  "{",
                  "name: 'closeCounter';",
                  "accounts: [",
                  "{",
                  "name: 'payer';",
                  "isMut: true;",
                  "isSigner: true;",
                  "},",
                  "{",
                  "name: 'counter';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'decrement';",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'increment';",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'initializeCounter';",
                  "accounts: [",
                  "{",
                  "name: 'payer';",
                  "isMut: true;",
                  "isSigner: true;",
                  "},",
                  "{",
                  "name: 'counter';",
                  "isMut: true;",
                  "isSigner: true;",
                  "},",
                  "{",
                  "name: 'systemProgram';",
                  "isMut: false;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'set';",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [",
                  "{",
                  "name: 'value';",
                  "type: 'u8';",
                  "}",
                  "];",
                  "}",
                  "];",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "type: {",
                  "kind: 'struct';",
                  "fields: [",
                  "{",
                  "name: 'count';",
                  "type: 'u8';",
                  "}",
                  "];",
                  "};",
                  "}",
                  "];",
                  "};",
                  "export const IDL: Counter = {",
                  "version: '0.1.0',",
                  "name: 'counter',",
                  "instructions: [",
                  "{",
                  "name: 'closeCounter',",
                  "accounts: [",
                  "{",
                  "name: 'payer',",
                  "isMut: true,",
                  "isSigner: true,",
                  "},",
                  "{",
                  "name: 'counter',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'decrement',",
                  "accounts: [",
                  "{",
                  "name: 'counter',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'increment',",
                  "accounts: [",
                  "{",
                  "name: 'counter',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'initializeCounter',",
                  "accounts: [",
                  "{",
                  "name: 'payer',",
                  "isMut: true,",
                  "isSigner: true,",
                  "},",
                  "{",
                  "name: 'counter',",
                  "isMut: true,",
                  "isSigner: true,",
                  "},",
                  "{",
                  "name: 'systemProgram',",
                  "isMut: false,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'set',",
                  "accounts: [",
                  "{",
                  "name: 'counter',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [",
                  "{",
                  "name: 'value',",
                  "type: 'u8',",
                  "},",
                  "],",
                  "},",
                  "],",
                  "accounts: [",
                  "{",
                  "name: 'counter',",
                  "type: {",
                  "kind: 'struct',",
                  "fields: [",
                  "{",
                  "name: 'count',",
                  "type: 'u8',",
                  "},",
                  "],",
                  "},",
                  "},",
                  "],",
                  "};",
                ],
                "isBinary": false,
                "path": "./anchor/target/types/counter.ts",
              },
            },
            "path": "./anchor/target/types",
          },
        },
        "path": "./anchor/target",
      },
      "tests": {
        "children": {
          "counter.spec.ts": {
            "content": [
              "import * as anchor from '@coral-xyz/anchor';",
              "import { Program } from '@coral-xyz/anchor';",
              "import { Keypair } from '@solana/web3.js';",
              "import { Counter } from '../target/types/counter';",
              "describe('counter', () => {",
              "// Configure the client to use the local cluster.",
              "const provider = anchor.AnchorProvider.env();",
              "anchor.setProvider(provider);",
              "const payer = provider.wallet as anchor.Wallet;",
              "const program = anchor.workspace.Counter as Program<Counter>;",
              "const counterKeypair = Keypair.generate();",
              "it('Initialize Counter', async () => {",
              "await program.methods",
              ".initializeCounter()",
              ".accounts({",
              "counter: counterKeypair.publicKey,",
              "payer: payer.publicKey,",
              "})",
              ".signers([counterKeypair])",
              ".rpc();",
              "const currentCount = await program.account.counter.fetch(",
              "counterKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(0);",
              "});",
              "it('Increment Counter', async () => {",
              "await program.methods",
              ".increment()",
              ".accounts({ counter: counterKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.counter.fetch(",
              "counterKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(1);",
              "});",
              "it('Increment Counter Again', async () => {",
              "await program.methods",
              ".increment()",
              ".accounts({ counter: counterKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.counter.fetch(",
              "counterKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(2);",
              "});",
              "it('Decrement Counter', async () => {",
              "await program.methods",
              ".decrement()",
              ".accounts({ counter: counterKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.counter.fetch(",
              "counterKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(1);",
              "});",
              "it('Set counter value', async () => {",
              "await program.methods",
              ".set(42)",
              ".accounts({ counter: counterKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.counter.fetch(",
              "counterKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(42);",
              "});",
              "it('Set close the counter account', async () => {",
              "await program.methods",
              ".closeCounter()",
              ".accounts({",
              "payer: payer.publicKey,",
              "counter: counterKeypair.publicKey,",
              "})",
              ".rpc();",
              "// The account should no longer exist, returning null.",
              "const userAccount = await program.account.counter.fetchNullable(",
              "counterKeypair.publicKey",
              ");",
              "expect(userAccount).toBeNull();",
              "});",
              "});",
            ],
            "isBinary": false,
            "path": "./anchor/tests/counter.spec.ts",
          },
        },
        "path": "./anchor/tests",
      },
      "tsconfig.json": {
        "content": [
          "{",
          ""extends": "../tsconfig.base.json",",
          ""compilerOptions": {",
          ""module": "commonjs"",
          "},",
          ""files": [],",
          ""include": [],",
          ""references": [",
          "{",
          ""path": "./tsconfig.lib.json"",
          "},",
          "{",
          ""path": "./tsconfig.spec.json"",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/tsconfig.json",
      },
      "tsconfig.lib.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""declaration": true,",
          ""types": ["node"]",
          "},",
          ""include": ["src/**/*.ts"],",
          ""exclude": ["jest.config.ts", "src/**/*.spec.ts", "src/**/*.test.ts"]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/tsconfig.lib.json",
      },
      "tsconfig.spec.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""module": "commonjs",",
          ""types": ["jest", "node"]",
          "},",
          ""include": [",
          ""jest.config.ts",",
          ""src/**/*.test.ts",",
          ""src/**/*.spec.ts",",
          ""src/**/*.d.ts"",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/tsconfig.spec.json",
      },
    },
    "path": "./anchor",
  },
  "jest.config.ts": {
    "content": [
      "import { getJestProjects } from '@nx/jest';",
      "export default {",
      "projects: getJestProjects(),",
      "};",
    ],
    "isBinary": false,
    "path": "./jest.config.ts",
  },
  "jest.preset.js": {
    "content": [
      "const nxPreset = require('@nx/jest/preset').default;",
      "module.exports = { ...nxPreset };",
    ],
    "isBinary": false,
    "path": "./jest.preset.js",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": {",
      ""defaultBase": "main"",
      "},",
      ""targetDefaults": {",
      ""build": {",
      ""cache": true",
      "},",
      ""lint": {",
      ""cache": true,",
      ""inputs": [",
      ""default",",
      ""{workspaceRoot}/.eslintrc.json",",
      ""{workspaceRoot}/.eslintignore",",
      ""{workspaceRoot}/eslint.config.js"",
      "]",
      "},",
      ""e2e": {",
      ""cache": true",
      "},",
      ""@nx/jest:jest": {",
      ""cache": true,",
      ""inputs": ["default", "^default", "{workspaceRoot}/jest.preset.js"],",
      ""options": {",
      ""passWithNoTests": true",
      "},",
      ""configurations": {",
      ""ci": {",
      ""ci": true,",
      ""codeCoverage": true",
      "}",
      "}",
      "}",
      "},",
      ""generators": {",
      ""@nx/react": {",
      ""application": {",
      ""style": "css",",
      ""linter": "eslint",",
      ""bundler": "webpack",",
      ""babel": true",
      "},",
      ""component": {",
      ""style": "css"",
      "},",
      ""library": {",
      ""style": "css",",
      ""linter": "eslint"",
      "}",
      "}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {",
      ""@coral-xyz/anchor": "^0.29.0",",
      ""@solana/wallet-adapter-base": "^0.9.23",",
      ""@solana/wallet-adapter-react": "^0.15.35",",
      ""@solana/wallet-adapter-react-ui": "^0.9.34",",
      ""@solana/wallet-adapter-solflare": "^0.6.28",",
      ""@solana/wallet-adapter-unsafe-burner": "^0.1.7",",
      ""@solana/web3.js": "1.87.2",",
      ""@swc/helpers": "~0.5.2",",
      ""bs58": "5.0.0",",
      ""react": "18.2.0",",
      ""react-dom": "18.2.0",",
      ""react-router-dom": "6.11.2",",
      ""tslib": "^2.3.0"",
      "},",
      ""devDependencies": {",
      ""@babel/core": "^7.14.5",",
      ""@babel/preset-react": "^7.14.5",",
      ""@nx/eslint": "17.1.3",",
      ""@nx/eslint-plugin": "17.1.3",",
      ""@nx/jest": "17.1.3",",
      ""@nx/js": "17.1.3",",
      ""@nx/react": "17.1.3",",
      ""@nx/rollup": "17.1.3",",
      ""@nx/webpack": "17.1.3",",
      ""@pmmmwh/react-refresh-webpack-plugin": "^0.5.7",",
      ""@svgr/webpack": "^8.0.1",",
      ""@swc-node/register": "~1.6.7",",
      ""@swc/cli": "~0.1.62",",
      ""@swc/core": "~1.3.85",",
      ""@swc/jest": "0.2.20",",
      ""@testing-library/react": "14.0.0",",
      ""@types/jest": "^29.4.0",",
      ""@types/node": "18.14.2",",
      ""@types/react": "18.2.33",",
      ""@types/react-dom": "18.2.14",",
      ""@typescript-eslint/eslint-plugin": "^6.9.1",",
      ""@typescript-eslint/parser": "^6.9.1",",
      ""eslint": "~8.46.0",",
      ""eslint-config-prettier": "^9.0.0",",
      ""eslint-plugin-import": "2.27.5",",
      ""eslint-plugin-jsx-a11y": "6.7.1",",
      ""eslint-plugin-react": "7.32.2",",
      ""eslint-plugin-react-hooks": "4.6.0",",
      ""jest": "^29.4.1",",
      ""jest-environment-jsdom": "^29.4.1",",
      ""prettier": "^2.6.2",",
      ""react-refresh": "^0.10.0",",
      ""ts-jest": "^29.1.0",",
      ""ts-node": "10.9.1",",
      ""typescript": "~5.2.2",",
      ""url-loader": "^4.1.1"",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test-app": {
    "children": {
      ".babelrc": {
        "content": [
          "{",
          ""presets": [",
          "[",
          ""@nx/react/babel",",
          "{",
          ""runtime": "automatic"",
          "}",
          "]",
          "],",
          ""plugins": []",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/.babelrc",
      },
      ".eslintrc.json": {
        "content": [
          "{",
          ""extends": ["plugin:@nx/react", "../.eslintrc.json"],",
          ""ignorePatterns": ["!**/*"],",
          ""overrides": [",
          "{",
          ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.js", "*.jsx"],",
          ""rules": {}",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/.eslintrc.json",
      },
      "project.json": {
        "content": [
          "{",
          ""name": "test-app",",
          ""$schema": "../node_modules/nx/schemas/project-schema.json",",
          ""sourceRoot": "test-app/src",",
          ""projectType": "application",",
          ""targets": {",
          ""build": {",
          ""executor": "@nx/webpack:webpack",",
          ""outputs": ["{options.outputPath}"],",
          ""defaultConfiguration": "production",",
          ""options": {",
          ""compiler": "babel",",
          ""outputPath": "dist/test-app",",
          ""index": "test-app/src/index.html",",
          ""baseHref": "/",",
          ""main": "test-app/src/main.tsx",",
          ""tsConfig": "test-app/tsconfig.app.json",",
          ""assets": ["test-app/src/favicon.ico", "test-app/src/assets"],",
          ""styles": ["test-app/src/styles.css"],",
          ""scripts": [],",
          ""isolatedConfig": true,",
          ""webpackConfig": "test-app/webpack.config.js"",
          "},",
          ""configurations": {",
          ""development": {",
          ""extractLicenses": false,",
          ""optimization": false,",
          ""sourceMap": true,",
          ""vendorChunk": true",
          "},",
          ""production": {",
          ""fileReplacements": [",
          "{",
          ""replace": "test-app/src/environments/environment.ts",",
          ""with": "test-app/src/environments/environment.prod.ts"",
          "}",
          "],",
          ""optimization": true,",
          ""outputHashing": "all",",
          ""sourceMap": false,",
          ""namedChunks": false,",
          ""extractLicenses": true,",
          ""vendorChunk": false",
          "}",
          "}",
          "},",
          ""serve": {",
          ""executor": "@nx/webpack:dev-server",",
          ""defaultConfiguration": "development",",
          ""options": {",
          ""buildTarget": "test-app:build",",
          ""hmr": true",
          "},",
          ""configurations": {",
          ""development": {",
          ""buildTarget": "test-app:build:development"",
          "},",
          ""production": {",
          ""buildTarget": "test-app:build:production",",
          ""hmr": false",
          "}",
          "}",
          "},",
          ""lint": {",
          ""executor": "@nx/eslint:lint",",
          ""outputs": ["{options.outputFile}"],",
          ""options": {",
          ""lintFilePatterns": ["test-app/**/*.{ts,tsx,js,jsx}"]",
          "}",
          "}",
          "},",
          ""tags": []",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/project.json",
      },
      "src": {
        "children": {
          "app": {
            "children": {
              "app-layout.tsx": {
                "content": [
                  "import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';",
                  "import { ReactNode } from 'react';",
                  "import { Link, useLocation } from 'react-router-dom';",
                  "export function AppLayout({ children }: { children: ReactNode }) {",
                  "const { pathname } = useLocation();",
                  "return (",
                  "<div>",
                  "<div>",
                  "<div>",
                  "<Link to="/">@solana-developers/preset-react</Link>",
                  "</div>",
                  "<div>",
                  "<WalletMultiButton />",
                  "</div>",
                  "</div>",
                  "<div>{children}</div>",
                  "<footer>",
                  "<aside>",
                  "<p>",
                  "Powered by{' '}",
                  "<a",
                  "href="https://github.com/solana-developers/create-solana-dapp"",
                  "target="_blank"",
                  "rel="noopener noreferrer"",
                  ">",
                  "create-solana-dapp",
                  "</a>",
                  "</p>",
                  "</aside>",
                  "</footer>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/app-layout.tsx",
              },
              "app-routes.tsx": {
                "content": [
                  "import { CounterIDL } from '@proj/anchor';",
                  "import { useRoutes } from 'react-router-dom';",
                  "export function AppRoutes() {",
                  "return useRoutes([",
                  "{",
                  "index: true,",
                  "path: '/',",
                  "element: <pre>{JSON.stringify(CounterIDL, null, 2)}</pre>,",
                  "},",
                  "]);",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/app-routes.tsx",
              },
              "app.tsx": {
                "content": [
                  "import { AppLayout } from './app-layout';",
                  "import { AppRoutes } from './app-routes';",
                  "import { SolanaProvider } from './solana-provider';",
                  "export function App() {",
                  "return (",
                  "<SolanaProvider>",
                  "<AppLayout>",
                  "<AppRoutes />",
                  "</AppLayout>",
                  "</SolanaProvider>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/app.tsx",
              },
              "solana-provider.tsx": {
                "content": [
                  "import { WalletError } from '@solana/wallet-adapter-base';",
                  "import {",
                  "ConnectionProvider,",
                  "WalletProvider,",
                  "} from '@solana/wallet-adapter-react';",
                  "import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';",
                  "import { SolflareWalletAdapter } from '@solana/wallet-adapter-solflare';",
                  "import { UnsafeBurnerWalletAdapter } from '@solana/wallet-adapter-unsafe-burner';",
                  "import { Cluster, clusterApiUrl } from '@solana/web3.js';",
                  "import {",
                  "createContext,",
                  "ReactNode,",
                  "useCallback,",
                  "useContext,",
                  "useMemo,",
                  "useState,",
                  "} from 'react';",
                  "require('@solana/wallet-adapter-react-ui/styles.css');",
                  "export interface SolanaProviderContext {",
                  "cluster: Cluster;",
                  "endpoint: string;",
                  "setCluster?: (cluster: Cluster) => void;",
                  "}",
                  "const Context = createContext<SolanaProviderContext>(",
                  "{} as SolanaProviderContext",
                  ");",
                  "export function SolanaProvider({ children }: { children: ReactNode }) {",
                  "const [cluster, setCluster] = useState<Cluster>('devnet');",
                  "const endpoint = useMemo(() => clusterApiUrl(cluster), [cluster]);",
                  "const wallets = useMemo(",
                  "() => [new UnsafeBurnerWalletAdapter(), new SolflareWalletAdapter()],",
                  "[cluster]",
                  ");",
                  "const onError = useCallback((error: WalletError) => {",
                  "console.error(error);",
                  "}, []);",
                  "const value: SolanaProviderContext = {",
                  "cluster,",
                  "endpoint,",
                  "setCluster,",
                  "};",
                  "return (",
                  "<ConnectionProvider endpoint={endpoint}>",
                  "<WalletProvider wallets={wallets} onError={onError} autoConnect={true}>",
                  "<WalletModalProvider>",
                  "<Context.Provider value={value}>{children}</Context.Provider>",
                  "</WalletModalProvider>",
                  "</WalletProvider>",
                  "</ConnectionProvider>",
                  ");",
                  "}",
                  "export function useSolana() {",
                  "return useContext(Context);",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/solana-provider.tsx",
              },
            },
            "path": "./test-app/src/app",
          },
          "assets": {
            "children": {
              ".gitkeep": {
                "content": [],
                "isBinary": false,
                "path": "./test-app/src/assets/.gitkeep",
              },
            },
            "path": "./test-app/src/assets",
          },
          "environments": {
            "children": {
              "environment.prod.ts": {
                "content": [
                  "export const environment = {",
                  "production: true,",
                  "};",
                ],
                "isBinary": false,
                "path": "./test-app/src/environments/environment.prod.ts",
              },
              "environment.ts": {
                "content": [
                  "// This file can be replaced during build by using the \`fileReplacements\` array.",
                  "// When building for production, this file is replaced with \`environment.prod.ts\`.",
                  "export const environment = {",
                  "production: false,",
                  "};",
                ],
                "isBinary": false,
                "path": "./test-app/src/environments/environment.ts",
              },
            },
            "path": "./test-app/src/environments",
          },
          "favicon.ico": {
            "content": null,
            "isBinary": true,
            "path": "./test-app/src/favicon.ico",
          },
          "index.html": {
            "content": [
              "<!DOCTYPE html>",
              "<html lang="en">",
              "<head>",
              "<meta charset="utf-8" />",
              "<title>@solana-developers/preset-react</title>",
              "<base href="/" />",
              "<meta",
              "name="viewport"",
              "content="width=device-width, initial-scale=1, maximum-scale=1"",
              "/>",
              "<link rel="icon" type="image/x-icon" href="favicon.ico" />",
              "</head>",
              "<body>",
              "<div id="root"></div>",
              "</body>",
              "</html>",
            ],
            "isBinary": false,
            "path": "./test-app/src/index.html",
          },
          "main.tsx": {
            "content": [
              "import { StrictMode } from 'react';",
              "import * as ReactDOM from 'react-dom/client';",
              "import { BrowserRouter } from 'react-router-dom';",
              "import { App } from './app/app';",
              "const root = ReactDOM.createRoot(",
              "document.getElementById('root') as HTMLElement",
              ");",
              "root.render(",
              "<StrictMode>",
              "<BrowserRouter>",
              "<App />",
              "</BrowserRouter>",
              "</StrictMode>",
              ");",
            ],
            "isBinary": false,
            "path": "./test-app/src/main.tsx",
          },
          "styles.css": {
            "content": [
              "html,",
              "body,",
              "#root {",
              "height: 100%;",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/src/styles.css",
          },
        },
        "path": "./test-app/src",
      },
      "tsconfig.app.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""types": [",
          ""node",",
          ""@nx/react/typings/cssmodule.d.ts",",
          ""@nx/react/typings/image.d.ts"",
          "]",
          "},",
          ""exclude": [",
          ""jest.config.ts",",
          ""src/**/*.spec.ts",",
          ""src/**/*.test.ts",",
          ""src/**/*.spec.tsx",",
          ""src/**/*.test.tsx",",
          ""src/**/*.spec.js",",
          ""src/**/*.test.js",",
          ""src/**/*.spec.jsx",",
          ""src/**/*.test.jsx"",
          "],",
          ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/tsconfig.app.json",
      },
      "tsconfig.json": {
        "content": [
          "{",
          ""compilerOptions": {",
          ""jsx": "react-jsx",",
          ""allowJs": false,",
          ""esModuleInterop": false,",
          ""allowSyntheticDefaultImports": true,",
          ""strict": true",
          "},",
          ""files": [],",
          ""include": [],",
          ""references": [",
          "{",
          ""path": "./tsconfig.app.json"",
          "}",
          "],",
          ""extends": "../tsconfig.base.json"",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/tsconfig.json",
      },
      "webpack.config.js": {
        "content": [
          "const { composePlugins, withNx } = require('@nx/webpack');",
          "const { withReact } = require('@nx/react');",
          "// Nx plugins for webpack.",
          "module.exports = composePlugins(withNx(), withReact(), (config) => {",
          "// Update the webpack config as needed here.",
          "// e.g. \`config.plugins.push(new MyPlugin())\`",
          "config.ignoreWarnings = [/Failed to parse source map/];",
          "return config;",
          "});",
        ],
        "isBinary": false,
        "path": "./test-app/webpack.config.js",
      },
    },
    "path": "./test-app",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {",
      ""@proj/anchor": ["anchor/src/index.ts"]",
      "}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`react-application generator default apps should generate default app with "tailwind" ui 1`] = `
{
  ".eslintignore": {
    "content": [
      "node_modules",
    ],
    "isBinary": false,
    "path": "./.eslintignore",
  },
  ".eslintrc.json": {
    "content": [
      "{",
      ""root": true,",
      ""ignorePatterns": ["**/*"],",
      ""plugins": ["@nx"],",
      ""overrides": [",
      "{",
      ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
      ""rules": {",
      ""@nx/enforce-module-boundaries": [",
      ""error",",
      "{",
      ""enforceBuildableLibDependency": true,",
      ""allow": [],",
      ""depConstraints": [",
      "{",
      ""sourceTag": "*",",
      ""onlyDependOnLibsWithTags": ["*"]",
      "}",
      "]",
      "}",
      "]",
      "}",
      "},",
      "{",
      ""files": ["*.ts", "*.tsx"],",
      ""extends": ["plugin:@nx/typescript"],",
      ""rules": {}",
      "},",
      "{",
      ""files": ["*.js", "*.jsx"],",
      ""extends": ["plugin:@nx/javascript"],",
      ""rules": {}",
      "}",
      "]",
      "}",
    ],
    "isBinary": false,
    "path": "./.eslintrc.json",
  },
  ".prettierignore": {
    "content": [
      "# Add files here to ignore them from prettier formatting",
      "/dist",
      "/coverage",
      "/.nx/cache",
      ".anchor",
      "target",
      "node_modules",
      "dist",
      "tmp",
      "build",
      "test-ledger",
    ],
    "isBinary": false,
    "path": "./.prettierignore",
  },
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "anchor": {
    "children": {
      ".eslintrc.json": {
        "content": [
          "{",
          ""extends": ["../.eslintrc.json"],",
          ""ignorePatterns": ["!**/*"],",
          ""overrides": [",
          "{",
          ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.js", "*.jsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.json"],",
          ""parser": "jsonc-eslint-parser",",
          ""rules": {",
          ""@nx/dependency-checks": [",
          ""error",",
          "{",
          ""ignoredFiles": ["{projectRoot}/rollup.config.{js,ts,mjs,mts}"]",
          "}",
          "]",
          "}",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/.eslintrc.json",
      },
      ".swcrc": {
        "content": [
          "{",
          ""jsc": {",
          ""target": "es2017",",
          ""parser": {",
          ""syntax": "typescript",",
          ""decorators": true,",
          ""dynamicImport": true",
          "},",
          ""transform": {",
          ""decoratorMetadata": true,",
          ""legacyDecorator": true",
          "},",
          ""keepClassNames": true,",
          ""externalHelpers": true,",
          ""loose": true",
          "},",
          ""module": {",
          ""type": "es6"",
          "},",
          ""sourceMaps": true,",
          ""exclude": [",
          ""jest.config.ts",",
          "".*\\\\.spec.tsx?$",",
          "".*\\\\.test.tsx?$",",
          ""./src/jest-setup.ts$",",
          ""./**/jest-setup.ts$",",
          "".*.js$"",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/.swcrc",
      },
      "Anchor.toml": {
        "content": [
          "[features]",
          "seeds = false",
          "skip-lint = false",
          "[programs.localnet]",
          "counter = "EuJfgknXicf6iZASeagt5U6XDDPpLTQrvWPW31vgAwo8"",
          "[registry]",
          "url = "https://api.apr.dev"",
          "[provider]",
          "cluster = "Localnet"",
          "wallet = "~/.config/solana/id.json"",
          "[scripts]",
          "test = "../node_modules/.bin/nx run anchor:jest"",
          "[test.validator]",
          "bind_address = "127.0.0.1"",
        ],
        "isBinary": false,
        "path": "./anchor/Anchor.toml",
      },
      "Cargo.lock": {
        "content": null,
        "isBinary": true,
        "path": "./anchor/Cargo.lock",
      },
      "Cargo.toml": {
        "content": [
          "[workspace]",
          "members = [",
          ""programs/*"",
          "]",
          "resolver = "2"",
          "[profile.release]",
          "overflow-checks = true",
          "lto = "fat"",
          "codegen-units = 1",
          "[profile.release.build-override]",
          "opt-level = 3",
          "incremental = false",
          "codegen-units = 1",
        ],
        "isBinary": false,
        "path": "./anchor/Cargo.toml",
      },
      "README.md": {
        "content": [
          "# anchor",
          "This library was generated with [Nx](https://nx.dev).",
          "## Building",
          "Run \`nx build anchor\` to build the library.",
          "## Running unit tests",
          "Run \`nx test anchor\` to execute the unit tests via [Jest](https://jestjs.io).",
        ],
        "isBinary": false,
        "path": "./anchor/README.md",
      },
      "jest.config.ts": {
        "content": [
          "/* eslint-disable */",
          "import { readFileSync } from 'fs';",
          "// Reading the SWC compilation config and remove the "exclude"",
          "// for the test files to be compiled by SWC",
          "const { exclude: _, ...swcJestConfig } = JSON.parse(",
          "readFileSync(\`\${__dirname}/.swcrc\`, 'utf-8')",
          ");",
          "// disable .swcrc look-up by SWC core because we're passing in swcJestConfig ourselves.",
          "// If we do not disable this, SWC Core will read .swcrc and won't transform our test files due to "exclude"",
          "if (swcJestConfig.swcrc === undefined) {",
          "swcJestConfig.swcrc = false;",
          "}",
          "// Uncomment if using global setup/teardown files being transformed via swc",
          "// https://nx.dev/packages/jest/documents/overview#global-setup/teardown-with-nx-libraries",
          "// jest needs EsModule Interop to find the default exported setup/teardown functions",
          "// swcJestConfig.module.noInterop = false;",
          "export default {",
          "displayName: 'anchor',",
          "preset: '../jest.preset.js',",
          "transform: {",
          "'^.+\\\\.[tj]s$': ['@swc/jest', swcJestConfig],",
          "},",
          "moduleFileExtensions: ['ts', 'js', 'html'],",
          "testEnvironment: '',",
          "coverageDirectory: '../coverage/anchor',",
          "};",
        ],
        "isBinary": false,
        "path": "./anchor/jest.config.ts",
      },
      "migrations": {
        "children": {
          "deploy.ts": {
            "content": [
              "// Migrations are an early feature. Currently, they're nothing more than this",
              "// single deploy script that's invoked from the CLI, injecting a provider",
              "// configured from the workspace's Anchor.toml.",
              "import * as anchor from '@coral-xyz/anchor';",
              "module.exports = async function (provider) {",
              "// Configure client to use the provider.",
              "anchor.setProvider(provider);",
              "// Add your deploy script here.",
              "};",
            ],
            "isBinary": false,
            "path": "./anchor/migrations/deploy.ts",
          },
        },
        "path": "./anchor/migrations",
      },
      "package.json": {
        "content": [
          "{",
          ""name": "@proj/anchor",",
          ""version": "0.0.1",",
          ""dependencies": {},",
          ""type": "commonjs",",
          ""main": "./index.cjs",",
          ""module": "./index.js"",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/package.json",
      },
      "programs": {
        "children": {
          "counter": {
            "children": {
              "Cargo.toml": {
                "content": [
                  "[package]",
                  "name = "counter"",
                  "version = "0.1.0"",
                  "description = "Created with Anchor"",
                  "edition = "2021"",
                  "[lib]",
                  "crate-type = ["cdylib", "lib"]",
                  "name = "counter"",
                  "[features]",
                  "no-entrypoint = []",
                  "no-idl = []",
                  "no-log-ix-name = []",
                  "cpi = ["no-entrypoint"]",
                  "default = []",
                  "[dependencies]",
                  "anchor-lang = "0.28.0"",
                ],
                "isBinary": false,
                "path": "./anchor/programs/counter/Cargo.toml",
              },
              "Xargo.toml": {
                "content": [
                  "[target.bpfel-unknown-unknown.dependencies.std]",
                  "features = []",
                ],
                "isBinary": false,
                "path": "./anchor/programs/counter/Xargo.toml",
              },
              "src": {
                "children": {
                  "lib.rs": {
                    "content": [
                      "#![allow(clippy::result_large_err)]",
                      "use anchor_lang::prelude::*;",
                      "declare_id!("CounNZdmsQmWh7uVngV9FXW2dZ6zAgbJyYsvBpqbykg");",
                      "#[program]",
                      "pub mod counter {",
                      "use super::*;",
                      "pub fn close_counter(_ctx: Context<CloseCounter>) -> Result<()> {",
                      "Ok(())",
                      "}",
                      "pub fn decrement(ctx: Context<Update>) -> Result<()> {",
                      "ctx.accounts.counter.count = ctx.accounts.counter.count.checked_sub(1).unwrap();",
                      "Ok(())",
                      "}",
                      "pub fn increment(ctx: Context<Update>) -> Result<()> {",
                      "ctx.accounts.counter.count = ctx.accounts.counter.count.checked_add(1).unwrap();",
                      "Ok(())",
                      "}",
                      "pub fn initialize_counter(_ctx: Context<InitializeCounter>) -> Result<()> {",
                      "Ok(())",
                      "}",
                      "pub fn set(ctx: Context<Update>, value: u8) -> Result<()> {",
                      "ctx.accounts.counter.count = value.clone();",
                      "Ok(())",
                      "}",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct InitializeCounter<'info> {",
                      "#[account(mut)]",
                      "pub payer: Signer<'info>,",
                      "#[account(",
                      "init,",
                      "space = 8 + Counter::INIT_SPACE,",
                      "payer = payer",
                      ")]",
                      "pub counter: Account<'info, Counter>,",
                      "pub system_program: Program<'info, System>,",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct CloseCounter<'info> {",
                      "#[account(mut)]",
                      "pub payer: Signer<'info>,",
                      "#[account(",
                      "mut,",
                      "close = payer, // close account and return lamports to payer",
                      ")]",
                      "pub counter: Account<'info, Counter>,",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct Update<'info> {",
                      "#[account(mut)]",
                      "pub counter: Account<'info, Counter>,",
                      "}",
                      "#[account]",
                      "#[derive(InitSpace)]",
                      "pub struct Counter {",
                      "count: u8,",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./anchor/programs/counter/src/lib.rs",
                  },
                },
                "path": "./anchor/programs/counter/src",
              },
            },
            "path": "./anchor/programs/counter",
          },
        },
        "path": "./anchor/programs",
      },
      "project.json": {
        "content": [
          "{",
          ""name": "anchor",",
          ""$schema": "../node_modules/nx/schemas/project-schema.json",",
          ""sourceRoot": "anchor/src",",
          ""projectType": "library",",
          ""targets": {",
          ""build": {",
          ""executor": "@nx/rollup:rollup",",
          ""outputs": ["{options.outputPath}"],",
          ""options": {",
          ""outputPath": "dist/anchor",",
          ""main": "anchor/src/index.ts",",
          ""tsConfig": "anchor/tsconfig.lib.json",",
          ""assets": [],",
          ""project": "anchor/package.json",",
          ""compiler": "swc",",
          ""format": ["cjs", "esm"]",
          "}",
          "},",
          ""lint": {",
          ""executor": "@nx/eslint:lint",",
          ""outputs": ["{options.outputFile}"],",
          ""options": {",
          ""lintFilePatterns": ["anchor/**/*.ts", "anchor/package.json"]",
          "}",
          "},",
          ""test": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor",",
          ""commands": ["anchor test"],",
          ""parallel": false",
          "}",
          "},",
          ""anchor": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor",",
          ""commands": ["anchor"],",
          ""parallel": false",
          "}",
          "},",
          ""localnet": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor",",
          ""commands": ["anchor localnet"],",
          ""parallel": false",
          "}",
          "},",
          ""jest": {",
          ""executor": "@nx/jest:jest",",
          ""outputs": ["{workspaceRoot}/coverage/{projectRoot}"],",
          ""options": {",
          ""jestConfig": "anchor/jest.config.ts"",
          "}",
          "}",
          "},",
          ""tags": []",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/project.json",
      },
      "src": {
        "children": {
          "counter-exports.ts": {
            "content": [
              "import { Program } from '@coral-xyz/anchor';",
              "import { IDL as CounterIDL } from '../target/types/counter';",
              "import type { Counter } from '../target/types/counter';",
              "export { Counter, CounterIDL };",
              "export type CounterProgram = Program<Counter>;",
            ],
            "isBinary": false,
            "path": "./anchor/src/counter-exports.ts",
          },
          "index.ts": {
            "content": [
              "export * from './counter-exports';",
            ],
            "isBinary": false,
            "path": "./anchor/src/index.ts",
          },
        },
        "path": "./anchor/src",
      },
      "target": {
        "children": {
          "idl": {
            "children": {
              "counter.json": {
                "content": [
                  "{",
                  ""version": "0.1.0",",
                  ""name": "counter",",
                  ""instructions": [",
                  "{",
                  ""name": "closeCounter",",
                  ""accounts": [",
                  "{",
                  ""name": "payer",",
                  ""isMut": true,",
                  ""isSigner": true",
                  "},",
                  "{",
                  ""name": "counter",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "decrement",",
                  ""accounts": [",
                  "{",
                  ""name": "counter",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "increment",",
                  ""accounts": [",
                  "{",
                  ""name": "counter",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "initializeCounter",",
                  ""accounts": [",
                  "{",
                  ""name": "payer",",
                  ""isMut": true,",
                  ""isSigner": true",
                  "},",
                  "{",
                  ""name": "counter",",
                  ""isMut": true,",
                  ""isSigner": true",
                  "},",
                  "{",
                  ""name": "systemProgram",",
                  ""isMut": false,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "set",",
                  ""accounts": [",
                  "{",
                  ""name": "counter",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": [",
                  "{",
                  ""name": "value",",
                  ""type": "u8"",
                  "}",
                  "]",
                  "}",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "Counter",",
                  ""type": {",
                  ""kind": "struct",",
                  ""fields": [",
                  "{",
                  ""name": "count",",
                  ""type": "u8"",
                  "}",
                  "]",
                  "}",
                  "}",
                  "],",
                  ""metadata": {",
                  ""address": "CounNZdmsQmWh7uVngV9FXW2dZ6zAgbJyYsvBpqbykg"",
                  "}",
                  "}",
                ],
                "isBinary": false,
                "path": "./anchor/target/idl/counter.json",
              },
            },
            "path": "./anchor/target/idl",
          },
          "types": {
            "children": {
              "counter.ts": {
                "content": [
                  "export type Counter = {",
                  "version: '0.1.0';",
                  "name: 'counter';",
                  "instructions: [",
                  "{",
                  "name: 'closeCounter';",
                  "accounts: [",
                  "{",
                  "name: 'payer';",
                  "isMut: true;",
                  "isSigner: true;",
                  "},",
                  "{",
                  "name: 'counter';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'decrement';",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'increment';",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'initializeCounter';",
                  "accounts: [",
                  "{",
                  "name: 'payer';",
                  "isMut: true;",
                  "isSigner: true;",
                  "},",
                  "{",
                  "name: 'counter';",
                  "isMut: true;",
                  "isSigner: true;",
                  "},",
                  "{",
                  "name: 'systemProgram';",
                  "isMut: false;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'set';",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [",
                  "{",
                  "name: 'value';",
                  "type: 'u8';",
                  "}",
                  "];",
                  "}",
                  "];",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "type: {",
                  "kind: 'struct';",
                  "fields: [",
                  "{",
                  "name: 'count';",
                  "type: 'u8';",
                  "}",
                  "];",
                  "};",
                  "}",
                  "];",
                  "};",
                  "export const IDL: Counter = {",
                  "version: '0.1.0',",
                  "name: 'counter',",
                  "instructions: [",
                  "{",
                  "name: 'closeCounter',",
                  "accounts: [",
                  "{",
                  "name: 'payer',",
                  "isMut: true,",
                  "isSigner: true,",
                  "},",
                  "{",
                  "name: 'counter',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'decrement',",
                  "accounts: [",
                  "{",
                  "name: 'counter',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'increment',",
                  "accounts: [",
                  "{",
                  "name: 'counter',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'initializeCounter',",
                  "accounts: [",
                  "{",
                  "name: 'payer',",
                  "isMut: true,",
                  "isSigner: true,",
                  "},",
                  "{",
                  "name: 'counter',",
                  "isMut: true,",
                  "isSigner: true,",
                  "},",
                  "{",
                  "name: 'systemProgram',",
                  "isMut: false,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'set',",
                  "accounts: [",
                  "{",
                  "name: 'counter',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [",
                  "{",
                  "name: 'value',",
                  "type: 'u8',",
                  "},",
                  "],",
                  "},",
                  "],",
                  "accounts: [",
                  "{",
                  "name: 'counter',",
                  "type: {",
                  "kind: 'struct',",
                  "fields: [",
                  "{",
                  "name: 'count',",
                  "type: 'u8',",
                  "},",
                  "],",
                  "},",
                  "},",
                  "],",
                  "};",
                ],
                "isBinary": false,
                "path": "./anchor/target/types/counter.ts",
              },
            },
            "path": "./anchor/target/types",
          },
        },
        "path": "./anchor/target",
      },
      "tests": {
        "children": {
          "counter.spec.ts": {
            "content": [
              "import * as anchor from '@coral-xyz/anchor';",
              "import { Program } from '@coral-xyz/anchor';",
              "import { Keypair } from '@solana/web3.js';",
              "import { Counter } from '../target/types/counter';",
              "describe('counter', () => {",
              "// Configure the client to use the local cluster.",
              "const provider = anchor.AnchorProvider.env();",
              "anchor.setProvider(provider);",
              "const payer = provider.wallet as anchor.Wallet;",
              "const program = anchor.workspace.Counter as Program<Counter>;",
              "const counterKeypair = Keypair.generate();",
              "it('Initialize Counter', async () => {",
              "await program.methods",
              ".initializeCounter()",
              ".accounts({",
              "counter: counterKeypair.publicKey,",
              "payer: payer.publicKey,",
              "})",
              ".signers([counterKeypair])",
              ".rpc();",
              "const currentCount = await program.account.counter.fetch(",
              "counterKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(0);",
              "});",
              "it('Increment Counter', async () => {",
              "await program.methods",
              ".increment()",
              ".accounts({ counter: counterKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.counter.fetch(",
              "counterKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(1);",
              "});",
              "it('Increment Counter Again', async () => {",
              "await program.methods",
              ".increment()",
              ".accounts({ counter: counterKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.counter.fetch(",
              "counterKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(2);",
              "});",
              "it('Decrement Counter', async () => {",
              "await program.methods",
              ".decrement()",
              ".accounts({ counter: counterKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.counter.fetch(",
              "counterKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(1);",
              "});",
              "it('Set counter value', async () => {",
              "await program.methods",
              ".set(42)",
              ".accounts({ counter: counterKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.counter.fetch(",
              "counterKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(42);",
              "});",
              "it('Set close the counter account', async () => {",
              "await program.methods",
              ".closeCounter()",
              ".accounts({",
              "payer: payer.publicKey,",
              "counter: counterKeypair.publicKey,",
              "})",
              ".rpc();",
              "// The account should no longer exist, returning null.",
              "const userAccount = await program.account.counter.fetchNullable(",
              "counterKeypair.publicKey",
              ");",
              "expect(userAccount).toBeNull();",
              "});",
              "});",
            ],
            "isBinary": false,
            "path": "./anchor/tests/counter.spec.ts",
          },
        },
        "path": "./anchor/tests",
      },
      "tsconfig.json": {
        "content": [
          "{",
          ""extends": "../tsconfig.base.json",",
          ""compilerOptions": {",
          ""module": "commonjs"",
          "},",
          ""files": [],",
          ""include": [],",
          ""references": [",
          "{",
          ""path": "./tsconfig.lib.json"",
          "},",
          "{",
          ""path": "./tsconfig.spec.json"",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/tsconfig.json",
      },
      "tsconfig.lib.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""declaration": true,",
          ""types": ["node"]",
          "},",
          ""include": ["src/**/*.ts"],",
          ""exclude": ["jest.config.ts", "src/**/*.spec.ts", "src/**/*.test.ts"]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/tsconfig.lib.json",
      },
      "tsconfig.spec.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""module": "commonjs",",
          ""types": ["jest", "node"]",
          "},",
          ""include": [",
          ""jest.config.ts",",
          ""src/**/*.test.ts",",
          ""src/**/*.spec.ts",",
          ""src/**/*.d.ts"",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/tsconfig.spec.json",
      },
    },
    "path": "./anchor",
  },
  "jest.config.ts": {
    "content": [
      "import { getJestProjects } from '@nx/jest';",
      "export default {",
      "projects: getJestProjects(),",
      "};",
    ],
    "isBinary": false,
    "path": "./jest.config.ts",
  },
  "jest.preset.js": {
    "content": [
      "const nxPreset = require('@nx/jest/preset').default;",
      "module.exports = { ...nxPreset };",
    ],
    "isBinary": false,
    "path": "./jest.preset.js",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": {",
      ""defaultBase": "main"",
      "},",
      ""targetDefaults": {",
      ""build": {",
      ""cache": true",
      "},",
      ""lint": {",
      ""cache": true,",
      ""inputs": [",
      ""default",",
      ""{workspaceRoot}/.eslintrc.json",",
      ""{workspaceRoot}/.eslintignore",",
      ""{workspaceRoot}/eslint.config.js"",
      "]",
      "},",
      ""e2e": {",
      ""cache": true",
      "},",
      ""@nx/jest:jest": {",
      ""cache": true,",
      ""inputs": ["default", "^default", "{workspaceRoot}/jest.preset.js"],",
      ""options": {",
      ""passWithNoTests": true",
      "},",
      ""configurations": {",
      ""ci": {",
      ""ci": true,",
      ""codeCoverage": true",
      "}",
      "}",
      "}",
      "},",
      ""generators": {",
      ""@nx/react": {",
      ""application": {",
      ""style": "css",",
      ""linter": "eslint",",
      ""bundler": "webpack",",
      ""babel": true",
      "},",
      ""component": {",
      ""style": "css"",
      "},",
      ""library": {",
      ""style": "css",",
      ""linter": "eslint"",
      "}",
      "}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {",
      ""@coral-xyz/anchor": "^0.29.0",",
      ""@solana/wallet-adapter-base": "^0.9.23",",
      ""@solana/wallet-adapter-react": "^0.15.35",",
      ""@solana/wallet-adapter-react-ui": "^0.9.34",",
      ""@solana/wallet-adapter-solflare": "^0.6.28",",
      ""@solana/wallet-adapter-unsafe-burner": "^0.1.7",",
      ""@solana/web3.js": "1.87.2",",
      ""@swc/helpers": "~0.5.2",",
      ""@tailwindcss/typography": "0.5.10",",
      ""bs58": "5.0.0",",
      ""daisyui": "3.9.3",",
      ""react": "18.2.0",",
      ""react-dom": "18.2.0",",
      ""react-router-dom": "6.11.2",",
      ""tslib": "^2.3.0"",
      "},",
      ""devDependencies": {",
      ""@babel/core": "^7.14.5",",
      ""@babel/preset-react": "^7.14.5",",
      ""@nx/eslint": "17.1.3",",
      ""@nx/eslint-plugin": "17.1.3",",
      ""@nx/jest": "17.1.3",",
      ""@nx/js": "17.1.3",",
      ""@nx/react": "17.1.3",",
      ""@nx/rollup": "17.1.3",",
      ""@nx/webpack": "17.1.3",",
      ""@pmmmwh/react-refresh-webpack-plugin": "^0.5.7",",
      ""@svgr/webpack": "^8.0.1",",
      ""@swc-node/register": "~1.6.7",",
      ""@swc/cli": "~0.1.62",",
      ""@swc/core": "~1.3.85",",
      ""@swc/jest": "0.2.20",",
      ""@testing-library/react": "14.0.0",",
      ""@types/jest": "^29.4.0",",
      ""@types/node": "18.14.2",",
      ""@types/react": "18.2.33",",
      ""@types/react-dom": "18.2.14",",
      ""@typescript-eslint/eslint-plugin": "^6.9.1",",
      ""@typescript-eslint/parser": "^6.9.1",",
      ""autoprefixer": "10.4.13",",
      ""eslint": "~8.46.0",",
      ""eslint-config-prettier": "^9.0.0",",
      ""eslint-plugin-import": "2.27.5",",
      ""eslint-plugin-jsx-a11y": "6.7.1",",
      ""eslint-plugin-react": "7.32.2",",
      ""eslint-plugin-react-hooks": "4.6.0",",
      ""jest": "^29.4.1",",
      ""jest-environment-jsdom": "^29.4.1",",
      ""postcss": "8.4.21",",
      ""prettier": "^2.6.2",",
      ""react-refresh": "^0.10.0",",
      ""tailwindcss": "3.2.7",",
      ""ts-jest": "^29.1.0",",
      ""ts-node": "10.9.1",",
      ""typescript": "~5.2.2",",
      ""url-loader": "^4.1.1"",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test-app": {
    "children": {
      ".babelrc": {
        "content": [
          "{",
          ""presets": [",
          "[",
          ""@nx/react/babel",",
          "{",
          ""runtime": "automatic"",
          "}",
          "]",
          "],",
          ""plugins": []",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/.babelrc",
      },
      ".eslintrc.json": {
        "content": [
          "{",
          ""extends": ["plugin:@nx/react", "../.eslintrc.json"],",
          ""ignorePatterns": ["!**/*"],",
          ""overrides": [",
          "{",
          ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.js", "*.jsx"],",
          ""rules": {}",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/.eslintrc.json",
      },
      "postcss.config.js": {
        "content": [
          "const { join } = require('path');",
          "// Note: If you use library-specific PostCSS/Tailwind configuration then you should remove the \`postcssConfig\` build",
          "// option from your application's configuration (i.e. project.json).",
          "//",
          "// See: https://nx.dev/guides/using-tailwind-css-in-react#step-4:-applying-configuration-to-libraries",
          "module.exports = {",
          "plugins: {",
          "tailwindcss: {",
          "config: join(__dirname, 'tailwind.config.js'),",
          "},",
          "autoprefixer: {},",
          "},",
          "};",
        ],
        "isBinary": false,
        "path": "./test-app/postcss.config.js",
      },
      "project.json": {
        "content": [
          "{",
          ""name": "test-app",",
          ""$schema": "../node_modules/nx/schemas/project-schema.json",",
          ""sourceRoot": "test-app/src",",
          ""projectType": "application",",
          ""targets": {",
          ""build": {",
          ""executor": "@nx/webpack:webpack",",
          ""outputs": ["{options.outputPath}"],",
          ""defaultConfiguration": "production",",
          ""options": {",
          ""compiler": "babel",",
          ""outputPath": "dist/test-app",",
          ""index": "test-app/src/index.html",",
          ""baseHref": "/",",
          ""main": "test-app/src/main.tsx",",
          ""tsConfig": "test-app/tsconfig.app.json",",
          ""assets": ["test-app/src/favicon.ico", "test-app/src/assets"],",
          ""styles": ["test-app/src/styles.css"],",
          ""scripts": [],",
          ""isolatedConfig": true,",
          ""webpackConfig": "test-app/webpack.config.js",",
          ""postcssConfig": "test-app/postcss.config.js"",
          "},",
          ""configurations": {",
          ""development": {",
          ""extractLicenses": false,",
          ""optimization": false,",
          ""sourceMap": true,",
          ""vendorChunk": true",
          "},",
          ""production": {",
          ""fileReplacements": [",
          "{",
          ""replace": "test-app/src/environments/environment.ts",",
          ""with": "test-app/src/environments/environment.prod.ts"",
          "}",
          "],",
          ""optimization": true,",
          ""outputHashing": "all",",
          ""sourceMap": false,",
          ""namedChunks": false,",
          ""extractLicenses": true,",
          ""vendorChunk": false",
          "}",
          "}",
          "},",
          ""serve": {",
          ""executor": "@nx/webpack:dev-server",",
          ""defaultConfiguration": "development",",
          ""options": {",
          ""buildTarget": "test-app:build",",
          ""hmr": true",
          "},",
          ""configurations": {",
          ""development": {",
          ""buildTarget": "test-app:build:development"",
          "},",
          ""production": {",
          ""buildTarget": "test-app:build:production",",
          ""hmr": false",
          "}",
          "}",
          "},",
          ""lint": {",
          ""executor": "@nx/eslint:lint",",
          ""outputs": ["{options.outputFile}"],",
          ""options": {",
          ""lintFilePatterns": ["test-app/**/*.{ts,tsx,js,jsx}"]",
          "}",
          "}",
          "},",
          ""tags": []",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/project.json",
      },
      "src": {
        "children": {
          "app": {
            "children": {
              "app-layout.tsx": {
                "content": [
                  "import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';",
                  "import { ReactNode } from 'react';",
                  "import { Link, useLocation } from 'react-router-dom';",
                  "export function AppLayout({ children }: { children: ReactNode }) {",
                  "const { pathname } = useLocation();",
                  "const pages = [",
                  "{ label: 'Airdrop', path: '/airdrop' },",
                  "{ label: 'Page 1', path: '/page-1' },",
                  "{ label: 'Page 2', path: '/page-2' },",
                  "];",
                  "return (",
                  "<div className="h-full flex flex-col">",
                  "<div className="navbar bg-base-300 text-neutral-content">",
                  "<div className="flex-1">",
                  "<Link to="/" className="btn btn-ghost normal-case text-xl">",
                  "@solana-developers/preset-react",
                  "</Link>",
                  "<ul className="menu menu-horizontal px-1">",
                  "{pages.map(({ label, path }) => (",
                  "<li key={path}>",
                  "<Link",
                  "className={pathname.startsWith(path) ? 'active' : ''}",
                  "to={path}",
                  ">",
                  "{label}",
                  "</Link>",
                  "</li>",
                  "))}",
                  "</ul>",
                  "</div>",
                  "<div className="flex-none">",
                  "<WalletMultiButton />",
                  "</div>",
                  "</div>",
                  "<div className="flex-grow">{children}</div>",
                  "<footer className="footer footer-center p-4 bg-base-300 text-base-content">",
                  "<aside>",
                  "<p>Generated with @solana-developers/preset-react@0.0.1</p>",
                  "</aside>",
                  "</footer>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/app-layout.tsx",
              },
              "app-routes.tsx": {
                "content": [
                  "import { CounterIDL } from '@proj/anchor';",
                  "import { useRoutes } from 'react-router-dom';",
                  "import { Airdrop } from './pages/airdrop';",
                  "import { Page1 } from './pages/page-1';",
                  "import { Page2 } from './pages/page-2';",
                  "export function AppRoutes() {",
                  "return useRoutes([",
                  "{",
                  "index: true,",
                  "path: '/',",
                  "element: <pre>{JSON.stringify(CounterIDL, null, 2)}</pre>,",
                  "},",
                  "{ path: '/airdrop', element: <Airdrop /> },",
                  "{ path: '/page-1', element: <Page1 /> },",
                  "{ path: '/page-2', element: <Page2 /> },",
                  "]);",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/app-routes.tsx",
              },
              "app.tsx": {
                "content": [
                  "import { AppLayout } from './app-layout';",
                  "import { AppRoutes } from './app-routes';",
                  "import { SolanaProvider } from './solana-provider';",
                  "export function App() {",
                  "return (",
                  "<SolanaProvider>",
                  "<AppLayout>",
                  "<AppRoutes />",
                  "</AppLayout>",
                  "</SolanaProvider>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/app.tsx",
              },
              "pages": {
                "children": {
                  "airdrop.tsx": {
                    "content": [
                      "import { useConnection, useWallet } from '@solana/wallet-adapter-react';",
                      "import { useCallback } from 'react';",
                      "import { TransactionSignature, LAMPORTS_PER_SOL } from '@solana/web3.js';",
                      "import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';",
                      "export function Airdrop() {",
                      "const { connection } = useConnection();",
                      "const { publicKey } = useWallet();",
                      "const request = useCallback(async () => {",
                      "if (!publicKey) {",
                      "console.log('error', 'Wallet not connected!');",
                      "console.log({",
                      "type: 'error',",
                      "message: 'error',",
                      "description: 'Wallet not connected!',",
                      "});",
                      "return;",
                      "}",
                      "let signature: TransactionSignature = '';",
                      "try {",
                      "signature = await connection.requestAirdrop(publicKey, LAMPORTS_PER_SOL);",
                      "// Get the lates block hash to use on our transaction and confirmation",
                      "const latestBlockhash = await connection.getLatestBlockhash();",
                      "await connection.confirmTransaction(",
                      "{ signature, ...latestBlockhash },",
                      "'confirmed'",
                      ");",
                      "console.log({",
                      "type: 'success',",
                      "message: 'Airdrop successful!',",
                      "txid: signature,",
                      "});",
                      "// getUserSOLBalance(publicKey, connection);",
                      "} catch (error: any) {",
                      "console.log({",
                      "type: 'error',",
                      "message: \`Airdrop failed!\`,",
                      "description: error?.message,",
                      "txid: signature,",
                      "});",
                      "console.log(error);",
                      "console.log('error', \`Airdrop failed! \${error?.message}\`, signature);",
                      "}",
                      "}, [publicKey, connection]);",
                      "return (",
                      "<div className="hero py-[100px]">",
                      "<div className="hero-content text-center">",
                      "<div className="max-w-md">",
                      "<h1 className="text-5xl font-bold">Airdrop</h1>",
                      "<p className="py-6">",
                      "You can request an airdrop of 1 SOL to your wallet address.",
                      "</p>",
                      "{publicKey ? (",
                      "<button onClick={request} className="btn btn-primary">",
                      "Request Airdrop",
                      "</button>",
                      ") : (",
                      "<WalletMultiButton />",
                      ")}",
                      "</div>",
                      "</div>",
                      "</div>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./test-app/src/app/pages/airdrop.tsx",
                  },
                  "page-1.tsx": {
                    "content": [
                      "export function Page1() {",
                      "return (",
                      "<div>",
                      "<h1>Page 1</h1>",
                      "<p>",
                      "This is the generated <code>page-1.tsx</code> component.",
                      "</p>",
                      "</div>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./test-app/src/app/pages/page-1.tsx",
                  },
                  "page-2.tsx": {
                    "content": [
                      "export function Page2() {",
                      "return (",
                      "<div>",
                      "<h1>Page 2</h1>",
                      "<p>",
                      "This is the generated <code>page-2.tsx</code> component.",
                      "</p>",
                      "</div>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./test-app/src/app/pages/page-2.tsx",
                  },
                },
                "path": "./test-app/src/app/pages",
              },
              "solana-provider.tsx": {
                "content": [
                  "import { WalletError } from '@solana/wallet-adapter-base';",
                  "import {",
                  "ConnectionProvider,",
                  "WalletProvider,",
                  "} from '@solana/wallet-adapter-react';",
                  "import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';",
                  "import { SolflareWalletAdapter } from '@solana/wallet-adapter-solflare';",
                  "import { UnsafeBurnerWalletAdapter } from '@solana/wallet-adapter-unsafe-burner';",
                  "import { Cluster, clusterApiUrl } from '@solana/web3.js';",
                  "import {",
                  "createContext,",
                  "ReactNode,",
                  "useCallback,",
                  "useContext,",
                  "useMemo,",
                  "useState,",
                  "} from 'react';",
                  "require('@solana/wallet-adapter-react-ui/styles.css');",
                  "export interface SolanaProviderContext {",
                  "cluster: Cluster;",
                  "endpoint: string;",
                  "setCluster?: (cluster: Cluster) => void;",
                  "}",
                  "const Context = createContext<SolanaProviderContext>(",
                  "{} as SolanaProviderContext",
                  ");",
                  "export function SolanaProvider({ children }: { children: ReactNode }) {",
                  "const [cluster, setCluster] = useState<Cluster>('devnet');",
                  "const endpoint = useMemo(() => clusterApiUrl(cluster), [cluster]);",
                  "const wallets = useMemo(",
                  "() => [new UnsafeBurnerWalletAdapter(), new SolflareWalletAdapter()],",
                  "[cluster]",
                  ");",
                  "const onError = useCallback((error: WalletError) => {",
                  "console.error(error);",
                  "}, []);",
                  "const value: SolanaProviderContext = {",
                  "cluster,",
                  "endpoint,",
                  "setCluster,",
                  "};",
                  "return (",
                  "<ConnectionProvider endpoint={endpoint}>",
                  "<WalletProvider wallets={wallets} onError={onError} autoConnect={true}>",
                  "<WalletModalProvider>",
                  "<Context.Provider value={value}>{children}</Context.Provider>",
                  "</WalletModalProvider>",
                  "</WalletProvider>",
                  "</ConnectionProvider>",
                  ");",
                  "}",
                  "export function useSolana() {",
                  "return useContext(Context);",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/solana-provider.tsx",
              },
            },
            "path": "./test-app/src/app",
          },
          "assets": {
            "children": {
              ".gitkeep": {
                "content": [],
                "isBinary": false,
                "path": "./test-app/src/assets/.gitkeep",
              },
            },
            "path": "./test-app/src/assets",
          },
          "environments": {
            "children": {
              "environment.prod.ts": {
                "content": [
                  "export const environment = {",
                  "production: true,",
                  "};",
                ],
                "isBinary": false,
                "path": "./test-app/src/environments/environment.prod.ts",
              },
              "environment.ts": {
                "content": [
                  "// This file can be replaced during build by using the \`fileReplacements\` array.",
                  "// When building for production, this file is replaced with \`environment.prod.ts\`.",
                  "export const environment = {",
                  "production: false,",
                  "};",
                ],
                "isBinary": false,
                "path": "./test-app/src/environments/environment.ts",
              },
            },
            "path": "./test-app/src/environments",
          },
          "favicon.ico": {
            "content": null,
            "isBinary": true,
            "path": "./test-app/src/favicon.ico",
          },
          "index.html": {
            "content": [
              "<!DOCTYPE html>",
              "<html lang="en">",
              "<head>",
              "<meta charset="utf-8" />",
              "<title>@solana-developers/preset-react</title>",
              "<base href="/" />",
              "<meta",
              "name="viewport"",
              "content="width=device-width, initial-scale=1, maximum-scale=1"",
              "/>",
              "<link rel="icon" type="image/x-icon" href="favicon.ico" />",
              "</head>",
              "<body>",
              "<div id="root"></div>",
              "</body>",
              "</html>",
            ],
            "isBinary": false,
            "path": "./test-app/src/index.html",
          },
          "main.tsx": {
            "content": [
              "import { StrictMode } from 'react';",
              "import * as ReactDOM from 'react-dom/client';",
              "import { BrowserRouter } from 'react-router-dom';",
              "import { App } from './app/app';",
              "const root = ReactDOM.createRoot(",
              "document.getElementById('root') as HTMLElement",
              ");",
              "root.render(",
              "<StrictMode>",
              "<BrowserRouter>",
              "<App />",
              "</BrowserRouter>",
              "</StrictMode>",
              ");",
            ],
            "isBinary": false,
            "path": "./test-app/src/main.tsx",
          },
          "styles.css": {
            "content": [
              "@tailwind base;",
              "@tailwind components;",
              "@tailwind utilities;",
              "@tailwind base;",
              "@tailwind components;",
              "@tailwind utilities;",
              "html,",
              "body,",
              "#root {",
              "height: 100%;",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/src/styles.css",
          },
        },
        "path": "./test-app/src",
      },
      "tailwind.config.js": {
        "content": [
          "const { createGlobPatternsForDependencies } = require('@nx/react/tailwind');",
          "const { join } = require('path');",
          "/** @type {import('tailwindcss').Config} */",
          "module.exports = {",
          "content: [",
          "join(",
          "__dirname,",
          "'{src,pages,components,app}/**/*!(*.stories|*.spec).{ts,tsx,html}'",
          "),",
          "...createGlobPatternsForDependencies(__dirname),",
          "],",
          "theme: {",
          "extend: {},",
          "},",
          "plugins: [require('daisyui')],",
          "};",
        ],
        "isBinary": false,
        "path": "./test-app/tailwind.config.js",
      },
      "tsconfig.app.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""types": [",
          ""node",",
          ""@nx/react/typings/cssmodule.d.ts",",
          ""@nx/react/typings/image.d.ts"",
          "]",
          "},",
          ""exclude": [",
          ""jest.config.ts",",
          ""src/**/*.spec.ts",",
          ""src/**/*.test.ts",",
          ""src/**/*.spec.tsx",",
          ""src/**/*.test.tsx",",
          ""src/**/*.spec.js",",
          ""src/**/*.test.js",",
          ""src/**/*.spec.jsx",",
          ""src/**/*.test.jsx"",
          "],",
          ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/tsconfig.app.json",
      },
      "tsconfig.json": {
        "content": [
          "{",
          ""compilerOptions": {",
          ""jsx": "react-jsx",",
          ""allowJs": false,",
          ""esModuleInterop": false,",
          ""allowSyntheticDefaultImports": true,",
          ""strict": true",
          "},",
          ""files": [],",
          ""include": [],",
          ""references": [",
          "{",
          ""path": "./tsconfig.app.json"",
          "}",
          "],",
          ""extends": "../tsconfig.base.json"",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/tsconfig.json",
      },
      "webpack.config.js": {
        "content": [
          "const { composePlugins, withNx } = require('@nx/webpack');",
          "const { withReact } = require('@nx/react');",
          "// Nx plugins for webpack.",
          "module.exports = composePlugins(withNx(), withReact(), (config) => {",
          "// Update the webpack config as needed here.",
          "// e.g. \`config.plugins.push(new MyPlugin())\`",
          "config.ignoreWarnings = [/Failed to parse source map/];",
          "return config;",
          "});",
        ],
        "isBinary": false,
        "path": "./test-app/webpack.config.js",
      },
    },
    "path": "./test-app",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {",
      ""@proj/anchor": ["anchor/src/index.ts"]",
      "}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;
