// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`anchor-template generator should be able to generate two templates side by side 1`] = `
{
  "Anchor.toml": {
    "content": [
      "[toolchain]",
      "[features]",
      "seeds = false",
      "skip-lint = false",
      "[programs.localnet]",
      "counter_two = "GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA"",
      "[registry]",
      "url = "https://api.apr.dev"",
      "[provider]",
      "cluster = "Localnet"",
      "wallet = "~/.config/solana/id.json"",
      "[scripts]",
      "test = "../node_modules/.bin/nx run test:jest"",
      "[test]",
      "startup_wait = 5000",
      "shutdown_wait = 2000",
      "upgradeable = false",
      "[test.validator]",
      "bind_address = "127.0.0.1"",
      "ledger = ".anchor/test-ledger"",
      "rpc_port = 8899",
    ],
    "isBinary": false,
    "path": "target/Anchor.toml",
  },
  "Cargo.lock": {
    "content": null,
    "isBinary": true,
    "path": "target/Cargo.lock",
  },
  "programs": {
    "children": {
      "counter-one": {
        "children": {
          "Cargo.toml": {
            "content": [
              "[package]",
              "name = "counter-one"",
              "version = "0.1.0"",
              "description = "Created with Anchor"",
              "edition = "2021"",
              "[lib]",
              "crate-type = ["cdylib", "lib"]",
              "name = "counter_one"",
              "[features]",
              "no-entrypoint = []",
              "no-idl = []",
              "no-log-ix-name = []",
              "cpi = ["no-entrypoint"]",
              "default = []",
              "idl-build = ["anchor-lang/idl-build"]",
              "[dependencies]",
              "anchor-lang = "0.30.0"",
            ],
            "isBinary": false,
            "path": "target/programs/counter-one/Cargo.toml",
          },
          "Xargo.toml": {
            "content": [
              "[target.bpfel-unknown-unknown.dependencies.std]",
              "features = []",
            ],
            "isBinary": false,
            "path": "target/programs/counter-one/Xargo.toml",
          },
          "src": {
            "children": {
              "lib.rs": {
                "content": [
                  "#![allow(clippy::result_large_err)]",
                  "use anchor_lang::prelude::*;",
                  "declare_id!("GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA");",
                  "#[program]",
                  "pub mod counter_one {",
                  "use super::*;",
                  "pub fn close(_ctx: Context<CloseCounterOne>) -> Result<()> {",
                  "Ok(())",
                  "}",
                  "pub fn decrement(ctx: Context<Update>) -> Result<()> {",
                  "ctx.accounts.counter_one.count = ctx.accounts.counter_one.count.checked_sub(1).unwrap();",
                  "Ok(())",
                  "}",
                  "pub fn increment(ctx: Context<Update>) -> Result<()> {",
                  "ctx.accounts.counter_one.count = ctx.accounts.counter_one.count.checked_add(1).unwrap();",
                  "Ok(())",
                  "}",
                  "pub fn initialize(_ctx: Context<InitializeCounterOne>) -> Result<()> {",
                  "Ok(())",
                  "}",
                  "pub fn set(ctx: Context<Update>, value: u8) -> Result<()> {",
                  "ctx.accounts.counter_one.count = value.clone();",
                  "Ok(())",
                  "}",
                  "}",
                  "#[derive(Accounts)]",
                  "pub struct InitializeCounterOne<'info> {",
                  "#[account(mut)]",
                  "pub payer: Signer<'info>,",
                  "#[account(",
                  "init,",
                  "space = 8 + CounterOne::INIT_SPACE,",
                  "payer = payer",
                  ")]",
                  "pub counter_one: Account<'info, CounterOne>,",
                  "pub system_program: Program<'info, System>,",
                  "}",
                  "#[derive(Accounts)]",
                  "pub struct CloseCounterOne<'info> {",
                  "#[account(mut)]",
                  "pub payer: Signer<'info>,",
                  "#[account(",
                  "mut,",
                  "close = payer, // close account and return lamports to payer",
                  ")]",
                  "pub counter_one: Account<'info, CounterOne>,",
                  "}",
                  "#[derive(Accounts)]",
                  "pub struct Update<'info> {",
                  "#[account(mut)]",
                  "pub counter_one: Account<'info, CounterOne>,",
                  "}",
                  "#[account]",
                  "#[derive(InitSpace)]",
                  "pub struct CounterOne {",
                  "count: u8,",
                  "}",
                ],
                "isBinary": false,
                "path": "target/programs/counter-one/src/lib.rs",
              },
            },
            "path": "target/programs/counter-one/src",
          },
        },
        "path": "target/programs/counter-one",
      },
      "counter-two": {
        "children": {
          "Cargo.toml": {
            "content": [
              "[package]",
              "name = "counter-two"",
              "version = "0.1.0"",
              "description = "Created with Anchor"",
              "edition = "2021"",
              "[lib]",
              "crate-type = ["cdylib", "lib"]",
              "name = "counter_two"",
              "[features]",
              "no-entrypoint = []",
              "no-idl = []",
              "no-log-ix-name = []",
              "cpi = ["no-entrypoint"]",
              "default = []",
              "idl-build = ["anchor-lang/idl-build"]",
              "[dependencies]",
              "anchor-lang = "0.30.0"",
            ],
            "isBinary": false,
            "path": "target/programs/counter-two/Cargo.toml",
          },
          "Xargo.toml": {
            "content": [
              "[target.bpfel-unknown-unknown.dependencies.std]",
              "features = []",
            ],
            "isBinary": false,
            "path": "target/programs/counter-two/Xargo.toml",
          },
          "src": {
            "children": {
              "lib.rs": {
                "content": [
                  "#![allow(clippy::result_large_err)]",
                  "use anchor_lang::prelude::*;",
                  "declare_id!("GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA");",
                  "#[program]",
                  "pub mod counter_two {",
                  "use super::*;",
                  "pub fn close(_ctx: Context<CloseCounterTwo>) -> Result<()> {",
                  "Ok(())",
                  "}",
                  "pub fn decrement(ctx: Context<Update>) -> Result<()> {",
                  "ctx.accounts.counter_two.count = ctx.accounts.counter_two.count.checked_sub(1).unwrap();",
                  "Ok(())",
                  "}",
                  "pub fn increment(ctx: Context<Update>) -> Result<()> {",
                  "ctx.accounts.counter_two.count = ctx.accounts.counter_two.count.checked_add(1).unwrap();",
                  "Ok(())",
                  "}",
                  "pub fn initialize(_ctx: Context<InitializeCounterTwo>) -> Result<()> {",
                  "Ok(())",
                  "}",
                  "pub fn set(ctx: Context<Update>, value: u8) -> Result<()> {",
                  "ctx.accounts.counter_two.count = value.clone();",
                  "Ok(())",
                  "}",
                  "}",
                  "#[derive(Accounts)]",
                  "pub struct InitializeCounterTwo<'info> {",
                  "#[account(mut)]",
                  "pub payer: Signer<'info>,",
                  "#[account(",
                  "init,",
                  "space = 8 + CounterTwo::INIT_SPACE,",
                  "payer = payer",
                  ")]",
                  "pub counter_two: Account<'info, CounterTwo>,",
                  "pub system_program: Program<'info, System>,",
                  "}",
                  "#[derive(Accounts)]",
                  "pub struct CloseCounterTwo<'info> {",
                  "#[account(mut)]",
                  "pub payer: Signer<'info>,",
                  "#[account(",
                  "mut,",
                  "close = payer, // close account and return lamports to payer",
                  ")]",
                  "pub counter_two: Account<'info, CounterTwo>,",
                  "}",
                  "#[derive(Accounts)]",
                  "pub struct Update<'info> {",
                  "#[account(mut)]",
                  "pub counter_two: Account<'info, CounterTwo>,",
                  "}",
                  "#[account]",
                  "#[derive(InitSpace)]",
                  "pub struct CounterTwo {",
                  "count: u8,",
                  "}",
                ],
                "isBinary": false,
                "path": "target/programs/counter-two/src/lib.rs",
              },
            },
            "path": "target/programs/counter-two/src",
          },
        },
        "path": "target/programs/counter-two",
      },
    },
    "path": "target/programs",
  },
  "src": {
    "children": {
      "counter-one-exports.ts": {
        "content": [
          "// Here we export some useful types and functions for interacting with the Anchor program.",
          "import { AnchorProvider, Program } from '@coral-xyz/anchor';",
          "import { Cluster, PublicKey } from '@solana/web3.js';",
          "import CounterOneIDL from '../target/idl/counter_one.json';",
          "import type { CounterOne } from '../target/types/counter_one';",
          "// Re-export the generated IDL and type",
          "export { CounterOne, CounterOneIDL };",
          "// The programId is imported from the program IDL.",
          "export const COUNTER_ONE_PROGRAM_ID = new PublicKey(CounterOneIDL.address)",
          "// This is a helper function to get the CounterOne Anchor program.",
          "export function getCounterOneProgram(provider: AnchorProvider) {",
          "return new Program(CounterOneIDL as CounterOne, provider);",
          "}",
          "// This is a helper function to get the program ID for the CounterOne program depending on the cluster.",
          "export function getCounterOneProgramId(cluster: Cluster) {",
          "switch (cluster) {",
          "case 'devnet':",
          "case 'testnet':",
          "case 'mainnet-beta':",
          "default:",
          "return COUNTER_ONE_PROGRAM_ID",
          "}",
          "}",
        ],
        "isBinary": false,
        "path": "target/src/counter-one-exports.ts",
      },
      "counter-two-exports.ts": {
        "content": [
          "// Here we export some useful types and functions for interacting with the Anchor program.",
          "import { AnchorProvider, Program } from '@coral-xyz/anchor';",
          "import { Cluster, PublicKey } from '@solana/web3.js';",
          "import CounterTwoIDL from '../target/idl/counter_two.json';",
          "import type { CounterTwo } from '../target/types/counter_two';",
          "// Re-export the generated IDL and type",
          "export { CounterTwo, CounterTwoIDL };",
          "// The programId is imported from the program IDL.",
          "export const COUNTER_TWO_PROGRAM_ID = new PublicKey(CounterTwoIDL.address)",
          "// This is a helper function to get the CounterTwo Anchor program.",
          "export function getCounterTwoProgram(provider: AnchorProvider) {",
          "return new Program(CounterTwoIDL as CounterTwo, provider);",
          "}",
          "// This is a helper function to get the program ID for the CounterTwo program depending on the cluster.",
          "export function getCounterTwoProgramId(cluster: Cluster) {",
          "switch (cluster) {",
          "case 'devnet':",
          "case 'testnet':",
          "case 'mainnet-beta':",
          "default:",
          "return COUNTER_TWO_PROGRAM_ID",
          "}",
          "}",
        ],
        "isBinary": false,
        "path": "target/src/counter-two-exports.ts",
      },
      "index.ts": {
        "content": [
          "export * from './counter-one-exports'",
          "export * from './counter-two-exports'",
        ],
        "isBinary": false,
        "path": "target/src/index.ts",
      },
    },
    "path": "target/src",
  },
  "target": {
    "children": {
      "deploy": {
        "children": {
          "counter_one-keypair.json": {
            "content": [
              "[102,57,177,113,190,89,227,160,193,179,207,89,103,112,83,251,142,20,242,30,81,26,82,85,207,97,28,129,190,28,128,71,228,27,114,255,63,136,164,140,185,151,50,58,148,32,197,184,85,144,79,78,24,248,25,138,254,31,96,78,56,230,148,1]",
            ],
            "isBinary": false,
            "path": "target/target/deploy/counter_one-keypair.json",
          },
          "counter_two-keypair.json": {
            "content": [
              "[102,57,177,113,190,89,227,160,193,179,207,89,103,112,83,251,142,20,242,30,81,26,82,85,207,97,28,129,190,28,128,71,228,27,114,255,63,136,164,140,185,151,50,58,148,32,197,184,85,144,79,78,24,248,25,138,254,31,96,78,56,230,148,1]",
            ],
            "isBinary": false,
            "path": "target/target/deploy/counter_two-keypair.json",
          },
        },
        "path": "target/target/deploy",
      },
      "idl": {
        "children": {
          "counter_one.json": {
            "content": [
              "{",
              ""address": "GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA",",
              ""metadata": {",
              ""name": "counter_one",",
              ""version": "0.1.0",",
              ""spec": "0.1.0",",
              ""description": "Created with Anchor"",
              "},",
              ""instructions": [",
              "{",
              ""name": "close",",
              ""discriminator": [",
              "98,",
              "165,",
              "201,",
              "177,",
              "108,",
              "65,",
              "206,",
              "96",
              "],",
              ""accounts": [",
              "{",
              ""name": "payer",",
              ""writable": true,",
              ""signer": true",
              "},",
              "{",
              ""name": "counter_one",",
              ""writable": true",
              "}",
              "],",
              ""args": []",
              "},",
              "{",
              ""name": "decrement",",
              ""discriminator": [",
              "106,",
              "227,",
              "168,",
              "59,",
              "248,",
              "27,",
              "150,",
              "101",
              "],",
              ""accounts": [",
              "{",
              ""name": "counter_one",",
              ""writable": true",
              "}",
              "],",
              ""args": []",
              "},",
              "{",
              ""name": "increment",",
              ""discriminator": [",
              "11,",
              "18,",
              "104,",
              "9,",
              "104,",
              "174,",
              "59,",
              "33",
              "],",
              ""accounts": [",
              "{",
              ""name": "counter_one",",
              ""writable": true",
              "}",
              "],",
              ""args": []",
              "},",
              "{",
              ""name": "initialize",",
              ""discriminator": [",
              "175,",
              "175,",
              "109,",
              "31,",
              "13,",
              "152,",
              "155,",
              "237",
              "],",
              ""accounts": [",
              "{",
              ""name": "payer",",
              ""writable": true,",
              ""signer": true",
              "},",
              "{",
              ""name": "counter_one",",
              ""writable": true,",
              ""signer": true",
              "},",
              "{",
              ""name": "system_program",",
              ""address": "11111111111111111111111111111111"",
              "}",
              "],",
              ""args": []",
              "},",
              "{",
              ""name": "set",",
              ""discriminator": [",
              "198,",
              "51,",
              "53,",
              "241,",
              "116,",
              "29,",
              "126,",
              "194",
              "],",
              ""accounts": [",
              "{",
              ""name": "counter_one",",
              ""writable": true",
              "}",
              "],",
              ""args": [",
              "{",
              ""name": "value",",
              ""type": "u8"",
              "}",
              "]",
              "}",
              "],",
              ""accounts": [",
              "{",
              ""name": "CounterOne",",
              ""discriminator": [",
              "135,",
              "64,",
              "223,",
              "168,",
              "233,",
              "143,",
              "162,",
              "215",
              "]",
              "}",
              "],",
              ""types": [",
              "{",
              ""name": "CounterOne",",
              ""type": {",
              ""kind": "struct",",
              ""fields": [",
              "{",
              ""name": "count",",
              ""type": "u8"",
              "}",
              "]",
              "}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "target/target/idl/counter_one.json",
          },
          "counter_two.json": {
            "content": [
              "{",
              ""address": "GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA",",
              ""metadata": {",
              ""name": "counter_two",",
              ""version": "0.1.0",",
              ""spec": "0.1.0",",
              ""description": "Created with Anchor"",
              "},",
              ""instructions": [",
              "{",
              ""name": "close",",
              ""discriminator": [",
              "98,",
              "165,",
              "201,",
              "177,",
              "108,",
              "65,",
              "206,",
              "96",
              "],",
              ""accounts": [",
              "{",
              ""name": "payer",",
              ""writable": true,",
              ""signer": true",
              "},",
              "{",
              ""name": "counter_two",",
              ""writable": true",
              "}",
              "],",
              ""args": []",
              "},",
              "{",
              ""name": "decrement",",
              ""discriminator": [",
              "106,",
              "227,",
              "168,",
              "59,",
              "248,",
              "27,",
              "150,",
              "101",
              "],",
              ""accounts": [",
              "{",
              ""name": "counter_two",",
              ""writable": true",
              "}",
              "],",
              ""args": []",
              "},",
              "{",
              ""name": "increment",",
              ""discriminator": [",
              "11,",
              "18,",
              "104,",
              "9,",
              "104,",
              "174,",
              "59,",
              "33",
              "],",
              ""accounts": [",
              "{",
              ""name": "counter_two",",
              ""writable": true",
              "}",
              "],",
              ""args": []",
              "},",
              "{",
              ""name": "initialize",",
              ""discriminator": [",
              "175,",
              "175,",
              "109,",
              "31,",
              "13,",
              "152,",
              "155,",
              "237",
              "],",
              ""accounts": [",
              "{",
              ""name": "payer",",
              ""writable": true,",
              ""signer": true",
              "},",
              "{",
              ""name": "counter_two",",
              ""writable": true,",
              ""signer": true",
              "},",
              "{",
              ""name": "system_program",",
              ""address": "11111111111111111111111111111111"",
              "}",
              "],",
              ""args": []",
              "},",
              "{",
              ""name": "set",",
              ""discriminator": [",
              "198,",
              "51,",
              "53,",
              "241,",
              "116,",
              "29,",
              "126,",
              "194",
              "],",
              ""accounts": [",
              "{",
              ""name": "counter_two",",
              ""writable": true",
              "}",
              "],",
              ""args": [",
              "{",
              ""name": "value",",
              ""type": "u8"",
              "}",
              "]",
              "}",
              "],",
              ""accounts": [",
              "{",
              ""name": "CounterTwo",",
              ""discriminator": [",
              "135,",
              "64,",
              "223,",
              "168,",
              "233,",
              "143,",
              "162,",
              "215",
              "]",
              "}",
              "],",
              ""types": [",
              "{",
              ""name": "CounterTwo",",
              ""type": {",
              ""kind": "struct",",
              ""fields": [",
              "{",
              ""name": "count",",
              ""type": "u8"",
              "}",
              "]",
              "}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "target/target/idl/counter_two.json",
          },
        },
        "path": "target/target/idl",
      },
      "types": {
        "children": {
          "counter_one.ts": {
            "content": [
              "/**",
              "* Program IDL in camelCase format in order to be used in JS/TS.",
              "*",
              "* Note that this is only a type helper and is not the actual IDL. The original",
              "* IDL can be found at \`target/idl/counter_one.json\`.",
              "*/",
              "export type CounterOne = {",
              "address: 'GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA';",
              "metadata: {",
              "name: 'counterOne';",
              "version: '0.1.0';",
              "spec: '0.1.0';",
              "description: 'Created with Anchor';",
              "};",
              "instructions: [",
              "{",
              "name: 'close';",
              "discriminator: [98, 165, 201, 177, 108, 65, 206, 96];",
              "accounts: [",
              "{",
              "name: 'payer';",
              "writable: true;",
              "signer: true;",
              "},",
              "{",
              "name: 'counterOne';",
              "writable: true;",
              "}",
              "];",
              "args: [];",
              "},",
              "{",
              "name: 'decrement';",
              "discriminator: [106, 227, 168, 59, 248, 27, 150, 101];",
              "accounts: [",
              "{",
              "name: 'counterOne';",
              "writable: true;",
              "}",
              "];",
              "args: [];",
              "},",
              "{",
              "name: 'increment';",
              "discriminator: [11, 18, 104, 9, 104, 174, 59, 33];",
              "accounts: [",
              "{",
              "name: 'counterOne';",
              "writable: true;",
              "}",
              "];",
              "args: [];",
              "},",
              "{",
              "name: 'initialize';",
              "discriminator: [175, 175, 109, 31, 13, 152, 155, 237];",
              "accounts: [",
              "{",
              "name: 'payer';",
              "writable: true;",
              "signer: true;",
              "},",
              "{",
              "name: 'counterOne';",
              "writable: true;",
              "signer: true;",
              "},",
              "{",
              "name: 'systemProgram';",
              "address: '11111111111111111111111111111111';",
              "}",
              "];",
              "args: [];",
              "},",
              "{",
              "name: 'set';",
              "discriminator: [198, 51, 53, 241, 116, 29, 126, 194];",
              "accounts: [",
              "{",
              "name: 'counterOne';",
              "writable: true;",
              "}",
              "];",
              "args: [",
              "{",
              "name: 'value';",
              "type: 'u8';",
              "}",
              "];",
              "}",
              "];",
              "accounts: [",
              "{",
              "name: 'counterOne';",
              "discriminator: [135, 64, 223, 168, 233, 143, 162, 215];",
              "}",
              "];",
              "types: [",
              "{",
              "name: 'counterOne';",
              "type: {",
              "kind: 'struct';",
              "fields: [",
              "{",
              "name: 'count';",
              "type: 'u8';",
              "}",
              "];",
              "};",
              "}",
              "];",
              "};",
            ],
            "isBinary": false,
            "path": "target/target/types/counter_one.ts",
          },
          "counter_two.ts": {
            "content": [
              "/**",
              "* Program IDL in camelCase format in order to be used in JS/TS.",
              "*",
              "* Note that this is only a type helper and is not the actual IDL. The original",
              "* IDL can be found at \`target/idl/counter_two.json\`.",
              "*/",
              "export type CounterTwo = {",
              "address: 'GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA';",
              "metadata: {",
              "name: 'counterTwo';",
              "version: '0.1.0';",
              "spec: '0.1.0';",
              "description: 'Created with Anchor';",
              "};",
              "instructions: [",
              "{",
              "name: 'close';",
              "discriminator: [98, 165, 201, 177, 108, 65, 206, 96];",
              "accounts: [",
              "{",
              "name: 'payer';",
              "writable: true;",
              "signer: true;",
              "},",
              "{",
              "name: 'counterTwo';",
              "writable: true;",
              "}",
              "];",
              "args: [];",
              "},",
              "{",
              "name: 'decrement';",
              "discriminator: [106, 227, 168, 59, 248, 27, 150, 101];",
              "accounts: [",
              "{",
              "name: 'counterTwo';",
              "writable: true;",
              "}",
              "];",
              "args: [];",
              "},",
              "{",
              "name: 'increment';",
              "discriminator: [11, 18, 104, 9, 104, 174, 59, 33];",
              "accounts: [",
              "{",
              "name: 'counterTwo';",
              "writable: true;",
              "}",
              "];",
              "args: [];",
              "},",
              "{",
              "name: 'initialize';",
              "discriminator: [175, 175, 109, 31, 13, 152, 155, 237];",
              "accounts: [",
              "{",
              "name: 'payer';",
              "writable: true;",
              "signer: true;",
              "},",
              "{",
              "name: 'counterTwo';",
              "writable: true;",
              "signer: true;",
              "},",
              "{",
              "name: 'systemProgram';",
              "address: '11111111111111111111111111111111';",
              "}",
              "];",
              "args: [];",
              "},",
              "{",
              "name: 'set';",
              "discriminator: [198, 51, 53, 241, 116, 29, 126, 194];",
              "accounts: [",
              "{",
              "name: 'counterTwo';",
              "writable: true;",
              "}",
              "];",
              "args: [",
              "{",
              "name: 'value';",
              "type: 'u8';",
              "}",
              "];",
              "}",
              "];",
              "accounts: [",
              "{",
              "name: 'counterTwo';",
              "discriminator: [135, 64, 223, 168, 233, 143, 162, 215];",
              "}",
              "];",
              "types: [",
              "{",
              "name: 'counterTwo';",
              "type: {",
              "kind: 'struct';",
              "fields: [",
              "{",
              "name: 'count';",
              "type: 'u8';",
              "}",
              "];",
              "};",
              "}",
              "];",
              "};",
            ],
            "isBinary": false,
            "path": "target/target/types/counter_two.ts",
          },
        },
        "path": "target/target/types",
      },
    },
    "path": "target/target",
  },
  "tests": {
    "children": {
      "counter-one.spec.ts": {
        "content": [
          "import * as anchor from '@coral-xyz/anchor'",
          "import { Program } from '@coral-xyz/anchor'",
          "import { Keypair } from '@solana/web3.js'",
          "import { CounterOne } from "../target/types/counter_one";",
          "describe("counter-one", () => {",
          "// Configure the client to use the local cluster.",
          "const provider = anchor.AnchorProvider.env()",
          "anchor.setProvider(provider)",
          "const payer = provider.wallet as anchor.Wallet",
          "const program = anchor.workspace.CounterOne as Program<CounterOne>;",
          "const counterOneKeypair = Keypair.generate()",
          "it('Initialize CounterOne', async () => {",
          "await program.methods",
          ".initialize()",
          ".accounts({",
          "counterOne: counterOneKeypair.publicKey,",
          "payer: payer.publicKey,",
          "})",
          ".signers([counterOneKeypair])",
          ".rpc()",
          "const currentCount = await program.account.counterOne.fetch(counterOneKeypair.publicKey)",
          "expect(currentCount.count).toEqual(0)",
          "})",
          "it('Increment CounterOne', async () => {",
          "await program.methods.increment().accounts({ counterOne: counterOneKeypair.publicKey }).rpc()",
          "const currentCount = await program.account.counterOne.fetch(counterOneKeypair.publicKey)",
          "expect(currentCount.count).toEqual(1)",
          "})",
          "it('Increment CounterOne Again', async () => {",
          "await program.methods.increment().accounts({ counterOne: counterOneKeypair.publicKey }).rpc()",
          "const currentCount = await program.account.counterOne.fetch(counterOneKeypair.publicKey)",
          "expect(currentCount.count).toEqual(2)",
          "})",
          "it('Decrement CounterOne', async () => {",
          "await program.methods.decrement().accounts({ counterOne: counterOneKeypair.publicKey }).rpc()",
          "const currentCount = await program.account.counterOne.fetch(counterOneKeypair.publicKey)",
          "expect(currentCount.count).toEqual(1)",
          "})",
          "it('Set counterOne value', async () => {",
          "await program.methods.set(42).accounts({ counterOne: counterOneKeypair.publicKey }).rpc()",
          "const currentCount = await program.account.counterOne.fetch(counterOneKeypair.publicKey)",
          "expect(currentCount.count).toEqual(42)",
          "})",
          "it('Set close the counterOne account', async () => {",
          "await program.methods",
          ".close()",
          ".accounts({",
          "payer: payer.publicKey,",
          "counterOne: counterOneKeypair.publicKey,",
          "})",
          ".rpc()",
          "// The account should no longer exist, returning null.",
          "const userAccount = await program.account.counterOne.fetchNullable(counterOneKeypair.publicKey)",
          "expect(userAccount).toBeNull()",
          "})",
          "})",
        ],
        "isBinary": false,
        "path": "target/tests/counter-one.spec.ts",
      },
      "counter-two.spec.ts": {
        "content": [
          "import * as anchor from '@coral-xyz/anchor'",
          "import { Program } from '@coral-xyz/anchor'",
          "import { Keypair } from '@solana/web3.js'",
          "import { CounterTwo } from "../target/types/counter_two";",
          "describe("counter-two", () => {",
          "// Configure the client to use the local cluster.",
          "const provider = anchor.AnchorProvider.env()",
          "anchor.setProvider(provider)",
          "const payer = provider.wallet as anchor.Wallet",
          "const program = anchor.workspace.CounterTwo as Program<CounterTwo>;",
          "const counterTwoKeypair = Keypair.generate()",
          "it('Initialize CounterTwo', async () => {",
          "await program.methods",
          ".initialize()",
          ".accounts({",
          "counterTwo: counterTwoKeypair.publicKey,",
          "payer: payer.publicKey,",
          "})",
          ".signers([counterTwoKeypair])",
          ".rpc()",
          "const currentCount = await program.account.counterTwo.fetch(counterTwoKeypair.publicKey)",
          "expect(currentCount.count).toEqual(0)",
          "})",
          "it('Increment CounterTwo', async () => {",
          "await program.methods.increment().accounts({ counterTwo: counterTwoKeypair.publicKey }).rpc()",
          "const currentCount = await program.account.counterTwo.fetch(counterTwoKeypair.publicKey)",
          "expect(currentCount.count).toEqual(1)",
          "})",
          "it('Increment CounterTwo Again', async () => {",
          "await program.methods.increment().accounts({ counterTwo: counterTwoKeypair.publicKey }).rpc()",
          "const currentCount = await program.account.counterTwo.fetch(counterTwoKeypair.publicKey)",
          "expect(currentCount.count).toEqual(2)",
          "})",
          "it('Decrement CounterTwo', async () => {",
          "await program.methods.decrement().accounts({ counterTwo: counterTwoKeypair.publicKey }).rpc()",
          "const currentCount = await program.account.counterTwo.fetch(counterTwoKeypair.publicKey)",
          "expect(currentCount.count).toEqual(1)",
          "})",
          "it('Set counterTwo value', async () => {",
          "await program.methods.set(42).accounts({ counterTwo: counterTwoKeypair.publicKey }).rpc()",
          "const currentCount = await program.account.counterTwo.fetch(counterTwoKeypair.publicKey)",
          "expect(currentCount.count).toEqual(42)",
          "})",
          "it('Set close the counterTwo account', async () => {",
          "await program.methods",
          ".close()",
          ".accounts({",
          "payer: payer.publicKey,",
          "counterTwo: counterTwoKeypair.publicKey,",
          "})",
          ".rpc()",
          "// The account should no longer exist, returning null.",
          "const userAccount = await program.account.counterTwo.fetchNullable(counterTwoKeypair.publicKey)",
          "expect(userAccount).toBeNull()",
          "})",
          "})",
        ],
        "isBinary": false,
        "path": "target/tests/counter-two.spec.ts",
      },
    },
    "path": "target/tests",
  },
}
`;

exports[`anchor-template generator should generate files for base template 1`] = `
{
  "Anchor.toml": {
    "content": [
      "[toolchain]",
      "[features]",
      "seeds = false",
      "skip-lint = false",
      "[programs.localnet]",
      "[registry]",
      "url = "https://api.apr.dev"",
      "[provider]",
      "cluster = "Localnet"",
      "wallet = "~/.config/solana/id.json"",
      "[scripts]",
      "test = "../node_modules/.bin/nx run test:jest"",
      "[test]",
      "startup_wait = 5000",
      "shutdown_wait = 2000",
      "upgradeable = false",
      "[test.validator]",
      "bind_address = "127.0.0.1"",
      "ledger = ".anchor/test-ledger"",
      "rpc_port = 8899",
    ],
    "isBinary": false,
    "path": "target/Anchor.toml",
  },
  "Cargo.toml": {
    "content": [
      "[workspace]",
      "members = [",
      ""programs/*"",
      "]",
      "resolver = "2"",
      "[profile.release]",
      "overflow-checks = true",
      "lto = "fat"",
      "codegen-units = 1",
      "[profile.release.build-override]",
      "opt-level = 3",
      "incremental = false",
      "codegen-units = 1",
    ],
    "isBinary": false,
    "path": "target/Cargo.toml",
  },
  "migrations": {
    "children": {
      "deploy.ts": {
        "content": [
          "// Migrations are an early feature. Currently, they're nothing more than this",
          "// single deploy script that's invoked from the CLI, injecting a provider",
          "// configured from the workspace's Anchor.toml.",
          "import * as anchor from '@coral-xyz/anchor';",
          "module.exports = async function (provider) {",
          "// Configure client to use the provider.",
          "anchor.setProvider(provider);",
          "// Add your deploy script here.",
          "};",
        ],
        "isBinary": false,
        "path": "target/migrations/deploy.ts",
      },
    },
    "path": "target/migrations",
  },
  "src": {
    "children": {
      "index.ts": {
        "content": [
          "// This file was generated by preset-anchor. Programs are exported from this file.",
          "export * from './base-exports'",
        ],
        "isBinary": false,
        "path": "target/src/index.ts",
      },
    },
    "path": "target/src",
  },
}
`;

exports[`anchor-template generator should generate files for basic template 1`] = `
{
  "Anchor.toml": {
    "content": [
      "[toolchain]",
      "[features]",
      "seeds = false",
      "skip-lint = false",
      "[programs.localnet]",
      "basic = "GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA"",
      "[registry]",
      "url = "https://api.apr.dev"",
      "[provider]",
      "cluster = "Localnet"",
      "wallet = "~/.config/solana/id.json"",
      "[scripts]",
      "test = "../node_modules/.bin/nx run test:jest"",
      "[test]",
      "startup_wait = 5000",
      "shutdown_wait = 2000",
      "upgradeable = false",
      "[test.validator]",
      "bind_address = "127.0.0.1"",
      "ledger = ".anchor/test-ledger"",
      "rpc_port = 8899",
    ],
    "isBinary": false,
    "path": "target/Anchor.toml",
  },
  "Cargo.lock": {
    "content": null,
    "isBinary": true,
    "path": "target/Cargo.lock",
  },
  "programs": {
    "children": {
      "basic": {
        "children": {
          "Cargo.toml": {
            "content": [
              "[package]",
              "name = "basic"",
              "version = "0.1.0"",
              "description = "Created with Anchor"",
              "edition = "2021"",
              "[lib]",
              "crate-type = ["cdylib", "lib"]",
              "name = "basic"",
              "[features]",
              "no-entrypoint = []",
              "no-idl = []",
              "no-log-ix-name = []",
              "cpi = ["no-entrypoint"]",
              "default = []",
              "idl-build = ["anchor-lang/idl-build"]",
              "[dependencies]",
              "anchor-lang = "0.30.0"",
            ],
            "isBinary": false,
            "path": "target/programs/basic/Cargo.toml",
          },
          "Xargo.toml": {
            "content": [
              "[target.bpfel-unknown-unknown.dependencies.std]",
              "features = []",
            ],
            "isBinary": false,
            "path": "target/programs/basic/Xargo.toml",
          },
          "src": {
            "children": {
              "lib.rs": {
                "content": [
                  "use anchor_lang::prelude::*;",
                  "declare_id!("GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA");",
                  "#[program]",
                  "pub mod basic {",
                  "use super::*;",
                  "pub fn greet(_ctx: Context<Initialize>) -> Result<()> {",
                  "msg!("GM!");",
                  "Ok(())",
                  "}",
                  "}",
                  "#[derive(Accounts)]",
                  "pub struct Initialize {}",
                ],
                "isBinary": false,
                "path": "target/programs/basic/src/lib.rs",
              },
            },
            "path": "target/programs/basic/src",
          },
        },
        "path": "target/programs/basic",
      },
    },
    "path": "target/programs",
  },
  "src": {
    "children": {
      "basic-exports.ts": {
        "content": [
          "// Here we export some useful types and functions for interacting with the Anchor program.",
          "import { AnchorProvider, Program } from '@coral-xyz/anchor';",
          "import { PublicKey } from '@solana/web3.js';",
          "import type { Basic } from '../target/types/basic';",
          "import { IDL as BasicIDL } from '../target/types/basic';",
          "// Re-export the generated IDL and type",
          "export { Basic, BasicIDL };",
          "// The programId is imported from the program IDL.",
          "export const BASIC_PROGRAM_ID = new PublicKey(BasicIDL.address)",
          "// This is a helper function to get the Basic Anchor program.",
          "export function getBasicProgram(provider: AnchorProvider) {",
          "return new Program(BasicIDL as Basic, provider);",
          "}",
        ],
        "isBinary": false,
        "path": "target/src/basic-exports.ts",
      },
      "index.ts": {
        "content": [
          "export * from './basic-exports'",
        ],
        "isBinary": false,
        "path": "target/src/index.ts",
      },
    },
    "path": "target/src",
  },
  "target": {
    "children": {
      "deploy": {
        "children": {
          "basic-keypair.json": {
            "content": [
              "[102,57,177,113,190,89,227,160,193,179,207,89,103,112,83,251,142,20,242,30,81,26,82,85,207,97,28,129,190,28,128,71,228,27,114,255,63,136,164,140,185,151,50,58,148,32,197,184,85,144,79,78,24,248,25,138,254,31,96,78,56,230,148,1]",
            ],
            "isBinary": false,
            "path": "target/target/deploy/basic-keypair.json",
          },
        },
        "path": "target/target/deploy",
      },
      "idl": {
        "children": {
          "basic.json": {
            "content": [
              "{",
              ""address": "GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA",",
              ""metadata": {",
              ""name": "basic",",
              ""version": "0.1.0",",
              ""spec": "0.1.0",",
              ""description": "Created with Anchor"",
              "},",
              ""instructions": [",
              "{",
              ""name": "greet",",
              ""discriminator": [",
              "203,",
              "194,",
              "3,",
              "150,",
              "228,",
              "58,",
              "181,",
              "62",
              "],",
              ""accounts": [],",
              ""args": []",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "target/target/idl/basic.json",
          },
        },
        "path": "target/target/idl",
      },
      "types": {
        "children": {
          "basic.ts": {
            "content": [
              "/**",
              "* Program IDL in camelCase format in order to be used in JS/TS.",
              "*",
              "* Note that this is only a type helper and is not the actual IDL. The original",
              "* IDL can be found at \`target/idl/basic.json\`.",
              "*/",
              "export type Basic = {",
              "address: 'GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA';",
              "metadata: {",
              "name: 'basic';",
              "version: '0.1.0';",
              "spec: '0.1.0';",
              "description: 'Created with Anchor';",
              "};",
              "instructions: [",
              "{",
              "name: 'greet';",
              "discriminator: [203, 194, 3, 150, 228, 58, 181, 62];",
              "accounts: [];",
              "args: [];",
              "}",
              "];",
              "};",
            ],
            "isBinary": false,
            "path": "target/target/types/basic.ts",
          },
        },
        "path": "target/target/types",
      },
    },
    "path": "target/target",
  },
  "tests": {
    "children": {
      "basic.spec.ts": {
        "content": [
          "import * as anchor from "@coral-xyz/anchor";",
          "import { Program } from "@coral-xyz/anchor";",
          "import { Basic } from "../target/types/basic";",
          "describe("basic", () => {",
          "// Configure the client to use the local cluster.",
          "anchor.setProvider(anchor.AnchorProvider.env());",
          "const program = anchor.workspace.Basic as Program<Basic>;",
          "it("should run the program", async () => {",
          "// Add your test here.",
          "const tx = await program.methods.greet().rpc();",
          "console.log("Your transaction signature", tx);",
          "});",
          "});",
        ],
        "isBinary": false,
        "path": "target/tests/basic.spec.ts",
      },
    },
    "path": "target/tests",
  },
}
`;

exports[`anchor-template generator should generate files for counter template 1`] = `
{
  "Anchor.toml": {
    "content": [
      "[toolchain]",
      "[features]",
      "seeds = false",
      "skip-lint = false",
      "[programs.localnet]",
      "counter = "GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA"",
      "[registry]",
      "url = "https://api.apr.dev"",
      "[provider]",
      "cluster = "Localnet"",
      "wallet = "~/.config/solana/id.json"",
      "[scripts]",
      "test = "../node_modules/.bin/nx run test:jest"",
      "[test]",
      "startup_wait = 5000",
      "shutdown_wait = 2000",
      "upgradeable = false",
      "[test.validator]",
      "bind_address = "127.0.0.1"",
      "ledger = ".anchor/test-ledger"",
      "rpc_port = 8899",
    ],
    "isBinary": false,
    "path": "target/Anchor.toml",
  },
  "Cargo.lock": {
    "content": null,
    "isBinary": true,
    "path": "target/Cargo.lock",
  },
  "programs": {
    "children": {
      "counter": {
        "children": {
          "Cargo.toml": {
            "content": [
              "[package]",
              "name = "counter"",
              "version = "0.1.0"",
              "description = "Created with Anchor"",
              "edition = "2021"",
              "[lib]",
              "crate-type = ["cdylib", "lib"]",
              "name = "counter"",
              "[features]",
              "no-entrypoint = []",
              "no-idl = []",
              "no-log-ix-name = []",
              "cpi = ["no-entrypoint"]",
              "default = []",
              "idl-build = ["anchor-lang/idl-build"]",
              "[dependencies]",
              "anchor-lang = "0.30.0"",
            ],
            "isBinary": false,
            "path": "target/programs/counter/Cargo.toml",
          },
          "Xargo.toml": {
            "content": [
              "[target.bpfel-unknown-unknown.dependencies.std]",
              "features = []",
            ],
            "isBinary": false,
            "path": "target/programs/counter/Xargo.toml",
          },
          "src": {
            "children": {
              "lib.rs": {
                "content": [
                  "#![allow(clippy::result_large_err)]",
                  "use anchor_lang::prelude::*;",
                  "declare_id!("GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA");",
                  "#[program]",
                  "pub mod counter {",
                  "use super::*;",
                  "pub fn close(_ctx: Context<CloseCounter>) -> Result<()> {",
                  "Ok(())",
                  "}",
                  "pub fn decrement(ctx: Context<Update>) -> Result<()> {",
                  "ctx.accounts.counter.count = ctx.accounts.counter.count.checked_sub(1).unwrap();",
                  "Ok(())",
                  "}",
                  "pub fn increment(ctx: Context<Update>) -> Result<()> {",
                  "ctx.accounts.counter.count = ctx.accounts.counter.count.checked_add(1).unwrap();",
                  "Ok(())",
                  "}",
                  "pub fn initialize(_ctx: Context<InitializeCounter>) -> Result<()> {",
                  "Ok(())",
                  "}",
                  "pub fn set(ctx: Context<Update>, value: u8) -> Result<()> {",
                  "ctx.accounts.counter.count = value.clone();",
                  "Ok(())",
                  "}",
                  "}",
                  "#[derive(Accounts)]",
                  "pub struct InitializeCounter<'info> {",
                  "#[account(mut)]",
                  "pub payer: Signer<'info>,",
                  "#[account(",
                  "init,",
                  "space = 8 + Counter::INIT_SPACE,",
                  "payer = payer",
                  ")]",
                  "pub counter: Account<'info, Counter>,",
                  "pub system_program: Program<'info, System>,",
                  "}",
                  "#[derive(Accounts)]",
                  "pub struct CloseCounter<'info> {",
                  "#[account(mut)]",
                  "pub payer: Signer<'info>,",
                  "#[account(",
                  "mut,",
                  "close = payer, // close account and return lamports to payer",
                  ")]",
                  "pub counter: Account<'info, Counter>,",
                  "}",
                  "#[derive(Accounts)]",
                  "pub struct Update<'info> {",
                  "#[account(mut)]",
                  "pub counter: Account<'info, Counter>,",
                  "}",
                  "#[account]",
                  "#[derive(InitSpace)]",
                  "pub struct Counter {",
                  "count: u8,",
                  "}",
                ],
                "isBinary": false,
                "path": "target/programs/counter/src/lib.rs",
              },
            },
            "path": "target/programs/counter/src",
          },
        },
        "path": "target/programs/counter",
      },
    },
    "path": "target/programs",
  },
  "src": {
    "children": {
      "counter-exports.ts": {
        "content": [
          "// Here we export some useful types and functions for interacting with the Anchor program.",
          "import { AnchorProvider, Program } from '@coral-xyz/anchor';",
          "import { Cluster, PublicKey } from '@solana/web3.js';",
          "import CounterIDL from '../target/idl/counter.json';",
          "import type { Counter } from '../target/types/counter';",
          "// Re-export the generated IDL and type",
          "export { Counter, CounterIDL };",
          "// The programId is imported from the program IDL.",
          "export const COUNTER_PROGRAM_ID = new PublicKey(CounterIDL.address)",
          "// This is a helper function to get the Counter Anchor program.",
          "export function getCounterProgram(provider: AnchorProvider) {",
          "return new Program(CounterIDL as Counter, provider);",
          "}",
          "// This is a helper function to get the program ID for the Counter program depending on the cluster.",
          "export function getCounterProgramId(cluster: Cluster) {",
          "switch (cluster) {",
          "case 'devnet':",
          "case 'testnet':",
          "// This is the program ID for the Counter program on devnet and testnet.",
          "return new PublicKey('CounNZdmsQmWh7uVngV9FXW2dZ6zAgbJyYsvBpqbykg')",
          "case 'mainnet-beta':",
          "default:",
          "return COUNTER_PROGRAM_ID",
          "}",
          "}",
        ],
        "isBinary": false,
        "path": "target/src/counter-exports.ts",
      },
      "index.ts": {
        "content": [
          "export * from './counter-exports'",
        ],
        "isBinary": false,
        "path": "target/src/index.ts",
      },
    },
    "path": "target/src",
  },
  "target": {
    "children": {
      "deploy": {
        "children": {
          "counter-keypair.json": {
            "content": [
              "[102,57,177,113,190,89,227,160,193,179,207,89,103,112,83,251,142,20,242,30,81,26,82,85,207,97,28,129,190,28,128,71,228,27,114,255,63,136,164,140,185,151,50,58,148,32,197,184,85,144,79,78,24,248,25,138,254,31,96,78,56,230,148,1]",
            ],
            "isBinary": false,
            "path": "target/target/deploy/counter-keypair.json",
          },
        },
        "path": "target/target/deploy",
      },
      "idl": {
        "children": {
          "counter.json": {
            "content": [
              "{",
              ""address": "GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA",",
              ""metadata": {",
              ""name": "counter",",
              ""version": "0.1.0",",
              ""spec": "0.1.0",",
              ""description": "Created with Anchor"",
              "},",
              ""instructions": [",
              "{",
              ""name": "close",",
              ""discriminator": [",
              "98,",
              "165,",
              "201,",
              "177,",
              "108,",
              "65,",
              "206,",
              "96",
              "],",
              ""accounts": [",
              "{",
              ""name": "payer",",
              ""writable": true,",
              ""signer": true",
              "},",
              "{",
              ""name": "counter",",
              ""writable": true",
              "}",
              "],",
              ""args": []",
              "},",
              "{",
              ""name": "decrement",",
              ""discriminator": [",
              "106,",
              "227,",
              "168,",
              "59,",
              "248,",
              "27,",
              "150,",
              "101",
              "],",
              ""accounts": [",
              "{",
              ""name": "counter",",
              ""writable": true",
              "}",
              "],",
              ""args": []",
              "},",
              "{",
              ""name": "increment",",
              ""discriminator": [",
              "11,",
              "18,",
              "104,",
              "9,",
              "104,",
              "174,",
              "59,",
              "33",
              "],",
              ""accounts": [",
              "{",
              ""name": "counter",",
              ""writable": true",
              "}",
              "],",
              ""args": []",
              "},",
              "{",
              ""name": "initialize",",
              ""discriminator": [",
              "175,",
              "175,",
              "109,",
              "31,",
              "13,",
              "152,",
              "155,",
              "237",
              "],",
              ""accounts": [",
              "{",
              ""name": "payer",",
              ""writable": true,",
              ""signer": true",
              "},",
              "{",
              ""name": "counter",",
              ""writable": true,",
              ""signer": true",
              "},",
              "{",
              ""name": "system_program",",
              ""address": "11111111111111111111111111111111"",
              "}",
              "],",
              ""args": []",
              "},",
              "{",
              ""name": "set",",
              ""discriminator": [",
              "198,",
              "51,",
              "53,",
              "241,",
              "116,",
              "29,",
              "126,",
              "194",
              "],",
              ""accounts": [",
              "{",
              ""name": "counter",",
              ""writable": true",
              "}",
              "],",
              ""args": [",
              "{",
              ""name": "value",",
              ""type": "u8"",
              "}",
              "]",
              "}",
              "],",
              ""accounts": [",
              "{",
              ""name": "Counter",",
              ""discriminator": [",
              "135,",
              "64,",
              "223,",
              "168,",
              "233,",
              "143,",
              "162,",
              "215",
              "]",
              "}",
              "],",
              ""types": [",
              "{",
              ""name": "Counter",",
              ""type": {",
              ""kind": "struct",",
              ""fields": [",
              "{",
              ""name": "count",",
              ""type": "u8"",
              "}",
              "]",
              "}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "target/target/idl/counter.json",
          },
        },
        "path": "target/target/idl",
      },
      "types": {
        "children": {
          "counter.ts": {
            "content": [
              "/**",
              "* Program IDL in camelCase format in order to be used in JS/TS.",
              "*",
              "* Note that this is only a type helper and is not the actual IDL. The original",
              "* IDL can be found at \`target/idl/counter.json\`.",
              "*/",
              "export type Counter = {",
              "address: 'GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA';",
              "metadata: {",
              "name: 'counter';",
              "version: '0.1.0';",
              "spec: '0.1.0';",
              "description: 'Created with Anchor';",
              "};",
              "instructions: [",
              "{",
              "name: 'close';",
              "discriminator: [98, 165, 201, 177, 108, 65, 206, 96];",
              "accounts: [",
              "{",
              "name: 'payer';",
              "writable: true;",
              "signer: true;",
              "},",
              "{",
              "name: 'counter';",
              "writable: true;",
              "}",
              "];",
              "args: [];",
              "},",
              "{",
              "name: 'decrement';",
              "discriminator: [106, 227, 168, 59, 248, 27, 150, 101];",
              "accounts: [",
              "{",
              "name: 'counter';",
              "writable: true;",
              "}",
              "];",
              "args: [];",
              "},",
              "{",
              "name: 'increment';",
              "discriminator: [11, 18, 104, 9, 104, 174, 59, 33];",
              "accounts: [",
              "{",
              "name: 'counter';",
              "writable: true;",
              "}",
              "];",
              "args: [];",
              "},",
              "{",
              "name: 'initialize';",
              "discriminator: [175, 175, 109, 31, 13, 152, 155, 237];",
              "accounts: [",
              "{",
              "name: 'payer';",
              "writable: true;",
              "signer: true;",
              "},",
              "{",
              "name: 'counter';",
              "writable: true;",
              "signer: true;",
              "},",
              "{",
              "name: 'systemProgram';",
              "address: '11111111111111111111111111111111';",
              "}",
              "];",
              "args: [];",
              "},",
              "{",
              "name: 'set';",
              "discriminator: [198, 51, 53, 241, 116, 29, 126, 194];",
              "accounts: [",
              "{",
              "name: 'counter';",
              "writable: true;",
              "}",
              "];",
              "args: [",
              "{",
              "name: 'value';",
              "type: 'u8';",
              "}",
              "];",
              "}",
              "];",
              "accounts: [",
              "{",
              "name: 'counter';",
              "discriminator: [135, 64, 223, 168, 233, 143, 162, 215];",
              "}",
              "];",
              "types: [",
              "{",
              "name: 'counter';",
              "type: {",
              "kind: 'struct';",
              "fields: [",
              "{",
              "name: 'count';",
              "type: 'u8';",
              "}",
              "];",
              "};",
              "}",
              "];",
              "};",
            ],
            "isBinary": false,
            "path": "target/target/types/counter.ts",
          },
        },
        "path": "target/target/types",
      },
    },
    "path": "target/target",
  },
  "tests": {
    "children": {
      "counter.spec.ts": {
        "content": [
          "import * as anchor from '@coral-xyz/anchor'",
          "import { Program } from '@coral-xyz/anchor'",
          "import { Keypair } from '@solana/web3.js'",
          "import { Counter } from "../target/types/counter";",
          "describe("counter", () => {",
          "// Configure the client to use the local cluster.",
          "const provider = anchor.AnchorProvider.env()",
          "anchor.setProvider(provider)",
          "const payer = provider.wallet as anchor.Wallet",
          "const program = anchor.workspace.Counter as Program<Counter>;",
          "const counterKeypair = Keypair.generate()",
          "it('Initialize Counter', async () => {",
          "await program.methods",
          ".initialize()",
          ".accounts({",
          "counter: counterKeypair.publicKey,",
          "payer: payer.publicKey,",
          "})",
          ".signers([counterKeypair])",
          ".rpc()",
          "const currentCount = await program.account.counter.fetch(counterKeypair.publicKey)",
          "expect(currentCount.count).toEqual(0)",
          "})",
          "it('Increment Counter', async () => {",
          "await program.methods.increment().accounts({ counter: counterKeypair.publicKey }).rpc()",
          "const currentCount = await program.account.counter.fetch(counterKeypair.publicKey)",
          "expect(currentCount.count).toEqual(1)",
          "})",
          "it('Increment Counter Again', async () => {",
          "await program.methods.increment().accounts({ counter: counterKeypair.publicKey }).rpc()",
          "const currentCount = await program.account.counter.fetch(counterKeypair.publicKey)",
          "expect(currentCount.count).toEqual(2)",
          "})",
          "it('Decrement Counter', async () => {",
          "await program.methods.decrement().accounts({ counter: counterKeypair.publicKey }).rpc()",
          "const currentCount = await program.account.counter.fetch(counterKeypair.publicKey)",
          "expect(currentCount.count).toEqual(1)",
          "})",
          "it('Set counter value', async () => {",
          "await program.methods.set(42).accounts({ counter: counterKeypair.publicKey }).rpc()",
          "const currentCount = await program.account.counter.fetch(counterKeypair.publicKey)",
          "expect(currentCount.count).toEqual(42)",
          "})",
          "it('Set close the counter account', async () => {",
          "await program.methods",
          ".close()",
          ".accounts({",
          "payer: payer.publicKey,",
          "counter: counterKeypair.publicKey,",
          "})",
          ".rpc()",
          "// The account should no longer exist, returning null.",
          "const userAccount = await program.account.counter.fetchNullable(counterKeypair.publicKey)",
          "expect(userAccount).toBeNull()",
          "})",
          "})",
        ],
        "isBinary": false,
        "path": "target/tests/counter.spec.ts",
      },
    },
    "path": "target/tests",
  },
}
`;
