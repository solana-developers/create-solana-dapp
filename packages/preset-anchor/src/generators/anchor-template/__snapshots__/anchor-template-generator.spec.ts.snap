// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`anchor-template generator should generate files for base template 1`] = `
{
  "Anchor.toml": {
    "content": [
      "[features]",
      "seeds = false",
      "skip-lint = false",
      "[programs.localnet]",
      "base = "EuJfgknXicf6iZASeagt5U6XDDPpLTQrvWPW31vgAwo8"",
      "[registry]",
      "url = "https://api.apr.dev"",
      "[provider]",
      "cluster = "Localnet"",
      "wallet = "~/.config/solana/id.json"",
      "[scripts]",
      "test = "../node_modules/.bin/nx run test:jest"",
      "[test.validator]",
      "bind_address = "127.0.0.1"",
    ],
    "isBinary": false,
    "path": "target/Anchor.toml",
  },
  "Cargo.lock": {
    "content": null,
    "isBinary": true,
    "path": "target/Cargo.lock",
  },
  "Cargo.toml": {
    "content": [
      "[workspace]",
      "members = [",
      ""programs/*"",
      "]",
      "resolver = "2"",
      "[profile.release]",
      "overflow-checks = true",
      "lto = "fat"",
      "codegen-units = 1",
      "[profile.release.build-override]",
      "opt-level = 3",
      "incremental = false",
      "codegen-units = 1",
    ],
    "isBinary": false,
    "path": "target/Cargo.toml",
  },
  "migrations": {
    "children": {
      "deploy.ts": {
        "content": [
          "// Migrations are an early feature. Currently, they're nothing more than this",
          "// single deploy script that's invoked from the CLI, injecting a provider",
          "// configured from the workspace's Anchor.toml.",
          "const anchor = require("@coral-xyz/anchor");",
          "module.exports = async function (provider) {",
          "// Configure client to use the provider.",
          "anchor.setProvider(provider);",
          "// Add your deploy script here.",
          "};",
        ],
        "isBinary": false,
        "path": "target/migrations/deploy.ts",
      },
    },
    "path": "target/migrations",
  },
}
`;

exports[`anchor-template generator should generate files for counter template 1`] = `
{
  "Anchor.toml": {
    "content": [
      "[features]",
      "seeds = false",
      "skip-lint = false",
      "[programs.localnet]",
      "counter = "EuJfgknXicf6iZASeagt5U6XDDPpLTQrvWPW31vgAwo8"",
      "[registry]",
      "url = "https://api.apr.dev"",
      "[provider]",
      "cluster = "Localnet"",
      "wallet = "~/.config/solana/id.json"",
      "[scripts]",
      "test = "../node_modules/.bin/nx run test:jest"",
      "[test.validator]",
      "bind_address = "127.0.0.1"",
    ],
    "isBinary": false,
    "path": "target/Anchor.toml",
  },
  "programs": {
    "children": {
      "counter": {
        "children": {
          "Cargo.toml": {
            "content": [
              "[package]",
              "name = "counter"",
              "version = "0.1.0"",
              "description = "Created with Anchor"",
              "edition = "2021"",
              "[lib]",
              "crate-type = ["cdylib", "lib"]",
              "name = "counter"",
              "[features]",
              "no-entrypoint = []",
              "no-idl = []",
              "no-log-ix-name = []",
              "cpi = ["no-entrypoint"]",
              "default = []",
              "[dependencies]",
              "anchor-lang = "0.28.0"",
            ],
            "isBinary": false,
            "path": "target/programs/counter/Cargo.toml",
          },
          "Xargo.toml": {
            "content": [
              "[target.bpfel-unknown-unknown.dependencies.std]",
              "features = []",
            ],
            "isBinary": false,
            "path": "target/programs/counter/Xargo.toml",
          },
          "src": {
            "children": {
              "lib.rs": {
                "content": [
                  "#![allow(clippy::result_large_err)]",
                  "use anchor_lang::prelude::*;",
                  "declare_id!("EuJfgknXicf6iZASeagt5U6XDDPpLTQrvWPW31vgAwo8");",
                  "#[program]",
                  "pub mod counter {",
                  "use super::*;",
                  "pub fn initialize_counter(_ctx: Context<InitializeCounter>) -> Result<()> {",
                  "Ok(())",
                  "}",
                  "pub fn increment(ctx: Context<Increment>) -> Result<()> {",
                  "ctx.accounts.counter.count = ctx.accounts.counter.count.checked_add(1).unwrap();",
                  "Ok(())",
                  "}",
                  "}",
                  "#[derive(Accounts)]",
                  "pub struct InitializeCounter<'info> {",
                  "#[account(mut)]",
                  "pub payer: Signer<'info>,",
                  "#[account(",
                  "init,",
                  "space = 8 + Counter::INIT_SPACE,",
                  "payer = payer",
                  ")]",
                  "pub counter: Account<'info, Counter>,",
                  "pub system_program: Program<'info, System>,",
                  "}",
                  "#[derive(Accounts)]",
                  "pub struct Increment<'info> {",
                  "#[account(mut)]",
                  "pub counter: Account<'info, Counter>,",
                  "}",
                  "#[account]",
                  "#[derive(InitSpace)]",
                  "pub struct Counter {",
                  "count: u64,",
                  "}",
                ],
                "isBinary": false,
                "path": "target/programs/counter/src/lib.rs",
              },
            },
            "path": "target/programs/counter/src",
          },
        },
        "path": "target/programs/counter",
      },
    },
    "path": "target/programs",
  },
  "src": {
    "children": {
      "index.ts": {
        "content": [
          "import { Program } from '@coral-xyz/anchor';",
          "import { Counter, IDL as CounterIDL } from '../target/types/counter';",
          "export { Counter, CounterIDL };",
          "export type CounterProgram = Program<Counter>;",
        ],
        "isBinary": false,
        "path": "target/src/index.ts",
      },
    },
    "path": "target/src",
  },
  "target": {
    "children": {
      "types": {
        "children": {
          "counter.ts": {
            "content": [
              "export type Counter = {",
              ""version": "0.1.0",",
              ""name": "counter",",
              ""instructions": [",
              "{",
              ""name": "initializeCounter",",
              ""accounts": [",
              "{",
              ""name": "payer",",
              ""isMut": true,",
              ""isSigner": true",
              "},",
              "{",
              ""name": "counter",",
              ""isMut": true,",
              ""isSigner": true",
              "},",
              "{",
              ""name": "systemProgram",",
              ""isMut": false,",
              ""isSigner": false",
              "}",
              "],",
              ""args": []",
              "},",
              "{",
              ""name": "increment",",
              ""accounts": [",
              "{",
              ""name": "counter",",
              ""isMut": true,",
              ""isSigner": false",
              "}",
              "],",
              ""args": []",
              "}",
              "],",
              ""accounts": [",
              "{",
              ""name": "counter",",
              ""type": {",
              ""kind": "struct",",
              ""fields": [",
              "{",
              ""name": "count",",
              ""type": "u64"",
              "}",
              "]",
              "}",
              "}",
              "]",
              "};",
              "export const IDL: Counter = {",
              ""version": "0.1.0",",
              ""name": "counter",",
              ""instructions": [",
              "{",
              ""name": "initializeCounter",",
              ""accounts": [",
              "{",
              ""name": "payer",",
              ""isMut": true,",
              ""isSigner": true",
              "},",
              "{",
              ""name": "counter",",
              ""isMut": true,",
              ""isSigner": true",
              "},",
              "{",
              ""name": "systemProgram",",
              ""isMut": false,",
              ""isSigner": false",
              "}",
              "],",
              ""args": []",
              "},",
              "{",
              ""name": "increment",",
              ""accounts": [",
              "{",
              ""name": "counter",",
              ""isMut": true,",
              ""isSigner": false",
              "}",
              "],",
              ""args": []",
              "}",
              "],",
              ""accounts": [",
              "{",
              ""name": "counter",",
              ""type": {",
              ""kind": "struct",",
              ""fields": [",
              "{",
              ""name": "count",",
              ""type": "u64"",
              "}",
              "]",
              "}",
              "}",
              "]",
              "};",
            ],
            "isBinary": false,
            "path": "target/target/types/counter.ts",
          },
        },
        "path": "target/target/types",
      },
    },
    "path": "target/target",
  },
  "tests": {
    "children": {
      "counter.spec.ts": {
        "content": [
          "import * as anchor from "@coral-xyz/anchor";",
          "import { Program } from "@coral-xyz/anchor";",
          "import { Keypair } from '@solana/web3.js';",
          "import { Counter } from "../target/types/counter";",
          "describe("counter", () => {",
          "// Configure the client to use the local cluster.",
          "const provider = anchor.AnchorProvider.env();",
          "anchor.setProvider(provider);",
          "const payer = provider.wallet as anchor.Wallet;",
          "const program = anchor.workspace.Counter as Program<Counter>;",
          "// Generate a new keypair for the counter account",
          "const counterKeypair = new Keypair();",
          "it('Initialize Counter', async () => {",
          "await program.methods",
          ".initializeCounter()",
          ".accounts({",
          "counter: counterKeypair.publicKey,",
          "payer: payer.publicKey,",
          "})",
          ".signers([counterKeypair])",
          ".rpc();",
          "const currentCount = await program.account.counter.fetch(",
          "counterKeypair.publicKey",
          ");",
          "expect(currentCount.count.toNumber()).toEqual(0);",
          "});",
          "it('Increment Counter', async () => {",
          "await program.methods",
          ".increment()",
          ".accounts({ counter: counterKeypair.publicKey })",
          ".rpc();",
          "const currentCount = await program.account.counter.fetch(",
          "counterKeypair.publicKey",
          ");",
          "expect(currentCount.count.toNumber()).toEqual(1);",
          "});",
          "it('Increment Counter Again', async () => {",
          "await program.methods",
          ".increment()",
          ".accounts({ counter: counterKeypair.publicKey })",
          ".rpc();",
          "const currentCount = await program.account.counter.fetch(",
          "counterKeypair.publicKey",
          ");",
          "expect(currentCount.count.toNumber()).toEqual(2);",
          "});",
          "});",
        ],
        "isBinary": false,
        "path": "target/tests/counter.spec.ts",
      },
    },
    "path": "target/tests",
  },
}
`;

exports[`anchor-template generator should generate files for hello-world template 1`] = `
{
  "Anchor.toml": {
    "content": [
      "[features]",
      "seeds = false",
      "skip-lint = false",
      "[programs.localnet]",
      "hello_world = "EuJfgknXicf6iZASeagt5U6XDDPpLTQrvWPW31vgAwo8"",
      "[registry]",
      "url = "https://api.apr.dev"",
      "[provider]",
      "cluster = "Localnet"",
      "wallet = "~/.config/solana/id.json"",
      "[scripts]",
      "test = "../node_modules/.bin/nx run test:jest"",
      "[test.validator]",
      "bind_address = "127.0.0.1"",
    ],
    "isBinary": false,
    "path": "target/Anchor.toml",
  },
  "programs": {
    "children": {
      "hello-world": {
        "children": {
          "Cargo.toml": {
            "content": [
              "[package]",
              "name = "hello-world"",
              "version = "0.1.0"",
              "description = "Created with Anchor"",
              "edition = "2021"",
              "[lib]",
              "crate-type = ["cdylib", "lib"]",
              "name = "hello_world"",
              "[features]",
              "no-entrypoint = []",
              "no-idl = []",
              "no-log-ix-name = []",
              "cpi = ["no-entrypoint"]",
              "default = []",
              "[dependencies]",
              "anchor-lang = "0.28.0"",
            ],
            "isBinary": false,
            "path": "target/programs/hello-world/Cargo.toml",
          },
          "Xargo.toml": {
            "content": [
              "[target.bpfel-unknown-unknown.dependencies.std]",
              "features = []",
            ],
            "isBinary": false,
            "path": "target/programs/hello-world/Xargo.toml",
          },
          "src": {
            "children": {
              "lib.rs": {
                "content": [
                  "use anchor_lang::prelude::*;",
                  "declare_id!("EuJfgknXicf6iZASeagt5U6XDDPpLTQrvWPW31vgAwo8");",
                  "#[program]",
                  "pub mod hello_world {",
                  "use super::*;",
                  "pub fn initialize(_ctx: Context<Initialize>) -> Result<()> {",
                  "msg!("Hello World!");",
                  "Ok(())",
                  "}",
                  "}",
                  "#[derive(Accounts)]",
                  "pub struct Initialize {}",
                ],
                "isBinary": false,
                "path": "target/programs/hello-world/src/lib.rs",
              },
            },
            "path": "target/programs/hello-world/src",
          },
        },
        "path": "target/programs/hello-world",
      },
    },
    "path": "target/programs",
  },
  "src": {
    "children": {
      "index.ts": {
        "content": [
          "export * from '../target/types/hello_world';",
        ],
        "isBinary": false,
        "path": "target/src/index.ts",
      },
    },
    "path": "target/src",
  },
  "target": {
    "children": {
      "types": {
        "children": {
          "hello_world.ts": {
            "content": [
              "export type HelloWorld = {",
              ""version": "0.1.0",",
              ""name": "hello_world",",
              ""instructions": [",
              "{",
              ""name": "initialize",",
              ""accounts": [],",
              ""args": []",
              "}",
              "]",
              "};",
              "export const IDL: HelloWorld = {",
              ""version": "0.1.0",",
              ""name": "hello_world",",
              ""instructions": [",
              "{",
              ""name": "initialize",",
              ""accounts": [],",
              ""args": []",
              "}",
              "]",
              "};",
            ],
            "isBinary": false,
            "path": "target/target/types/hello_world.ts",
          },
        },
        "path": "target/target/types",
      },
    },
    "path": "target/target",
  },
  "tests": {
    "children": {
      "hello-world.spec.ts": {
        "content": [
          "import * as anchor from "@coral-xyz/anchor";",
          "import { Program } from "@coral-xyz/anchor";",
          "import { HelloWorld } from "../target/types/hello_world";",
          "describe("hello-world", () => {",
          "// Configure the client to use the local cluster.",
          "anchor.setProvider(anchor.AnchorProvider.env());",
          "const program = anchor.workspace.HelloWorld as Program<HelloWorld>;",
          "it("Is initialized!", async () => {",
          "// Add your test here.",
          "const tx = await program.methods.initialize().rpc();",
          "console.log("Your transaction signature", tx);",
          "});",
          "});",
        ],
        "isBinary": false,
        "path": "target/tests/hello-world.spec.ts",
      },
    },
    "path": "target/tests",
  },
}
`;
