// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`anchor-application generator should generate app with "basic" template 1`] = `
{
  ".eslintrc.json": {
    "content": [
      "{",
      ""extends": ["../.eslintrc.json"],",
      ""ignorePatterns": ["!**/*"],",
      ""overrides": [",
      "{",
      ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
      ""rules": {}",
      "},",
      "{",
      ""files": ["*.ts", "*.tsx"],",
      ""rules": {}",
      "},",
      "{",
      ""files": ["*.js", "*.jsx"],",
      ""rules": {}",
      "},",
      "{",
      ""files": ["*.json"],",
      ""parser": "jsonc-eslint-parser",",
      ""rules": {",
      ""@nx/dependency-checks": [",
      ""error",",
      "{",
      ""ignoredFiles": ["{projectRoot}/rollup.config.{js,ts,mjs,mts}"]",
      "}",
      "]",
      "}",
      "}",
      "]",
      "}",
    ],
    "isBinary": false,
    "path": "anchor-app/.eslintrc.json",
  },
  ".swcrc": {
    "content": [
      "{",
      ""jsc": {",
      ""target": "es2017",",
      ""parser": {",
      ""syntax": "typescript",",
      ""decorators": true,",
      ""dynamicImport": true",
      "},",
      ""transform": {",
      ""decoratorMetadata": true,",
      ""legacyDecorator": true",
      "},",
      ""keepClassNames": true,",
      ""externalHelpers": true,",
      ""loose": true",
      "},",
      ""module": {",
      ""type": "es6"",
      "},",
      ""sourceMaps": true,",
      ""exclude": [",
      ""jest.config.ts",",
      "".*\\\\.spec.tsx?$",",
      "".*\\\\.test.tsx?$",",
      ""./src/jest-setup.ts$",",
      ""./**/jest-setup.ts$",",
      "".*.js$"",
      "]",
      "}",
    ],
    "isBinary": false,
    "path": "anchor-app/.swcrc",
  },
  "Anchor.toml": {
    "content": [
      "[toolchain]",
      "[features]",
      "seeds = false",
      "skip-lint = false",
      "[programs.localnet]",
      "my_program = "GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA"",
      "[registry]",
      "url = "https://api.apr.dev"",
      "[provider]",
      "cluster = "Localnet"",
      "wallet = "~/.config/solana/id.json"",
      "[scripts]",
      "test = "../node_modules/.bin/nx run anchor-app:jest"",
      "[test]",
      "startup_wait = 5000",
      "shutdown_wait = 2000",
      "upgradeable = false",
      "[test.validator]",
      "bind_address = "127.0.0.1"",
      "ledger = ".anchor/test-ledger"",
      "rpc_port = 8899",
    ],
    "isBinary": false,
    "path": "anchor-app/Anchor.toml",
  },
  "Cargo.lock": {
    "content": null,
    "isBinary": true,
    "path": "anchor-app/Cargo.lock",
  },
  "Cargo.toml": {
    "content": [
      "[workspace]",
      "members = [",
      ""programs/*"",
      "]",
      "resolver = "2"",
      "[profile.release]",
      "overflow-checks = true",
      "lto = "fat"",
      "codegen-units = 1",
      "[profile.release.build-override]",
      "opt-level = 3",
      "incremental = false",
      "codegen-units = 1",
    ],
    "isBinary": false,
    "path": "anchor-app/Cargo.toml",
  },
  "README.md": {
    "content": [
      "# anchor-app",
      "This library was generated with [Nx](https://nx.dev).",
      "## Building",
      "Run \`nx build anchor-app\` to build the library.",
      "## Running unit tests",
      "Run \`nx test anchor-app\` to execute the unit tests via [Jest](https://jestjs.io).",
    ],
    "isBinary": false,
    "path": "anchor-app/README.md",
  },
  "jest.config.ts": {
    "content": [
      "/* eslint-disable */",
      "import { readFileSync } from 'fs';",
      "// Reading the SWC compilation config and remove the "exclude"",
      "// for the test files to be compiled by SWC",
      "const { exclude: _, ...swcJestConfig } = JSON.parse(",
      "readFileSync(\`\${__dirname}/.swcrc\`, 'utf-8')",
      ");",
      "// disable .swcrc look-up by SWC core because we're passing in swcJestConfig ourselves.",
      "// If we do not disable this, SWC Core will read .swcrc and won't transform our test files due to "exclude"",
      "if (swcJestConfig.swcrc === undefined) {",
      "swcJestConfig.swcrc = false;",
      "}",
      "// Uncomment if using global setup/teardown files being transformed via swc",
      "// https://nx.dev/packages/jest/documents/overview#global-setup/teardown-with-nx-libraries",
      "// jest needs EsModule Interop to find the default exported setup/teardown functions",
      "// swcJestConfig.module.noInterop = false;",
      "export default {",
      "displayName: 'anchor-app',",
      "preset: '../jest.preset.js',",
      "transform: {",
      "'^.+\\\\.[tj]s$': ['@swc/jest', swcJestConfig],",
      "},",
      "moduleFileExtensions: ['ts', 'js', 'html'],",
      "testEnvironment: '',",
      "coverageDirectory: '../coverage/anchor-app',",
      "};",
    ],
    "isBinary": false,
    "path": "anchor-app/jest.config.ts",
  },
  "migrations": {
    "children": {
      "deploy.ts": {
        "content": [
          "// Migrations are an early feature. Currently, they're nothing more than this",
          "// single deploy script that's invoked from the CLI, injecting a provider",
          "// configured from the workspace's Anchor.toml.",
          "import * as anchor from '@coral-xyz/anchor';",
          "module.exports = async function (provider) {",
          "// Configure client to use the provider.",
          "anchor.setProvider(provider);",
          "// Add your deploy script here.",
          "};",
        ],
        "isBinary": false,
        "path": "anchor-app/migrations/deploy.ts",
      },
    },
    "path": "anchor-app/migrations",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/anchor-app",",
      ""version": "0.0.1",",
      ""dependencies": {",
      ""@coral-xyz/anchor": "^0.29.0",",
      ""@solana/web3.js": "1.90.0"",
      "},",
      ""type": "commonjs",",
      ""main": "./index.cjs",",
      ""module": "./index.js",",
      ""private": true",
      "}",
    ],
    "isBinary": false,
    "path": "anchor-app/package.json",
  },
  "programs": {
    "children": {
      "my-program": {
        "children": {
          "Cargo.toml": {
            "content": [
              "[package]",
              "name = "my-program"",
              "version = "0.1.0"",
              "description = "Created with Anchor"",
              "edition = "2021"",
              "[lib]",
              "crate-type = ["cdylib", "lib"]",
              "name = "my_program"",
              "[features]",
              "no-entrypoint = []",
              "no-idl = []",
              "no-log-ix-name = []",
              "cpi = ["no-entrypoint"]",
              "default = []",
              "[dependencies]",
              "anchor-lang = "0.29.0"",
            ],
            "isBinary": false,
            "path": "anchor-app/programs/my-program/Cargo.toml",
          },
          "Xargo.toml": {
            "content": [
              "[target.bpfel-unknown-unknown.dependencies.std]",
              "features = []",
            ],
            "isBinary": false,
            "path": "anchor-app/programs/my-program/Xargo.toml",
          },
          "src": {
            "children": {
              "lib.rs": {
                "content": [
                  "use anchor_lang::prelude::*;",
                  "declare_id!("GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA");",
                  "#[program]",
                  "pub mod my_program {",
                  "use super::*;",
                  "pub fn greet(_ctx: Context<Initialize>) -> Result<()> {",
                  "msg!("GM!");",
                  "Ok(())",
                  "}",
                  "}",
                  "#[derive(Accounts)]",
                  "pub struct Initialize {}",
                ],
                "isBinary": false,
                "path": "anchor-app/programs/my-program/src/lib.rs",
              },
            },
            "path": "anchor-app/programs/my-program/src",
          },
        },
        "path": "anchor-app/programs/my-program",
      },
    },
    "path": "anchor-app/programs",
  },
  "project.json": {
    "content": [
      "{",
      ""name": "anchor-app",",
      ""$schema": "../node_modules/nx/schemas/project-schema.json",",
      ""sourceRoot": "anchor-app/src",",
      ""projectType": "library",",
      ""targets": {",
      ""build": {",
      ""executor": "@nx/rollup:rollup",",
      ""outputs": ["{options.outputPath}"],",
      ""options": {",
      ""outputPath": "dist/anchor-app",",
      ""main": "anchor-app/src/index.ts",",
      ""tsConfig": "anchor-app/tsconfig.lib.json",",
      ""assets": [],",
      ""project": "anchor-app/package.json",",
      ""compiler": "swc",",
      ""format": ["cjs", "esm"]",
      "}",
      "},",
      ""lint": {",
      ""executor": "@nx/eslint:lint"",
      "},",
      ""test": {",
      ""executor": "nx:run-commands",",
      ""options": {",
      ""cwd": "anchor-app",",
      ""commands": ["anchor test"],",
      ""parallel": false",
      "}",
      "},",
      ""anchor": {",
      ""executor": "nx:run-commands",",
      ""options": {",
      ""cwd": "anchor-app",",
      ""commands": ["anchor"],",
      ""parallel": false",
      "}",
      "},",
      ""localnet": {",
      ""executor": "nx:run-commands",",
      ""options": {",
      ""cwd": "anchor-app",",
      ""commands": ["anchor localnet"],",
      ""parallel": false",
      "}",
      "},",
      ""jest": {",
      ""executor": "@nx/jest:jest",",
      ""outputs": ["{workspaceRoot}/coverage/{projectRoot}"],",
      ""options": {",
      ""jestConfig": "anchor-app/jest.config.ts"",
      "}",
      "}",
      "},",
      ""tags": []",
      "}",
    ],
    "isBinary": false,
    "path": "anchor-app/project.json",
  },
  "src": {
    "children": {
      "index.ts": {
        "content": [
          "// This file was generated by preset-anchor. Programs are exported from this file.",
          "export * from './my-program-exports';",
        ],
        "isBinary": false,
        "path": "anchor-app/src/index.ts",
      },
      "my-program-exports.ts": {
        "content": [
          "// Here we export some useful types and functions for interacting with the Anchor program.",
          "import { PublicKey } from '@solana/web3.js';",
          "import type { MyProgram } from '../target/types/my_program';",
          "import { IDL as MyProgramIDL } from '../target/types/my_program';",
          "// Re-export the generated IDL and type",
          "export { MyProgram, MyProgramIDL };",
          "// After updating your program ID (e.g. after running \`anchor keys sync\`) update the value below.",
          "export const programId = new PublicKey(",
          "'GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA'",
          ");",
        ],
        "isBinary": false,
        "path": "anchor-app/src/my-program-exports.ts",
      },
    },
    "path": "anchor-app/src",
  },
  "target": {
    "children": {
      "deploy": {
        "children": {
          "my_program-keypair.json": {
            "content": [
              "[",
              "102, 57, 177, 113, 190, 89, 227, 160, 193, 179, 207, 89, 103, 112, 83, 251,",
              "142, 20, 242, 30, 81, 26, 82, 85, 207, 97, 28, 129, 190, 28, 128, 71, 228, 27,",
              "114, 255, 63, 136, 164, 140, 185, 151, 50, 58, 148, 32, 197, 184, 85, 144, 79,",
              "78, 24, 248, 25, 138, 254, 31, 96, 78, 56, 230, 148, 1",
              "]",
            ],
            "isBinary": false,
            "path": "anchor-app/target/deploy/my_program-keypair.json",
          },
        },
        "path": "anchor-app/target/deploy",
      },
      "idl": {
        "children": {
          "my_program.json": {
            "content": [
              "{",
              ""version": "0.1.0",",
              ""name": "my_program",",
              ""instructions": [",
              "{",
              ""name": "greet",",
              ""accounts": [],",
              ""args": []",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "anchor-app/target/idl/my_program.json",
          },
        },
        "path": "anchor-app/target/idl",
      },
      "types": {
        "children": {
          "my_program.ts": {
            "content": [
              "export type MyProgram = {",
              "version: '0.1.0';",
              "name: 'my_program';",
              "instructions: [",
              "{",
              "name: 'greet';",
              "accounts: [];",
              "args: [];",
              "}",
              "];",
              "};",
              "export const IDL: MyProgram = {",
              "version: '0.1.0',",
              "name: 'my_program',",
              "instructions: [",
              "{",
              "name: 'greet',",
              "accounts: [],",
              "args: [],",
              "},",
              "],",
              "};",
            ],
            "isBinary": false,
            "path": "anchor-app/target/types/my_program.ts",
          },
        },
        "path": "anchor-app/target/types",
      },
    },
    "path": "anchor-app/target",
  },
  "tests": {
    "children": {
      "my-program.spec.ts": {
        "content": [
          "import * as anchor from '@coral-xyz/anchor';",
          "import { Program } from '@coral-xyz/anchor';",
          "import { MyProgram } from '../target/types/my_program';",
          "describe('my-program', () => {",
          "// Configure the client to use the local cluster.",
          "anchor.setProvider(anchor.AnchorProvider.env());",
          "const program = anchor.workspace.MyProgram as Program<MyProgram>;",
          "it('should run the program', async () => {",
          "// Add your test here.",
          "const tx = await program.methods.greet().rpc();",
          "console.log('Your transaction signature', tx);",
          "});",
          "});",
        ],
        "isBinary": false,
        "path": "anchor-app/tests/my-program.spec.ts",
      },
    },
    "path": "anchor-app/tests",
  },
  "tsconfig.json": {
    "content": [
      "{",
      ""extends": "../tsconfig.base.json",",
      ""compilerOptions": {",
      ""module": "commonjs"",
      "},",
      ""files": [],",
      ""include": [],",
      ""references": [",
      "{",
      ""path": "./tsconfig.lib.json"",
      "},",
      "{",
      ""path": "./tsconfig.spec.json"",
      "}",
      "]",
      "}",
    ],
    "isBinary": false,
    "path": "anchor-app/tsconfig.json",
  },
  "tsconfig.lib.json": {
    "content": [
      "{",
      ""extends": "./tsconfig.json",",
      ""compilerOptions": {",
      ""outDir": "../dist/out-tsc",",
      ""declaration": true,",
      ""types": ["node"]",
      "},",
      ""include": ["src/**/*.ts"],",
      ""exclude": ["jest.config.ts", "src/**/*.spec.ts", "src/**/*.test.ts"]",
      "}",
    ],
    "isBinary": false,
    "path": "anchor-app/tsconfig.lib.json",
  },
  "tsconfig.spec.json": {
    "content": [
      "{",
      ""extends": "./tsconfig.json",",
      ""compilerOptions": {",
      ""outDir": "../dist/out-tsc",",
      ""module": "commonjs",",
      ""types": ["jest", "node"]",
      "},",
      ""include": [",
      ""jest.config.ts",",
      ""src/**/*.test.ts",",
      ""src/**/*.spec.ts",",
      ""src/**/*.d.ts"",
      "]",
      "}",
    ],
    "isBinary": false,
    "path": "anchor-app/tsconfig.spec.json",
  },
}
`;

exports[`anchor-application generator should generate app with "basic" template 2`] = `
"{
  "compilerOptions": {
    "paths": {
      "@proj/anchor-app": ["anchor-app/src/index.ts"]
    }
  }
}
"
`;

exports[`anchor-application generator should generate app with "counter" template 1`] = `
{
  ".eslintrc.json": {
    "content": [
      "{",
      ""extends": ["../.eslintrc.json"],",
      ""ignorePatterns": ["!**/*"],",
      ""overrides": [",
      "{",
      ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
      ""rules": {}",
      "},",
      "{",
      ""files": ["*.ts", "*.tsx"],",
      ""rules": {}",
      "},",
      "{",
      ""files": ["*.js", "*.jsx"],",
      ""rules": {}",
      "},",
      "{",
      ""files": ["*.json"],",
      ""parser": "jsonc-eslint-parser",",
      ""rules": {",
      ""@nx/dependency-checks": [",
      ""error",",
      "{",
      ""ignoredFiles": ["{projectRoot}/rollup.config.{js,ts,mjs,mts}"]",
      "}",
      "]",
      "}",
      "}",
      "]",
      "}",
    ],
    "isBinary": false,
    "path": "anchor-app/.eslintrc.json",
  },
  ".swcrc": {
    "content": [
      "{",
      ""jsc": {",
      ""target": "es2017",",
      ""parser": {",
      ""syntax": "typescript",",
      ""decorators": true,",
      ""dynamicImport": true",
      "},",
      ""transform": {",
      ""decoratorMetadata": true,",
      ""legacyDecorator": true",
      "},",
      ""keepClassNames": true,",
      ""externalHelpers": true,",
      ""loose": true",
      "},",
      ""module": {",
      ""type": "es6"",
      "},",
      ""sourceMaps": true,",
      ""exclude": [",
      ""jest.config.ts",",
      "".*\\\\.spec.tsx?$",",
      "".*\\\\.test.tsx?$",",
      ""./src/jest-setup.ts$",",
      ""./**/jest-setup.ts$",",
      "".*.js$"",
      "]",
      "}",
    ],
    "isBinary": false,
    "path": "anchor-app/.swcrc",
  },
  "Anchor.toml": {
    "content": [
      "[toolchain]",
      "[features]",
      "seeds = false",
      "skip-lint = false",
      "[programs.localnet]",
      "my_program = "GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA"",
      "[registry]",
      "url = "https://api.apr.dev"",
      "[provider]",
      "cluster = "Localnet"",
      "wallet = "~/.config/solana/id.json"",
      "[scripts]",
      "test = "../node_modules/.bin/nx run anchor-app:jest"",
      "[test]",
      "startup_wait = 5000",
      "shutdown_wait = 2000",
      "upgradeable = false",
      "[test.validator]",
      "bind_address = "127.0.0.1"",
      "ledger = ".anchor/test-ledger"",
      "rpc_port = 8899",
    ],
    "isBinary": false,
    "path": "anchor-app/Anchor.toml",
  },
  "Cargo.lock": {
    "content": null,
    "isBinary": true,
    "path": "anchor-app/Cargo.lock",
  },
  "Cargo.toml": {
    "content": [
      "[workspace]",
      "members = [",
      ""programs/*"",
      "]",
      "resolver = "2"",
      "[profile.release]",
      "overflow-checks = true",
      "lto = "fat"",
      "codegen-units = 1",
      "[profile.release.build-override]",
      "opt-level = 3",
      "incremental = false",
      "codegen-units = 1",
    ],
    "isBinary": false,
    "path": "anchor-app/Cargo.toml",
  },
  "README.md": {
    "content": [
      "# anchor-app",
      "This library was generated with [Nx](https://nx.dev).",
      "## Building",
      "Run \`nx build anchor-app\` to build the library.",
      "## Running unit tests",
      "Run \`nx test anchor-app\` to execute the unit tests via [Jest](https://jestjs.io).",
    ],
    "isBinary": false,
    "path": "anchor-app/README.md",
  },
  "jest.config.ts": {
    "content": [
      "/* eslint-disable */",
      "import { readFileSync } from 'fs';",
      "// Reading the SWC compilation config and remove the "exclude"",
      "// for the test files to be compiled by SWC",
      "const { exclude: _, ...swcJestConfig } = JSON.parse(",
      "readFileSync(\`\${__dirname}/.swcrc\`, 'utf-8')",
      ");",
      "// disable .swcrc look-up by SWC core because we're passing in swcJestConfig ourselves.",
      "// If we do not disable this, SWC Core will read .swcrc and won't transform our test files due to "exclude"",
      "if (swcJestConfig.swcrc === undefined) {",
      "swcJestConfig.swcrc = false;",
      "}",
      "// Uncomment if using global setup/teardown files being transformed via swc",
      "// https://nx.dev/packages/jest/documents/overview#global-setup/teardown-with-nx-libraries",
      "// jest needs EsModule Interop to find the default exported setup/teardown functions",
      "// swcJestConfig.module.noInterop = false;",
      "export default {",
      "displayName: 'anchor-app',",
      "preset: '../jest.preset.js',",
      "transform: {",
      "'^.+\\\\.[tj]s$': ['@swc/jest', swcJestConfig],",
      "},",
      "moduleFileExtensions: ['ts', 'js', 'html'],",
      "testEnvironment: '',",
      "coverageDirectory: '../coverage/anchor-app',",
      "};",
    ],
    "isBinary": false,
    "path": "anchor-app/jest.config.ts",
  },
  "migrations": {
    "children": {
      "deploy.ts": {
        "content": [
          "// Migrations are an early feature. Currently, they're nothing more than this",
          "// single deploy script that's invoked from the CLI, injecting a provider",
          "// configured from the workspace's Anchor.toml.",
          "import * as anchor from '@coral-xyz/anchor';",
          "module.exports = async function (provider) {",
          "// Configure client to use the provider.",
          "anchor.setProvider(provider);",
          "// Add your deploy script here.",
          "};",
        ],
        "isBinary": false,
        "path": "anchor-app/migrations/deploy.ts",
      },
    },
    "path": "anchor-app/migrations",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/anchor-app",",
      ""version": "0.0.1",",
      ""dependencies": {",
      ""@coral-xyz/anchor": "^0.29.0",",
      ""@solana/web3.js": "1.90.0"",
      "},",
      ""type": "commonjs",",
      ""main": "./index.cjs",",
      ""module": "./index.js",",
      ""private": true",
      "}",
    ],
    "isBinary": false,
    "path": "anchor-app/package.json",
  },
  "programs": {
    "children": {
      "my-program": {
        "children": {
          "Cargo.toml": {
            "content": [
              "[package]",
              "name = "my-program"",
              "version = "0.1.0"",
              "description = "Created with Anchor"",
              "edition = "2021"",
              "[lib]",
              "crate-type = ["cdylib", "lib"]",
              "name = "my_program"",
              "[features]",
              "no-entrypoint = []",
              "no-idl = []",
              "no-log-ix-name = []",
              "cpi = ["no-entrypoint"]",
              "default = []",
              "[dependencies]",
              "anchor-lang = "0.29.0"",
            ],
            "isBinary": false,
            "path": "anchor-app/programs/my-program/Cargo.toml",
          },
          "Xargo.toml": {
            "content": [
              "[target.bpfel-unknown-unknown.dependencies.std]",
              "features = []",
            ],
            "isBinary": false,
            "path": "anchor-app/programs/my-program/Xargo.toml",
          },
          "src": {
            "children": {
              "lib.rs": {
                "content": [
                  "#![allow(clippy::result_large_err)]",
                  "use anchor_lang::prelude::*;",
                  "declare_id!("GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA");",
                  "#[program]",
                  "pub mod my_program {",
                  "use super::*;",
                  "pub fn close(_ctx: Context<CloseMyProgram>) -> Result<()> {",
                  "Ok(())",
                  "}",
                  "pub fn decrement(ctx: Context<Update>) -> Result<()> {",
                  "ctx.accounts.my_program.count = ctx.accounts.my_program.count.checked_sub(1).unwrap();",
                  "Ok(())",
                  "}",
                  "pub fn increment(ctx: Context<Update>) -> Result<()> {",
                  "ctx.accounts.my_program.count = ctx.accounts.my_program.count.checked_add(1).unwrap();",
                  "Ok(())",
                  "}",
                  "pub fn initialize(_ctx: Context<InitializeMyProgram>) -> Result<()> {",
                  "Ok(())",
                  "}",
                  "pub fn set(ctx: Context<Update>, value: u8) -> Result<()> {",
                  "ctx.accounts.my_program.count = value.clone();",
                  "Ok(())",
                  "}",
                  "}",
                  "#[derive(Accounts)]",
                  "pub struct InitializeMyProgram<'info> {",
                  "#[account(mut)]",
                  "pub payer: Signer<'info>,",
                  "#[account(",
                  "init,",
                  "space = 8 + MyProgram::INIT_SPACE,",
                  "payer = payer",
                  ")]",
                  "pub my_program: Account<'info, MyProgram>,",
                  "pub system_program: Program<'info, System>,",
                  "}",
                  "#[derive(Accounts)]",
                  "pub struct CloseMyProgram<'info> {",
                  "#[account(mut)]",
                  "pub payer: Signer<'info>,",
                  "#[account(",
                  "mut,",
                  "close = payer, // close account and return lamports to payer",
                  ")]",
                  "pub my_program: Account<'info, MyProgram>,",
                  "}",
                  "#[derive(Accounts)]",
                  "pub struct Update<'info> {",
                  "#[account(mut)]",
                  "pub my_program: Account<'info, MyProgram>,",
                  "}",
                  "#[account]",
                  "#[derive(InitSpace)]",
                  "pub struct MyProgram {",
                  "count: u8,",
                  "}",
                ],
                "isBinary": false,
                "path": "anchor-app/programs/my-program/src/lib.rs",
              },
            },
            "path": "anchor-app/programs/my-program/src",
          },
        },
        "path": "anchor-app/programs/my-program",
      },
    },
    "path": "anchor-app/programs",
  },
  "project.json": {
    "content": [
      "{",
      ""name": "anchor-app",",
      ""$schema": "../node_modules/nx/schemas/project-schema.json",",
      ""sourceRoot": "anchor-app/src",",
      ""projectType": "library",",
      ""targets": {",
      ""build": {",
      ""executor": "@nx/rollup:rollup",",
      ""outputs": ["{options.outputPath}"],",
      ""options": {",
      ""outputPath": "dist/anchor-app",",
      ""main": "anchor-app/src/index.ts",",
      ""tsConfig": "anchor-app/tsconfig.lib.json",",
      ""assets": [],",
      ""project": "anchor-app/package.json",",
      ""compiler": "swc",",
      ""format": ["cjs", "esm"]",
      "}",
      "},",
      ""lint": {",
      ""executor": "@nx/eslint:lint"",
      "},",
      ""test": {",
      ""executor": "nx:run-commands",",
      ""options": {",
      ""cwd": "anchor-app",",
      ""commands": ["anchor test"],",
      ""parallel": false",
      "}",
      "},",
      ""anchor": {",
      ""executor": "nx:run-commands",",
      ""options": {",
      ""cwd": "anchor-app",",
      ""commands": ["anchor"],",
      ""parallel": false",
      "}",
      "},",
      ""localnet": {",
      ""executor": "nx:run-commands",",
      ""options": {",
      ""cwd": "anchor-app",",
      ""commands": ["anchor localnet"],",
      ""parallel": false",
      "}",
      "},",
      ""jest": {",
      ""executor": "@nx/jest:jest",",
      ""outputs": ["{workspaceRoot}/coverage/{projectRoot}"],",
      ""options": {",
      ""jestConfig": "anchor-app/jest.config.ts"",
      "}",
      "}",
      "},",
      ""tags": []",
      "}",
    ],
    "isBinary": false,
    "path": "anchor-app/project.json",
  },
  "src": {
    "children": {
      "index.ts": {
        "content": [
          "// This file was generated by preset-anchor. Programs are exported from this file.",
          "export * from './my-program-exports';",
        ],
        "isBinary": false,
        "path": "anchor-app/src/index.ts",
      },
      "my-program-exports.ts": {
        "content": [
          "// Here we export some useful types and functions for interacting with the Anchor program.",
          "import { Cluster, PublicKey } from '@solana/web3.js';",
          "import type { MyProgram } from '../target/types/my_program';",
          "import { IDL as MyProgramIDL } from '../target/types/my_program';",
          "// Re-export the generated IDL and type",
          "export { MyProgram, MyProgramIDL };",
          "// After updating your program ID (e.g. after running \`anchor keys sync\`) update the value below.",
          "export const MY_PROGRAM_PROGRAM_ID = new PublicKey(",
          "'GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA'",
          ");",
          "// This is a helper function to get the program ID for the MyProgram program depending on the cluster.",
          "export function getMyProgramProgramId(cluster: Cluster) {",
          "switch (cluster) {",
          "case 'devnet':",
          "case 'testnet':",
          "case 'mainnet-beta':",
          "default:",
          "return MY_PROGRAM_PROGRAM_ID;",
          "}",
          "}",
        ],
        "isBinary": false,
        "path": "anchor-app/src/my-program-exports.ts",
      },
    },
    "path": "anchor-app/src",
  },
  "target": {
    "children": {
      "deploy": {
        "children": {
          "my_program-keypair.json": {
            "content": [
              "[",
              "102, 57, 177, 113, 190, 89, 227, 160, 193, 179, 207, 89, 103, 112, 83, 251,",
              "142, 20, 242, 30, 81, 26, 82, 85, 207, 97, 28, 129, 190, 28, 128, 71, 228, 27,",
              "114, 255, 63, 136, 164, 140, 185, 151, 50, 58, 148, 32, 197, 184, 85, 144, 79,",
              "78, 24, 248, 25, 138, 254, 31, 96, 78, 56, 230, 148, 1",
              "]",
            ],
            "isBinary": false,
            "path": "anchor-app/target/deploy/my_program-keypair.json",
          },
        },
        "path": "anchor-app/target/deploy",
      },
      "idl": {
        "children": {
          "my_program.json": {
            "content": [
              "{",
              ""version": "0.1.0",",
              ""name": "my_program",",
              ""instructions": [",
              "{",
              ""name": "close",",
              ""accounts": [",
              "{",
              ""name": "payer",",
              ""isMut": true,",
              ""isSigner": true",
              "},",
              "{",
              ""name": "myProgram",",
              ""isMut": true,",
              ""isSigner": false",
              "}",
              "],",
              ""args": []",
              "},",
              "{",
              ""name": "decrement",",
              ""accounts": [",
              "{",
              ""name": "myProgram",",
              ""isMut": true,",
              ""isSigner": false",
              "}",
              "],",
              ""args": []",
              "},",
              "{",
              ""name": "increment",",
              ""accounts": [",
              "{",
              ""name": "myProgram",",
              ""isMut": true,",
              ""isSigner": false",
              "}",
              "],",
              ""args": []",
              "},",
              "{",
              ""name": "initialize",",
              ""accounts": [",
              "{",
              ""name": "payer",",
              ""isMut": true,",
              ""isSigner": true",
              "},",
              "{",
              ""name": "myProgram",",
              ""isMut": true,",
              ""isSigner": true",
              "},",
              "{",
              ""name": "systemProgram",",
              ""isMut": false,",
              ""isSigner": false",
              "}",
              "],",
              ""args": []",
              "},",
              "{",
              ""name": "set",",
              ""accounts": [",
              "{",
              ""name": "myProgram",",
              ""isMut": true,",
              ""isSigner": false",
              "}",
              "],",
              ""args": [",
              "{",
              ""name": "value",",
              ""type": "u8"",
              "}",
              "]",
              "}",
              "],",
              ""accounts": [",
              "{",
              ""name": "MyProgram",",
              ""type": {",
              ""kind": "struct",",
              ""fields": [",
              "{",
              ""name": "count",",
              ""type": "u8"",
              "}",
              "]",
              "}",
              "}",
              "],",
              ""metadata": {",
              ""address": "GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA"",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "anchor-app/target/idl/my_program.json",
          },
        },
        "path": "anchor-app/target/idl",
      },
      "types": {
        "children": {
          "my_program.ts": {
            "content": [
              "export type MyProgram = {",
              "version: '0.1.0';",
              "name: 'my_program';",
              "instructions: [",
              "{",
              "name: 'close';",
              "accounts: [",
              "{",
              "name: 'payer';",
              "isMut: true;",
              "isSigner: true;",
              "},",
              "{",
              "name: 'myProgram';",
              "isMut: true;",
              "isSigner: false;",
              "}",
              "];",
              "args: [];",
              "},",
              "{",
              "name: 'decrement';",
              "accounts: [",
              "{",
              "name: 'myProgram';",
              "isMut: true;",
              "isSigner: false;",
              "}",
              "];",
              "args: [];",
              "},",
              "{",
              "name: 'increment';",
              "accounts: [",
              "{",
              "name: 'myProgram';",
              "isMut: true;",
              "isSigner: false;",
              "}",
              "];",
              "args: [];",
              "},",
              "{",
              "name: 'initialize';",
              "accounts: [",
              "{",
              "name: 'payer';",
              "isMut: true;",
              "isSigner: true;",
              "},",
              "{",
              "name: 'myProgram';",
              "isMut: true;",
              "isSigner: true;",
              "},",
              "{",
              "name: 'systemProgram';",
              "isMut: false;",
              "isSigner: false;",
              "}",
              "];",
              "args: [];",
              "},",
              "{",
              "name: 'set';",
              "accounts: [",
              "{",
              "name: 'myProgram';",
              "isMut: true;",
              "isSigner: false;",
              "}",
              "];",
              "args: [",
              "{",
              "name: 'value';",
              "type: 'u8';",
              "}",
              "];",
              "}",
              "];",
              "accounts: [",
              "{",
              "name: 'myProgram';",
              "type: {",
              "kind: 'struct';",
              "fields: [",
              "{",
              "name: 'count';",
              "type: 'u8';",
              "}",
              "];",
              "};",
              "}",
              "];",
              "};",
              "export const IDL: MyProgram = {",
              "version: '0.1.0',",
              "name: 'my_program',",
              "instructions: [",
              "{",
              "name: 'close',",
              "accounts: [",
              "{",
              "name: 'payer',",
              "isMut: true,",
              "isSigner: true,",
              "},",
              "{",
              "name: 'myProgram',",
              "isMut: true,",
              "isSigner: false,",
              "},",
              "],",
              "args: [],",
              "},",
              "{",
              "name: 'decrement',",
              "accounts: [",
              "{",
              "name: 'myProgram',",
              "isMut: true,",
              "isSigner: false,",
              "},",
              "],",
              "args: [],",
              "},",
              "{",
              "name: 'increment',",
              "accounts: [",
              "{",
              "name: 'myProgram',",
              "isMut: true,",
              "isSigner: false,",
              "},",
              "],",
              "args: [],",
              "},",
              "{",
              "name: 'initialize',",
              "accounts: [",
              "{",
              "name: 'payer',",
              "isMut: true,",
              "isSigner: true,",
              "},",
              "{",
              "name: 'myProgram',",
              "isMut: true,",
              "isSigner: true,",
              "},",
              "{",
              "name: 'systemProgram',",
              "isMut: false,",
              "isSigner: false,",
              "},",
              "],",
              "args: [],",
              "},",
              "{",
              "name: 'set',",
              "accounts: [",
              "{",
              "name: 'myProgram',",
              "isMut: true,",
              "isSigner: false,",
              "},",
              "],",
              "args: [",
              "{",
              "name: 'value',",
              "type: 'u8',",
              "},",
              "],",
              "},",
              "],",
              "accounts: [",
              "{",
              "name: 'myProgram',",
              "type: {",
              "kind: 'struct',",
              "fields: [",
              "{",
              "name: 'count',",
              "type: 'u8',",
              "},",
              "],",
              "},",
              "},",
              "],",
              "};",
            ],
            "isBinary": false,
            "path": "anchor-app/target/types/my_program.ts",
          },
        },
        "path": "anchor-app/target/types",
      },
    },
    "path": "anchor-app/target",
  },
  "tests": {
    "children": {
      "my-program.spec.ts": {
        "content": [
          "import * as anchor from '@coral-xyz/anchor';",
          "import { Program } from '@coral-xyz/anchor';",
          "import { Keypair } from '@solana/web3.js';",
          "import { MyProgram } from '../target/types/my_program';",
          "describe('my-program', () => {",
          "// Configure the client to use the local cluster.",
          "const provider = anchor.AnchorProvider.env();",
          "anchor.setProvider(provider);",
          "const payer = provider.wallet as anchor.Wallet;",
          "const program = anchor.workspace.MyProgram as Program<MyProgram>;",
          "const myProgramKeypair = Keypair.generate();",
          "it('Initialize MyProgram', async () => {",
          "await program.methods",
          ".initialize()",
          ".accounts({",
          "myProgram: myProgramKeypair.publicKey,",
          "payer: payer.publicKey,",
          "})",
          ".signers([myProgramKeypair])",
          ".rpc();",
          "const currentCount = await program.account.myProgram.fetch(",
          "myProgramKeypair.publicKey",
          ");",
          "expect(currentCount.count).toEqual(0);",
          "});",
          "it('Increment MyProgram', async () => {",
          "await program.methods",
          ".increment()",
          ".accounts({ myProgram: myProgramKeypair.publicKey })",
          ".rpc();",
          "const currentCount = await program.account.myProgram.fetch(",
          "myProgramKeypair.publicKey",
          ");",
          "expect(currentCount.count).toEqual(1);",
          "});",
          "it('Increment MyProgram Again', async () => {",
          "await program.methods",
          ".increment()",
          ".accounts({ myProgram: myProgramKeypair.publicKey })",
          ".rpc();",
          "const currentCount = await program.account.myProgram.fetch(",
          "myProgramKeypair.publicKey",
          ");",
          "expect(currentCount.count).toEqual(2);",
          "});",
          "it('Decrement MyProgram', async () => {",
          "await program.methods",
          ".decrement()",
          ".accounts({ myProgram: myProgramKeypair.publicKey })",
          ".rpc();",
          "const currentCount = await program.account.myProgram.fetch(",
          "myProgramKeypair.publicKey",
          ");",
          "expect(currentCount.count).toEqual(1);",
          "});",
          "it('Set myProgram value', async () => {",
          "await program.methods",
          ".set(42)",
          ".accounts({ myProgram: myProgramKeypair.publicKey })",
          ".rpc();",
          "const currentCount = await program.account.myProgram.fetch(",
          "myProgramKeypair.publicKey",
          ");",
          "expect(currentCount.count).toEqual(42);",
          "});",
          "it('Set close the myProgram account', async () => {",
          "await program.methods",
          ".close()",
          ".accounts({",
          "payer: payer.publicKey,",
          "myProgram: myProgramKeypair.publicKey,",
          "})",
          ".rpc();",
          "// The account should no longer exist, returning null.",
          "const userAccount = await program.account.myProgram.fetchNullable(",
          "myProgramKeypair.publicKey",
          ");",
          "expect(userAccount).toBeNull();",
          "});",
          "});",
        ],
        "isBinary": false,
        "path": "anchor-app/tests/my-program.spec.ts",
      },
    },
    "path": "anchor-app/tests",
  },
  "tsconfig.json": {
    "content": [
      "{",
      ""extends": "../tsconfig.base.json",",
      ""compilerOptions": {",
      ""module": "commonjs"",
      "},",
      ""files": [],",
      ""include": [],",
      ""references": [",
      "{",
      ""path": "./tsconfig.lib.json"",
      "},",
      "{",
      ""path": "./tsconfig.spec.json"",
      "}",
      "]",
      "}",
    ],
    "isBinary": false,
    "path": "anchor-app/tsconfig.json",
  },
  "tsconfig.lib.json": {
    "content": [
      "{",
      ""extends": "./tsconfig.json",",
      ""compilerOptions": {",
      ""outDir": "../dist/out-tsc",",
      ""declaration": true,",
      ""types": ["node"]",
      "},",
      ""include": ["src/**/*.ts"],",
      ""exclude": ["jest.config.ts", "src/**/*.spec.ts", "src/**/*.test.ts"]",
      "}",
    ],
    "isBinary": false,
    "path": "anchor-app/tsconfig.lib.json",
  },
  "tsconfig.spec.json": {
    "content": [
      "{",
      ""extends": "./tsconfig.json",",
      ""compilerOptions": {",
      ""outDir": "../dist/out-tsc",",
      ""module": "commonjs",",
      ""types": ["jest", "node"]",
      "},",
      ""include": [",
      ""jest.config.ts",",
      ""src/**/*.test.ts",",
      ""src/**/*.spec.ts",",
      ""src/**/*.d.ts"",
      "]",
      "}",
    ],
    "isBinary": false,
    "path": "anchor-app/tsconfig.spec.json",
  },
}
`;

exports[`anchor-application generator should generate app with "counter" template 2`] = `
"{
  "compilerOptions": {
    "paths": {
      "@proj/anchor-app": ["anchor-app/src/index.ts"]
    }
  }
}
"
`;
