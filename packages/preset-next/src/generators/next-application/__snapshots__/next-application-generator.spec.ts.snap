// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`application generator custom apps should generate app without anchor 1`] = `
{
  ".eslintignore": {
    "content": [
      "node_modules",
    ],
    "isBinary": false,
    "path": "./.eslintignore",
  },
  ".eslintrc.json": {
    "content": [
      "{",
      ""root": true,",
      ""ignorePatterns": ["**/*"],",
      ""plugins": ["@nx"],",
      ""overrides": [",
      "{",
      ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
      ""rules": {",
      ""@nx/enforce-module-boundaries": [",
      ""error",",
      "{",
      ""enforceBuildableLibDependency": true,",
      ""allow": [],",
      ""depConstraints": [",
      "{",
      ""sourceTag": "*",",
      ""onlyDependOnLibsWithTags": ["*"]",
      "}",
      "]",
      "}",
      "]",
      "}",
      "},",
      "{",
      ""files": ["*.ts", "*.tsx"],",
      ""extends": ["plugin:@nx/typescript"],",
      ""rules": {}",
      "},",
      "{",
      ""files": ["*.js", "*.jsx"],",
      ""extends": ["plugin:@nx/javascript"],",
      ""rules": {}",
      "}",
      "]",
      "}",
    ],
    "isBinary": false,
    "path": "./.eslintrc.json",
  },
  ".prettierignore": {
    "content": [
      "# Add files here to ignore them from prettier formatting",
      "/dist",
      "/coverage",
      "/.nx/cache",
    ],
    "isBinary": false,
    "path": "./.prettierignore",
  },
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "LICENSE": {
    "content": [
      "MIT License",
      "Copyright (c) 2023 test",
      "Permission is hereby granted, free of charge, to any person obtaining a copy",
      "of this software and associated documentation files (the "Software"), to deal",
      "in the Software without restriction, including without limitation the rights",
      "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
      "copies of the Software, and to permit persons to whom the Software is",
      "furnished to do so, subject to the following conditions:",
      "The above copyright notice and this permission notice shall be included in all",
      "copies or substantial portions of the Software.",
      "THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
      "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
      "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
      "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
      "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
      "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
      "SOFTWARE.",
    ],
    "isBinary": false,
    "path": "./LICENSE",
  },
  "README.md": {
    "content": [
      "# proj",
      "This project is generated with the [create-solana-dapp](https://github.com/solana-developers/create-solana-dapp) generator.",
      "## Getting Started",
      "### Prerequisites",
      "- Node v18.18.0 or higher",
      "### Installation",
      "#### Clone the repo",
      "\`\`\`shell",
      "git clone <repo-url>",
      "cd <repo-name>",
      "\`\`\`",
      "#### Install Dependencies",
      "\`\`\`shell",
      "yarn install",
      "\`\`\`",
      "#### Start the web app",
      "\`\`\`",
      "yarn dev",
      "\`\`\`",
      "## Apps",
      "### web",
      "This is a React app.",
      "#### Commands",
      "Start the web app",
      "\`\`\`shell",
      "yarn dev",
      "\`\`\`",
      "Build the web app",
      "\`\`\`shell",
      "yarn build",
      "\`\`\`",
    ],
    "isBinary": false,
    "path": "./README.md",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": {",
      ""defaultBase": "main"",
      "},",
      ""targetDefaults": {",
      ""build": {",
      ""cache": true",
      "},",
      ""lint": {",
      ""cache": true,",
      ""inputs": [",
      ""default",",
      ""{workspaceRoot}/.eslintrc.json",",
      ""{workspaceRoot}/.eslintignore",",
      ""{workspaceRoot}/eslint.config.js"",
      "]",
      "},",
      ""e2e": {",
      ""cache": true",
      "}",
      "},",
      ""generators": {",
      ""@nx/react": {",
      ""application": {",
      ""babel": true",
      "}",
      "},",
      ""@nx/next": {",
      ""application": {",
      ""style": "css",",
      ""linter": "eslint"",
      "}",
      "}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {",
      ""@solana/spl-token": "0.3.9",",
      ""@solana/wallet-adapter-base": "^0.9.23",",
      ""@solana/wallet-adapter-react": "^0.15.35",",
      ""@solana/wallet-adapter-react-ui": "^0.9.34",",
      ""@solana/wallet-adapter-solflare": "^0.6.28",",
      ""@solana/web3.js": "1.87.2",",
      ""@tanstack/react-query-next-experimental": "5.8.4",",
      ""bs58": "5.0.0",",
      ""buffer": "6.0.3",",
      ""encoding": "0.1.13",",
      ""next": "13.4.1",",
      ""react": "18.2.0",",
      ""react-dom": "18.2.0",",
      ""tslib": "^2.3.0"",
      "},",
      ""devDependencies": {",
      ""@nx/eslint": "17.1.3",",
      ""@nx/eslint-plugin": "17.1.3",",
      ""@nx/js": "17.1.3",",
      ""@nx/next": "17.1.3",",
      ""@nx/react": "17.1.3",",
      ""@swc-node/register": "~1.6.7",",
      ""@swc/core": "~1.3.85",",
      ""@testing-library/react": "14.0.0",",
      ""@types/node": "18.14.2",",
      ""@types/react": "18.2.33",",
      ""@types/react-dom": "18.2.14",",
      ""@typescript-eslint/eslint-plugin": "^6.9.1",",
      ""@typescript-eslint/parser": "^6.9.1",",
      ""eslint": "~8.46.0",",
      ""eslint-config-next": "13.4.1",",
      ""eslint-config-prettier": "^9.0.0",",
      ""eslint-plugin-import": "2.27.5",",
      ""eslint-plugin-jsx-a11y": "6.7.1",",
      ""eslint-plugin-react": "7.32.2",",
      ""eslint-plugin-react-hooks": "4.6.0",",
      ""prettier": "^2.6.2",",
      ""typescript": "~5.2.2"",
      "},",
      ""scripts": {",
      ""anchor": "nx run anchor:anchor",",
      ""localnet": "nx run anchor:anchor localnet",",
      ""build": "nx build test-app",",
      ""dev": "nx serve test-app"",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test-app": {
    "children": {
      ".eslintrc.json": {
        "content": [
          "{",
          ""extends": [",
          ""plugin:@nx/react-typescript",",
          ""next",",
          ""next/core-web-vitals",",
          ""../.eslintrc.json"",
          "],",
          ""ignorePatterns": ["!**/*", ".next/**/*"],",
          ""overrides": [",
          "{",
          ""files": ["*.*"],",
          ""rules": {",
          ""@next/next/no-html-link-for-pages": "off"",
          "}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
          ""rules": {",
          ""@next/next/no-html-link-for-pages": ["error", "test-app/pages"]",
          "}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.js", "*.jsx"],",
          ""rules": {}",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/.eslintrc.json",
      },
      "app": {
        "children": {
          "api": {
            "children": {
              "hello": {
                "children": {
                  "route.ts": {
                    "content": [
                      "export async function GET(request: Request) {",
                      "return new Response('Hello, from API!');",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./test-app/app/api/hello/route.ts",
                  },
                },
                "path": "./test-app/app/api/hello",
              },
            },
            "path": "./test-app/app/api",
          },
          "app-layout.tsx": {
            "content": [
              "import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';",
              "import { ReactNode } from 'react';",
              "import Link from 'next/link';",
              "export function AppLayout({ children }: { children: ReactNode }) {",
              "return (",
              "<div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>",
              "<div",
              "style={{",
              "display: 'flex',",
              "alignItems: 'center',",
              "justifyContent: 'space-between',",
              "padding: '6px 12px',",
              "}}",
              ">",
              "<div>",
              "<Link to="/">",
              "<img src="/assets/solana-logo.png" height={24} alt="Solana Logo" />",
              "</Link>",
              "</div>",
              "<div>",
              "<WalletMultiButton />",
              "</div>",
              "</div>",
              "<div style={{ flexGrow: 1, padding: '6px' }}>{children}</div>",
              "<footer",
              "style={{",
              "display: 'flex',",
              "alignItems: 'center',",
              "justifyContent: 'center',",
              "padding: '6px 10px',",
              "}}",
              ">",
              "<aside>",
              "<p>",
              "Powered by{' '}",
              "<a",
              "href="https://github.com/solana-developers/create-solana-dapp"",
              "target="_blank"",
              "rel="noopener noreferrer"",
              ">",
              "create-solana-dapp",
              "</a>",
              "</p>",
              "</aside>",
              "</footer>",
              "</div>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/app-layout.tsx",
          },
          "global.css": {
            "content": [
              "html,",
              "body {",
              "height: 100%;",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/global.css",
          },
          "layout.tsx": {
            "content": [
              "import './global.css';",
              "import { AppLayout } from './app-layout';",
              "import { SolanaProvider } from './solana-provider';",
              "export const metadata = {",
              "title: 'Welcome to test-app',",
              "description: 'Powered by create-solana-dapp',",
              "};",
              "export default function RootLayout({",
              "children,",
              "}: {",
              "children: React.ReactNode;",
              "}) {",
              "return (",
              "<html lang="en">",
              "<body>",
              "<SolanaProvider>",
              "<AppLayout>{children}</AppLayout>",
              "</SolanaProvider>",
              "</body>",
              "</html>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/layout.tsx",
          },
          "page.module.css": {
            "content": [
              ".page {",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/page.module.css",
          },
          "page.tsx": {
            "content": [
              "export default async function Index() {",
              "return (",
              "<div>",
              "<div>Index</div>",
              "</div>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/page.tsx",
          },
          "solana-provider.tsx": {
            "content": [
              "'use client';",
              "import { WalletError } from '@solana/wallet-adapter-base';",
              "import {",
              "ConnectionProvider,",
              "WalletProvider,",
              "} from '@solana/wallet-adapter-react';",
              "import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';",
              "import { SolflareWalletAdapter } from '@solana/wallet-adapter-solflare';",
              "import { Cluster, clusterApiUrl } from '@solana/web3.js';",
              "import {",
              "createContext,",
              "ReactNode,",
              "useCallback,",
              "useContext,",
              "useMemo,",
              "useState,",
              "} from 'react';",
              "require('@solana/wallet-adapter-react-ui/styles.css');",
              "export interface SolanaProviderContext {",
              "cluster: Cluster;",
              "endpoint: string;",
              "setCluster?: (cluster: Cluster) => void;",
              "}",
              "const Context = createContext<SolanaProviderContext>(",
              "{} as SolanaProviderContext",
              ");",
              "export function SolanaProvider({ children }: { children: ReactNode }) {",
              "const [cluster, setCluster] = useState<Cluster>('devnet');",
              "const endpoint = useMemo(() => clusterApiUrl(cluster), [cluster]);",
              "const wallets = useMemo(() => [new SolflareWalletAdapter()], [cluster]);",
              "const onError = useCallback((error: WalletError) => {",
              "console.error(error);",
              "}, []);",
              "const value: SolanaProviderContext = {",
              "cluster,",
              "endpoint,",
              "setCluster,",
              "};",
              "return (",
              "<ConnectionProvider endpoint={endpoint}>",
              "<WalletProvider wallets={wallets} onError={onError} autoConnect={true}>",
              "<WalletModalProvider>",
              "<Context.Provider value={value}>{children}</Context.Provider>",
              "</WalletModalProvider>",
              "</WalletProvider>",
              "</ConnectionProvider>",
              ");",
              "}",
              "export function useSolana() {",
              "return useContext(Context);",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/solana-provider.tsx",
          },
        },
        "path": "./test-app/app",
      },
      "components": {
        "children": {
          "app-layout.tsx": {
            "content": [
              "import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';",
              "import { ReactNode } from 'react';",
              "import { Link } from 'react-router-dom';",
              "export function AppLayout({ children }: { children: ReactNode }) {",
              "return (",
              "<div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>",
              "<div",
              "style={{",
              "display: 'flex',",
              "alignItems: 'center',",
              "justifyContent: 'space-between',",
              "padding: '6px 12px',",
              "}}",
              ">",
              "<div>",
              "<Link to="/">",
              "<img src="/assets/solana-logo.png" height={24} alt="Solana Logo" />",
              "</Link>",
              "</div>",
              "<div>",
              "<WalletMultiButton />",
              "</div>",
              "</div>",
              "<div style={{ flexGrow: 1, padding: '6px' }}>{children}</div>",
              "<footer",
              "style={{",
              "display: 'flex',",
              "alignItems: 'center',",
              "justifyContent: 'center',",
              "padding: '6px 10px',",
              "}}",
              ">",
              "<aside>",
              "<p>",
              "Powered by{' '}",
              "<a",
              "href="https://github.com/solana-developers/create-solana-dapp"",
              "target="_blank"",
              "rel="noopener noreferrer"",
              ">",
              "create-solana-dapp",
              "</a>",
              "</p>",
              "</aside>",
              "</footer>",
              "</div>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/components/app-layout.tsx",
          },
          "solana-provider.tsx": {
            "content": [
              "import { WalletError } from '@solana/wallet-adapter-base';",
              "import {",
              "ConnectionProvider,",
              "WalletProvider,",
              "} from '@solana/wallet-adapter-react';",
              "import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';",
              "import { SolflareWalletAdapter } from '@solana/wallet-adapter-solflare';",
              "import { Cluster, clusterApiUrl } from '@solana/web3.js';",
              "import {",
              "createContext,",
              "ReactNode,",
              "useCallback,",
              "useContext,",
              "useMemo,",
              "useState,",
              "} from 'react';",
              "require('@solana/wallet-adapter-react-ui/styles.css');",
              "export interface SolanaProviderContext {",
              "cluster: Cluster;",
              "endpoint: string;",
              "setCluster?: (cluster: Cluster) => void;",
              "}",
              "const Context = createContext<SolanaProviderContext>(",
              "{} as SolanaProviderContext",
              ");",
              "export function SolanaProvider({ children }: { children: ReactNode }) {",
              "const [cluster, setCluster] = useState<Cluster>('devnet');",
              "const endpoint = useMemo(() => clusterApiUrl(cluster), [cluster]);",
              "const wallets = useMemo(() => [new SolflareWalletAdapter()], [cluster]);",
              "const onError = useCallback((error: WalletError) => {",
              "console.error(error);",
              "}, []);",
              "const value: SolanaProviderContext = {",
              "cluster,",
              "endpoint,",
              "setCluster,",
              "};",
              "return (",
              "<ConnectionProvider endpoint={endpoint}>",
              "<WalletProvider wallets={wallets} onError={onError} autoConnect={true}>",
              "<WalletModalProvider>",
              "<Context.Provider value={value}>{children}</Context.Provider>",
              "</WalletModalProvider>",
              "</WalletProvider>",
              "</ConnectionProvider>",
              ");",
              "}",
              "export function useSolana() {",
              "return useContext(Context);",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/components/solana-provider.tsx",
          },
        },
        "path": "./test-app/components",
      },
      "index.d.ts": {
        "content": [
          "/* eslint-disable @typescript-eslint/no-explicit-any */",
          "declare module '*.svg' {",
          "const content: any;",
          "export const ReactComponent: any;",
          "export default content;",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/index.d.ts",
      },
      "next-env.d.ts": {
        "content": [
          "/// <reference types="next" />",
          "/// <reference types="next/image-types/global" />",
          "// NOTE: This file should not be edited",
          "// see https://nextjs.org/docs/basic-features/typescript for more information.",
        ],
        "isBinary": false,
        "path": "./test-app/next-env.d.ts",
      },
      "next.config.js": {
        "content": [
          "//@ts-check",
          "// eslint-disable-next-line @typescript-eslint/no-var-requires",
          "const { composePlugins, withNx } = require('@nx/next');",
          "/**",
          "* @type {import('@nx/next/plugins/with-nx').WithNxOptions}",
          "**/",
          "const nextConfig = {",
          "webpack: (config) => {",
          "config.externals = [",
          "...(config.externals || []),",
          "'bigint',",
          "'node-gyp-build',",
          "];",
          "return config;",
          "},",
          "nx: {",
          "// Set this to true if you would like to use SVGR",
          "// See: https://github.com/gregberge/svgr",
          "svgr: false,",
          "},",
          "};",
          "const plugins = [",
          "// Add more Next.js plugins to this list if needed.",
          "withNx,",
          "];",
          "module.exports = composePlugins(...plugins)(nextConfig);",
        ],
        "isBinary": false,
        "path": "./test-app/next.config.js",
      },
      "project.json": {
        "content": [
          "{",
          ""name": "test-app",",
          ""$schema": "../node_modules/nx/schemas/project-schema.json",",
          ""sourceRoot": "test-app",",
          ""projectType": "application",",
          ""targets": {",
          ""build": {",
          ""executor": "@nx/next:build",",
          ""outputs": ["{options.outputPath}"],",
          ""defaultConfiguration": "production",",
          ""options": {",
          ""outputPath": "dist/test-app"",
          "},",
          ""configurations": {",
          ""development": {",
          ""outputPath": "test-app"",
          "},",
          ""production": {}",
          "}",
          "},",
          ""serve": {",
          ""executor": "@nx/next:server",",
          ""defaultConfiguration": "development",",
          ""options": {",
          ""buildTarget": "test-app:build",",
          ""dev": true,",
          ""port": 3000",
          "},",
          ""configurations": {",
          ""development": {",
          ""buildTarget": "test-app:build:development",",
          ""dev": true",
          "},",
          ""production": {",
          ""buildTarget": "test-app:build:production",",
          ""dev": false",
          "}",
          "}",
          "},",
          ""export": {",
          ""executor": "@nx/next:export",",
          ""options": {",
          ""buildTarget": "test-app:build:production"",
          "}",
          "},",
          ""lint": {",
          ""executor": "@nx/eslint:lint",",
          ""outputs": ["{options.outputFile}"],",
          ""options": {",
          ""lintFilePatterns": ["test-app/**/*.{ts,tsx,js,jsx}"]",
          "}",
          "}",
          "},",
          ""tags": []",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/project.json",
      },
      "public": {
        "children": {
          ".gitkeep": {
            "content": [],
            "isBinary": false,
            "path": "./test-app/public/.gitkeep",
          },
          "favicon.ico": {
            "content": null,
            "isBinary": true,
            "path": "./test-app/public/favicon.ico",
          },
          "solana-logo.png": {
            "content": null,
            "isBinary": true,
            "path": "./test-app/public/solana-logo.png",
          },
        },
        "path": "./test-app/public",
      },
      "tsconfig.json": {
        "content": [
          "{",
          ""extends": "../tsconfig.base.json",",
          ""compilerOptions": {",
          ""jsx": "preserve",",
          ""allowJs": true,",
          ""esModuleInterop": true,",
          ""allowSyntheticDefaultImports": true,",
          ""strict": true,",
          ""forceConsistentCasingInFileNames": true,",
          ""noEmit": true,",
          ""resolveJsonModule": true,",
          ""isolatedModules": true,",
          ""incremental": true,",
          ""plugins": [{ "name": "next" }]",
          "},",
          ""include": [",
          ""**/*.ts",",
          ""**/*.tsx",",
          ""**/*.js",",
          ""**/*.jsx",",
          ""../test-app/.next/types/**/*.ts",",
          ""../dist/test-app/.next/types/**/*.ts",",
          ""next-env.d.ts"",
          "],",
          ""exclude": [",
          ""node_modules",",
          ""jest.config.ts",",
          ""src/**/*.spec.ts",",
          ""src/**/*.test.ts"",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/tsconfig.json",
      },
    },
    "path": "./test-app",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`application generator default apps should generate default app with "none" ui 1`] = `
{
  ".eslintignore": {
    "content": [
      "node_modules",
    ],
    "isBinary": false,
    "path": "./.eslintignore",
  },
  ".eslintrc.json": {
    "content": [
      "{",
      ""root": true,",
      ""ignorePatterns": ["**/*"],",
      ""plugins": ["@nx"],",
      ""overrides": [",
      "{",
      ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
      ""rules": {",
      ""@nx/enforce-module-boundaries": [",
      ""error",",
      "{",
      ""enforceBuildableLibDependency": true,",
      ""allow": [],",
      ""depConstraints": [",
      "{",
      ""sourceTag": "*",",
      ""onlyDependOnLibsWithTags": ["*"]",
      "}",
      "]",
      "}",
      "]",
      "}",
      "},",
      "{",
      ""files": ["*.ts", "*.tsx"],",
      ""extends": ["plugin:@nx/typescript"],",
      ""rules": {}",
      "},",
      "{",
      ""files": ["*.js", "*.jsx"],",
      ""extends": ["plugin:@nx/javascript"],",
      ""rules": {}",
      "}",
      "]",
      "}",
    ],
    "isBinary": false,
    "path": "./.eslintrc.json",
  },
  ".prettierignore": {
    "content": [
      "# Add files here to ignore them from prettier formatting",
      "/dist",
      "/coverage",
      "/.nx/cache",
      ".anchor",
      "target",
      "node_modules",
      "dist",
      "tmp",
      "build",
      "test-ledger",
    ],
    "isBinary": false,
    "path": "./.prettierignore",
  },
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "LICENSE": {
    "content": [
      "MIT License",
      "Copyright (c) 2023 test",
      "Permission is hereby granted, free of charge, to any person obtaining a copy",
      "of this software and associated documentation files (the "Software"), to deal",
      "in the Software without restriction, including without limitation the rights",
      "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
      "copies of the Software, and to permit persons to whom the Software is",
      "furnished to do so, subject to the following conditions:",
      "The above copyright notice and this permission notice shall be included in all",
      "copies or substantial portions of the Software.",
      "THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
      "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
      "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
      "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
      "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
      "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
      "SOFTWARE.",
    ],
    "isBinary": false,
    "path": "./LICENSE",
  },
  "README.md": {
    "content": [
      "# proj",
      "This project is generated with the [create-solana-dapp](https://github.com/solana-developers/create-solana-dapp) generator.",
      "## Getting Started",
      "### Prerequisites",
      "- Node v18.18.0 or higher",
      "- Rust v1.70.0 or higher",
      "- Anchor CLI 0.29.0 or higher",
      "- Solana CLI 1.17.0 or higher",
      "### Installation",
      "#### Clone the repo",
      "\`\`\`shell",
      "git clone <repo-url>",
      "cd <repo-name>",
      "\`\`\`",
      "#### Install Dependencies",
      "\`\`\`shell",
      "yarn install",
      "\`\`\`",
      "#### Start the web app",
      "\`\`\`",
      "yarn dev",
      "\`\`\`",
      "## Apps",
      "### anchor",
      "This is a Solana program written in Rust using the Anchor framework.",
      "#### Commands",
      "You can use any normal anchor commands. Either move to the \`anchor\` directory and run the \`anchor\` command or prefix the command with \`yarn\`, eg: \`yarn anchor\`.",
      "#### Sync the program id:",
      "Running this command will create a new keypair in the \`anchor/target/deploy\` directory and save the address to the Anchor config file and update the \`declare_id!\` macro in the \`./src/lib.rs\` file of the program.",
      "You will manually need to update the constant in \`anchor/lib/counter-exports.ts\` to match the new program id.",
      "\`\`\`shell",
      "yarn anchor keys sync",
      "\`\`\`",
      "#### Build the program:",
      "\`\`\`shell",
      "yarn anchor build",
      "\`\`\`",
      "#### Start the test validator with the program deployed:",
      "\`\`\`shell",
      "yarn anchor localnet",
      "\`\`\`",
      "#### Run the tests",
      "\`\`\`shell",
      "yarn anchor test",
      "\`\`\`",
      "#### Deploy to Devnet",
      "\`\`\`shell",
      "yarn anchor deploy --provider.cluster devnet",
      "\`\`\`",
      "### web",
      "This is a React app that uses the Anchor generated client to interact with the Solana program.",
      "#### Commands",
      "Start the web app",
      "\`\`\`shell",
      "yarn dev",
      "\`\`\`",
      "Build the web app",
      "\`\`\`shell",
      "yarn build",
      "\`\`\`",
    ],
    "isBinary": false,
    "path": "./README.md",
  },
  "anchor": {
    "children": {
      ".eslintrc.json": {
        "content": [
          "{",
          ""extends": ["../.eslintrc.json"],",
          ""ignorePatterns": ["!**/*"],",
          ""overrides": [",
          "{",
          ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.js", "*.jsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.json"],",
          ""parser": "jsonc-eslint-parser",",
          ""rules": {",
          ""@nx/dependency-checks": [",
          ""error",",
          "{",
          ""ignoredFiles": ["{projectRoot}/rollup.config.{js,ts,mjs,mts}"]",
          "}",
          "]",
          "}",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/.eslintrc.json",
      },
      ".swcrc": {
        "content": [
          "{",
          ""jsc": {",
          ""target": "es2017",",
          ""parser": {",
          ""syntax": "typescript",",
          ""decorators": true,",
          ""dynamicImport": true",
          "},",
          ""transform": {",
          ""decoratorMetadata": true,",
          ""legacyDecorator": true",
          "},",
          ""keepClassNames": true,",
          ""externalHelpers": true,",
          ""loose": true",
          "},",
          ""module": {",
          ""type": "es6"",
          "},",
          ""sourceMaps": true,",
          ""exclude": [",
          ""jest.config.ts",",
          "".*\\\\.spec.tsx?$",",
          "".*\\\\.test.tsx?$",",
          ""./src/jest-setup.ts$",",
          ""./**/jest-setup.ts$",",
          "".*.js$"",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/.swcrc",
      },
      "Anchor.toml": {
        "content": [
          "[features]",
          "seeds = false",
          "skip-lint = false",
          "[programs.localnet]",
          "counter = "EuJfgknXicf6iZASeagt5U6XDDPpLTQrvWPW31vgAwo8"",
          "[registry]",
          "url = "https://api.apr.dev"",
          "[provider]",
          "cluster = "Localnet"",
          "wallet = "~/.config/solana/id.json"",
          "[scripts]",
          "test = "../node_modules/.bin/nx run anchor:jest"",
          "[test.validator]",
          "bind_address = "127.0.0.1"",
        ],
        "isBinary": false,
        "path": "./anchor/Anchor.toml",
      },
      "Cargo.lock": {
        "content": null,
        "isBinary": true,
        "path": "./anchor/Cargo.lock",
      },
      "Cargo.toml": {
        "content": [
          "[workspace]",
          "members = [",
          ""programs/*"",
          "]",
          "resolver = "2"",
          "[profile.release]",
          "overflow-checks = true",
          "lto = "fat"",
          "codegen-units = 1",
          "[profile.release.build-override]",
          "opt-level = 3",
          "incremental = false",
          "codegen-units = 1",
        ],
        "isBinary": false,
        "path": "./anchor/Cargo.toml",
      },
      "README.md": {
        "content": [
          "# anchor",
          "This library was generated with [Nx](https://nx.dev).",
          "## Building",
          "Run \`nx build anchor\` to build the library.",
          "## Running unit tests",
          "Run \`nx test anchor\` to execute the unit tests via [Jest](https://jestjs.io).",
        ],
        "isBinary": false,
        "path": "./anchor/README.md",
      },
      "jest.config.ts": {
        "content": [
          "/* eslint-disable */",
          "import { readFileSync } from 'fs';",
          "// Reading the SWC compilation config and remove the "exclude"",
          "// for the test files to be compiled by SWC",
          "const { exclude: _, ...swcJestConfig } = JSON.parse(",
          "readFileSync(\`\${__dirname}/.swcrc\`, 'utf-8')",
          ");",
          "// disable .swcrc look-up by SWC core because we're passing in swcJestConfig ourselves.",
          "// If we do not disable this, SWC Core will read .swcrc and won't transform our test files due to "exclude"",
          "if (swcJestConfig.swcrc === undefined) {",
          "swcJestConfig.swcrc = false;",
          "}",
          "// Uncomment if using global setup/teardown files being transformed via swc",
          "// https://nx.dev/packages/jest/documents/overview#global-setup/teardown-with-nx-libraries",
          "// jest needs EsModule Interop to find the default exported setup/teardown functions",
          "// swcJestConfig.module.noInterop = false;",
          "export default {",
          "displayName: 'anchor',",
          "preset: '../jest.preset.js',",
          "transform: {",
          "'^.+\\\\.[tj]s$': ['@swc/jest', swcJestConfig],",
          "},",
          "moduleFileExtensions: ['ts', 'js', 'html'],",
          "testEnvironment: '',",
          "coverageDirectory: '../coverage/anchor',",
          "};",
        ],
        "isBinary": false,
        "path": "./anchor/jest.config.ts",
      },
      "migrations": {
        "children": {
          "deploy.ts": {
            "content": [
              "// Migrations are an early feature. Currently, they're nothing more than this",
              "// single deploy script that's invoked from the CLI, injecting a provider",
              "// configured from the workspace's Anchor.toml.",
              "import * as anchor from '@coral-xyz/anchor';",
              "module.exports = async function (provider) {",
              "// Configure client to use the provider.",
              "anchor.setProvider(provider);",
              "// Add your deploy script here.",
              "};",
            ],
            "isBinary": false,
            "path": "./anchor/migrations/deploy.ts",
          },
        },
        "path": "./anchor/migrations",
      },
      "package.json": {
        "content": [
          "{",
          ""name": "@proj/anchor",",
          ""version": "0.0.1",",
          ""dependencies": {},",
          ""type": "commonjs",",
          ""main": "./index.cjs",",
          ""module": "./index.js"",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/package.json",
      },
      "programs": {
        "children": {
          "counter": {
            "children": {
              "Cargo.toml": {
                "content": [
                  "[package]",
                  "name = "counter"",
                  "version = "0.1.0"",
                  "description = "Created with Anchor"",
                  "edition = "2021"",
                  "[lib]",
                  "crate-type = ["cdylib", "lib"]",
                  "name = "counter"",
                  "[features]",
                  "no-entrypoint = []",
                  "no-idl = []",
                  "no-log-ix-name = []",
                  "cpi = ["no-entrypoint"]",
                  "default = []",
                  "[dependencies]",
                  "anchor-lang = "0.28.0"",
                ],
                "isBinary": false,
                "path": "./anchor/programs/counter/Cargo.toml",
              },
              "Xargo.toml": {
                "content": [
                  "[target.bpfel-unknown-unknown.dependencies.std]",
                  "features = []",
                ],
                "isBinary": false,
                "path": "./anchor/programs/counter/Xargo.toml",
              },
              "src": {
                "children": {
                  "lib.rs": {
                    "content": [
                      "#![allow(clippy::result_large_err)]",
                      "use anchor_lang::prelude::*;",
                      "declare_id!("CounNZdmsQmWh7uVngV9FXW2dZ6zAgbJyYsvBpqbykg");",
                      "#[program]",
                      "pub mod counter {",
                      "use super::*;",
                      "pub fn close_counter(_ctx: Context<CloseCounter>) -> Result<()> {",
                      "Ok(())",
                      "}",
                      "pub fn decrement(ctx: Context<Update>) -> Result<()> {",
                      "ctx.accounts.counter.count = ctx.accounts.counter.count.checked_sub(1).unwrap();",
                      "Ok(())",
                      "}",
                      "pub fn increment(ctx: Context<Update>) -> Result<()> {",
                      "ctx.accounts.counter.count = ctx.accounts.counter.count.checked_add(1).unwrap();",
                      "Ok(())",
                      "}",
                      "pub fn initialize_counter(_ctx: Context<InitializeCounter>) -> Result<()> {",
                      "Ok(())",
                      "}",
                      "pub fn set(ctx: Context<Update>, value: u8) -> Result<()> {",
                      "ctx.accounts.counter.count = value.clone();",
                      "Ok(())",
                      "}",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct InitializeCounter<'info> {",
                      "#[account(mut)]",
                      "pub payer: Signer<'info>,",
                      "#[account(",
                      "init,",
                      "space = 8 + Counter::INIT_SPACE,",
                      "payer = payer",
                      ")]",
                      "pub counter: Account<'info, Counter>,",
                      "pub system_program: Program<'info, System>,",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct CloseCounter<'info> {",
                      "#[account(mut)]",
                      "pub payer: Signer<'info>,",
                      "#[account(",
                      "mut,",
                      "close = payer, // close account and return lamports to payer",
                      ")]",
                      "pub counter: Account<'info, Counter>,",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct Update<'info> {",
                      "#[account(mut)]",
                      "pub counter: Account<'info, Counter>,",
                      "}",
                      "#[account]",
                      "#[derive(InitSpace)]",
                      "pub struct Counter {",
                      "count: u8,",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./anchor/programs/counter/src/lib.rs",
                  },
                },
                "path": "./anchor/programs/counter/src",
              },
            },
            "path": "./anchor/programs/counter",
          },
        },
        "path": "./anchor/programs",
      },
      "project.json": {
        "content": [
          "{",
          ""name": "anchor",",
          ""$schema": "../node_modules/nx/schemas/project-schema.json",",
          ""sourceRoot": "anchor/src",",
          ""projectType": "library",",
          ""targets": {",
          ""build": {",
          ""executor": "@nx/rollup:rollup",",
          ""outputs": ["{options.outputPath}"],",
          ""options": {",
          ""outputPath": "dist/anchor",",
          ""main": "anchor/src/index.ts",",
          ""tsConfig": "anchor/tsconfig.lib.json",",
          ""assets": [],",
          ""project": "anchor/package.json",",
          ""compiler": "swc",",
          ""format": ["cjs", "esm"]",
          "}",
          "},",
          ""lint": {",
          ""executor": "@nx/eslint:lint",",
          ""outputs": ["{options.outputFile}"],",
          ""options": {",
          ""lintFilePatterns": ["anchor/**/*.ts", "anchor/package.json"]",
          "}",
          "},",
          ""test": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor",",
          ""commands": ["anchor test"],",
          ""parallel": false",
          "}",
          "},",
          ""anchor": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor",",
          ""commands": ["anchor"],",
          ""parallel": false",
          "}",
          "},",
          ""localnet": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor",",
          ""commands": ["anchor localnet"],",
          ""parallel": false",
          "}",
          "},",
          ""jest": {",
          ""executor": "@nx/jest:jest",",
          ""outputs": ["{workspaceRoot}/coverage/{projectRoot}"],",
          ""options": {",
          ""jestConfig": "anchor/jest.config.ts"",
          "}",
          "}",
          "},",
          ""tags": []",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/project.json",
      },
      "src": {
        "children": {
          "counter-exports.ts": {
            "content": [
              "import { Program } from '@coral-xyz/anchor';",
              "import { Cluster, PublicKey } from '@solana/web3.js';",
              "import { IDL as CounterIDL } from '../target/types/counter';",
              "import type { Counter } from '../target/types/counter';",
              "export { Counter, CounterIDL };",
              "export type CounterProgram = Program<Counter>;",
              "export const COUNTER_PROGRAM_ID = new PublicKey(",
              "'CounNZdmsQmWh7uVngV9FXW2dZ6zAgbJyYsvBpqbykg'",
              ");",
              "export function getCounterProgramId(cluster: Cluster) {",
              "switch (cluster) {",
              "case 'devnet':",
              "case 'testnet':",
              "case 'mainnet-beta':",
              "return new PublicKey('CounNZdmsQmWh7uVngV9FXW2dZ6zAgbJyYsvBpqbykg');",
              "default:",
              "return COUNTER_PROGRAM_ID;",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "./anchor/src/counter-exports.ts",
          },
          "index.ts": {
            "content": [
              "export * from './counter-exports';",
            ],
            "isBinary": false,
            "path": "./anchor/src/index.ts",
          },
        },
        "path": "./anchor/src",
      },
      "target": {
        "children": {
          "idl": {
            "children": {
              "counter.json": {
                "content": [
                  "{",
                  ""version": "0.1.0",",
                  ""name": "counter",",
                  ""instructions": [",
                  "{",
                  ""name": "closeCounter",",
                  ""accounts": [",
                  "{",
                  ""name": "payer",",
                  ""isMut": true,",
                  ""isSigner": true",
                  "},",
                  "{",
                  ""name": "counter",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "decrement",",
                  ""accounts": [",
                  "{",
                  ""name": "counter",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "increment",",
                  ""accounts": [",
                  "{",
                  ""name": "counter",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "initializeCounter",",
                  ""accounts": [",
                  "{",
                  ""name": "payer",",
                  ""isMut": true,",
                  ""isSigner": true",
                  "},",
                  "{",
                  ""name": "counter",",
                  ""isMut": true,",
                  ""isSigner": true",
                  "},",
                  "{",
                  ""name": "systemProgram",",
                  ""isMut": false,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "set",",
                  ""accounts": [",
                  "{",
                  ""name": "counter",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": [",
                  "{",
                  ""name": "value",",
                  ""type": "u8"",
                  "}",
                  "]",
                  "}",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "Counter",",
                  ""type": {",
                  ""kind": "struct",",
                  ""fields": [",
                  "{",
                  ""name": "count",",
                  ""type": "u8"",
                  "}",
                  "]",
                  "}",
                  "}",
                  "],",
                  ""metadata": {",
                  ""address": "CounNZdmsQmWh7uVngV9FXW2dZ6zAgbJyYsvBpqbykg"",
                  "}",
                  "}",
                ],
                "isBinary": false,
                "path": "./anchor/target/idl/counter.json",
              },
            },
            "path": "./anchor/target/idl",
          },
          "types": {
            "children": {
              "counter.ts": {
                "content": [
                  "export type Counter = {",
                  "version: '0.1.0';",
                  "name: 'counter';",
                  "instructions: [",
                  "{",
                  "name: 'closeCounter';",
                  "accounts: [",
                  "{",
                  "name: 'payer';",
                  "isMut: true;",
                  "isSigner: true;",
                  "},",
                  "{",
                  "name: 'counter';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'decrement';",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'increment';",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'initializeCounter';",
                  "accounts: [",
                  "{",
                  "name: 'payer';",
                  "isMut: true;",
                  "isSigner: true;",
                  "},",
                  "{",
                  "name: 'counter';",
                  "isMut: true;",
                  "isSigner: true;",
                  "},",
                  "{",
                  "name: 'systemProgram';",
                  "isMut: false;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'set';",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [",
                  "{",
                  "name: 'value';",
                  "type: 'u8';",
                  "}",
                  "];",
                  "}",
                  "];",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "type: {",
                  "kind: 'struct';",
                  "fields: [",
                  "{",
                  "name: 'count';",
                  "type: 'u8';",
                  "}",
                  "];",
                  "};",
                  "}",
                  "];",
                  "};",
                  "export const IDL: Counter = {",
                  "version: '0.1.0',",
                  "name: 'counter',",
                  "instructions: [",
                  "{",
                  "name: 'closeCounter',",
                  "accounts: [",
                  "{",
                  "name: 'payer',",
                  "isMut: true,",
                  "isSigner: true,",
                  "},",
                  "{",
                  "name: 'counter',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'decrement',",
                  "accounts: [",
                  "{",
                  "name: 'counter',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'increment',",
                  "accounts: [",
                  "{",
                  "name: 'counter',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'initializeCounter',",
                  "accounts: [",
                  "{",
                  "name: 'payer',",
                  "isMut: true,",
                  "isSigner: true,",
                  "},",
                  "{",
                  "name: 'counter',",
                  "isMut: true,",
                  "isSigner: true,",
                  "},",
                  "{",
                  "name: 'systemProgram',",
                  "isMut: false,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'set',",
                  "accounts: [",
                  "{",
                  "name: 'counter',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [",
                  "{",
                  "name: 'value',",
                  "type: 'u8',",
                  "},",
                  "],",
                  "},",
                  "],",
                  "accounts: [",
                  "{",
                  "name: 'counter',",
                  "type: {",
                  "kind: 'struct',",
                  "fields: [",
                  "{",
                  "name: 'count',",
                  "type: 'u8',",
                  "},",
                  "],",
                  "},",
                  "},",
                  "],",
                  "};",
                ],
                "isBinary": false,
                "path": "./anchor/target/types/counter.ts",
              },
            },
            "path": "./anchor/target/types",
          },
        },
        "path": "./anchor/target",
      },
      "tests": {
        "children": {
          "counter.spec.ts": {
            "content": [
              "import * as anchor from '@coral-xyz/anchor';",
              "import { Program } from '@coral-xyz/anchor';",
              "import { Keypair } from '@solana/web3.js';",
              "import { Counter } from '../target/types/counter';",
              "describe('counter', () => {",
              "// Configure the client to use the local cluster.",
              "const provider = anchor.AnchorProvider.env();",
              "anchor.setProvider(provider);",
              "const payer = provider.wallet as anchor.Wallet;",
              "const program = anchor.workspace.Counter as Program<Counter>;",
              "const counterKeypair = Keypair.generate();",
              "it('Initialize Counter', async () => {",
              "await program.methods",
              ".initializeCounter()",
              ".accounts({",
              "counter: counterKeypair.publicKey,",
              "payer: payer.publicKey,",
              "})",
              ".signers([counterKeypair])",
              ".rpc();",
              "const currentCount = await program.account.counter.fetch(",
              "counterKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(0);",
              "});",
              "it('Increment Counter', async () => {",
              "await program.methods",
              ".increment()",
              ".accounts({ counter: counterKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.counter.fetch(",
              "counterKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(1);",
              "});",
              "it('Increment Counter Again', async () => {",
              "await program.methods",
              ".increment()",
              ".accounts({ counter: counterKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.counter.fetch(",
              "counterKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(2);",
              "});",
              "it('Decrement Counter', async () => {",
              "await program.methods",
              ".decrement()",
              ".accounts({ counter: counterKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.counter.fetch(",
              "counterKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(1);",
              "});",
              "it('Set counter value', async () => {",
              "await program.methods",
              ".set(42)",
              ".accounts({ counter: counterKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.counter.fetch(",
              "counterKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(42);",
              "});",
              "it('Set close the counter account', async () => {",
              "await program.methods",
              ".closeCounter()",
              ".accounts({",
              "payer: payer.publicKey,",
              "counter: counterKeypair.publicKey,",
              "})",
              ".rpc();",
              "// The account should no longer exist, returning null.",
              "const userAccount = await program.account.counter.fetchNullable(",
              "counterKeypair.publicKey",
              ");",
              "expect(userAccount).toBeNull();",
              "});",
              "});",
            ],
            "isBinary": false,
            "path": "./anchor/tests/counter.spec.ts",
          },
        },
        "path": "./anchor/tests",
      },
      "tsconfig.json": {
        "content": [
          "{",
          ""extends": "../tsconfig.base.json",",
          ""compilerOptions": {",
          ""module": "commonjs"",
          "},",
          ""files": [],",
          ""include": [],",
          ""references": [",
          "{",
          ""path": "./tsconfig.lib.json"",
          "},",
          "{",
          ""path": "./tsconfig.spec.json"",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/tsconfig.json",
      },
      "tsconfig.lib.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""declaration": true,",
          ""types": ["node"]",
          "},",
          ""include": ["src/**/*.ts"],",
          ""exclude": ["jest.config.ts", "src/**/*.spec.ts", "src/**/*.test.ts"]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/tsconfig.lib.json",
      },
      "tsconfig.spec.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""module": "commonjs",",
          ""types": ["jest", "node"]",
          "},",
          ""include": [",
          ""jest.config.ts",",
          ""src/**/*.test.ts",",
          ""src/**/*.spec.ts",",
          ""src/**/*.d.ts"",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/tsconfig.spec.json",
      },
    },
    "path": "./anchor",
  },
  "jest.config.ts": {
    "content": [
      "import { getJestProjects } from '@nx/jest';",
      "export default {",
      "projects: getJestProjects(),",
      "};",
    ],
    "isBinary": false,
    "path": "./jest.config.ts",
  },
  "jest.preset.js": {
    "content": [
      "const nxPreset = require('@nx/jest/preset').default;",
      "module.exports = { ...nxPreset };",
    ],
    "isBinary": false,
    "path": "./jest.preset.js",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": {",
      ""defaultBase": "main"",
      "},",
      ""targetDefaults": {",
      ""build": {",
      ""cache": true",
      "},",
      ""lint": {",
      ""cache": true,",
      ""inputs": [",
      ""default",",
      ""{workspaceRoot}/.eslintrc.json",",
      ""{workspaceRoot}/.eslintignore",",
      ""{workspaceRoot}/eslint.config.js"",
      "]",
      "},",
      ""e2e": {",
      ""cache": true",
      "},",
      ""@nx/jest:jest": {",
      ""cache": true,",
      ""inputs": ["default", "^default", "{workspaceRoot}/jest.preset.js"],",
      ""options": {",
      ""passWithNoTests": true",
      "},",
      ""configurations": {",
      ""ci": {",
      ""ci": true,",
      ""codeCoverage": true",
      "}",
      "}",
      "}",
      "},",
      ""generators": {",
      ""@nx/react": {",
      ""application": {",
      ""babel": true",
      "}",
      "},",
      ""@nx/next": {",
      ""application": {",
      ""style": "css",",
      ""linter": "eslint"",
      "}",
      "}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {",
      ""@coral-xyz/anchor": "^0.29.0",",
      ""@solana/spl-token": "0.3.9",",
      ""@solana/wallet-adapter-base": "^0.9.23",",
      ""@solana/wallet-adapter-react": "^0.15.35",",
      ""@solana/wallet-adapter-react-ui": "^0.9.34",",
      ""@solana/wallet-adapter-solflare": "^0.6.28",",
      ""@solana/web3.js": "1.87.2",",
      ""@swc/helpers": "~0.5.2",",
      ""@tanstack/react-query-next-experimental": "5.8.4",",
      ""bs58": "5.0.0",",
      ""buffer": "6.0.3",",
      ""encoding": "0.1.13",",
      ""next": "13.4.1",",
      ""react": "18.2.0",",
      ""react-dom": "18.2.0",",
      ""tslib": "^2.3.0"",
      "},",
      ""devDependencies": {",
      ""@nx/eslint": "17.1.3",",
      ""@nx/eslint-plugin": "17.1.3",",
      ""@nx/jest": "17.1.3",",
      ""@nx/js": "17.1.3",",
      ""@nx/next": "17.1.3",",
      ""@nx/react": "17.1.3",",
      ""@nx/rollup": "17.1.3",",
      ""@swc-node/register": "~1.6.7",",
      ""@swc/cli": "~0.1.62",",
      ""@swc/core": "~1.3.85",",
      ""@swc/jest": "0.2.20",",
      ""@testing-library/react": "14.0.0",",
      ""@types/jest": "^29.4.0",",
      ""@types/node": "18.14.2",",
      ""@types/react": "18.2.33",",
      ""@types/react-dom": "18.2.14",",
      ""@typescript-eslint/eslint-plugin": "^6.9.1",",
      ""@typescript-eslint/parser": "^6.9.1",",
      ""eslint": "~8.46.0",",
      ""eslint-config-next": "13.4.1",",
      ""eslint-config-prettier": "^9.0.0",",
      ""eslint-plugin-import": "2.27.5",",
      ""eslint-plugin-jsx-a11y": "6.7.1",",
      ""eslint-plugin-react": "7.32.2",",
      ""eslint-plugin-react-hooks": "4.6.0",",
      ""jest": "^29.4.1",",
      ""jest-environment-jsdom": "^29.4.1",",
      ""prettier": "^2.6.2",",
      ""ts-jest": "^29.1.0",",
      ""ts-node": "10.9.1",",
      ""typescript": "~5.2.2"",
      "},",
      ""scripts": {",
      ""anchor": "nx run anchor:anchor",",
      ""localnet": "nx run anchor:anchor localnet",",
      ""build": "nx build test-app",",
      ""dev": "nx serve test-app"",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test-app": {
    "children": {
      ".eslintrc.json": {
        "content": [
          "{",
          ""extends": [",
          ""plugin:@nx/react-typescript",",
          ""next",",
          ""next/core-web-vitals",",
          ""../.eslintrc.json"",
          "],",
          ""ignorePatterns": ["!**/*", ".next/**/*"],",
          ""overrides": [",
          "{",
          ""files": ["*.*"],",
          ""rules": {",
          ""@next/next/no-html-link-for-pages": "off"",
          "}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
          ""rules": {",
          ""@next/next/no-html-link-for-pages": ["error", "test-app/pages"]",
          "}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.js", "*.jsx"],",
          ""rules": {}",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/.eslintrc.json",
      },
      "app": {
        "children": {
          "api": {
            "children": {
              "hello": {
                "children": {
                  "route.ts": {
                    "content": [
                      "export async function GET(request: Request) {",
                      "return new Response('Hello, from API!');",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./test-app/app/api/hello/route.ts",
                  },
                },
                "path": "./test-app/app/api/hello",
              },
            },
            "path": "./test-app/app/api",
          },
          "app-layout.tsx": {
            "content": [
              "import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';",
              "import { ReactNode } from 'react';",
              "import Link from 'next/link';",
              "export function AppLayout({ children }: { children: ReactNode }) {",
              "return (",
              "<div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>",
              "<div",
              "style={{",
              "display: 'flex',",
              "alignItems: 'center',",
              "justifyContent: 'space-between',",
              "padding: '6px 12px',",
              "}}",
              ">",
              "<div>",
              "<Link to="/">",
              "<img src="/assets/solana-logo.png" height={24} alt="Solana Logo" />",
              "</Link>",
              "</div>",
              "<div>",
              "<WalletMultiButton />",
              "</div>",
              "</div>",
              "<div style={{ flexGrow: 1, padding: '6px' }}>{children}</div>",
              "<footer",
              "style={{",
              "display: 'flex',",
              "alignItems: 'center',",
              "justifyContent: 'center',",
              "padding: '6px 10px',",
              "}}",
              ">",
              "<aside>",
              "<p>",
              "Powered by{' '}",
              "<a",
              "href="https://github.com/solana-developers/create-solana-dapp"",
              "target="_blank"",
              "rel="noopener noreferrer"",
              ">",
              "create-solana-dapp",
              "</a>",
              "</p>",
              "</aside>",
              "</footer>",
              "</div>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/app-layout.tsx",
          },
          "counter": {
            "children": {
              "page.tsx": {
                "content": [
                  "import Counter from '../../components/counter/counter-feature';",
                  "export default function Page() {",
                  "return <Counter />;",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/app/counter/page.tsx",
              },
            },
            "path": "./test-app/app/counter",
          },
          "global.css": {
            "content": [
              "html,",
              "body {",
              "height: 100%;",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/global.css",
          },
          "layout.tsx": {
            "content": [
              "import './global.css';",
              "import { AppLayout } from './app-layout';",
              "import { SolanaProvider } from './solana-provider';",
              "export const metadata = {",
              "title: 'Welcome to test-app',",
              "description: 'Powered by create-solana-dapp',",
              "};",
              "export default function RootLayout({",
              "children,",
              "}: {",
              "children: React.ReactNode;",
              "}) {",
              "return (",
              "<html lang="en">",
              "<body>",
              "<SolanaProvider>",
              "<AppLayout>{children}</AppLayout>",
              "</SolanaProvider>",
              "</body>",
              "</html>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/layout.tsx",
          },
          "page.module.css": {
            "content": [
              ".page {",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/page.module.css",
          },
          "page.tsx": {
            "content": [
              "import { CounterIDL } from '@proj/anchor';",
              "export default async function Index() {",
              "return (",
              "<div>",
              "<pre>{JSON.stringify(CounterIDL, null, 2)}</pre>",
              "</div>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/page.tsx",
          },
          "solana-provider.tsx": {
            "content": [
              "'use client';",
              "import { WalletError } from '@solana/wallet-adapter-base';",
              "import {",
              "ConnectionProvider,",
              "WalletProvider,",
              "} from '@solana/wallet-adapter-react';",
              "import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';",
              "import { SolflareWalletAdapter } from '@solana/wallet-adapter-solflare';",
              "import { Cluster, clusterApiUrl } from '@solana/web3.js';",
              "import {",
              "createContext,",
              "ReactNode,",
              "useCallback,",
              "useContext,",
              "useMemo,",
              "useState,",
              "} from 'react';",
              "require('@solana/wallet-adapter-react-ui/styles.css');",
              "export interface SolanaProviderContext {",
              "cluster: Cluster;",
              "endpoint: string;",
              "setCluster?: (cluster: Cluster) => void;",
              "}",
              "const Context = createContext<SolanaProviderContext>(",
              "{} as SolanaProviderContext",
              ");",
              "export function SolanaProvider({ children }: { children: ReactNode }) {",
              "const [cluster, setCluster] = useState<Cluster>('devnet');",
              "const endpoint = useMemo(() => clusterApiUrl(cluster), [cluster]);",
              "const wallets = useMemo(() => [new SolflareWalletAdapter()], [cluster]);",
              "const onError = useCallback((error: WalletError) => {",
              "console.error(error);",
              "}, []);",
              "const value: SolanaProviderContext = {",
              "cluster,",
              "endpoint,",
              "setCluster,",
              "};",
              "return (",
              "<ConnectionProvider endpoint={endpoint}>",
              "<WalletProvider wallets={wallets} onError={onError} autoConnect={true}>",
              "<WalletModalProvider>",
              "<Context.Provider value={value}>{children}</Context.Provider>",
              "</WalletModalProvider>",
              "</WalletProvider>",
              "</ConnectionProvider>",
              ");",
              "}",
              "export function useSolana() {",
              "return useContext(Context);",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/solana-provider.tsx",
          },
        },
        "path": "./test-app/app",
      },
      "components": {
        "children": {
          "app-layout.tsx": {
            "content": [
              "import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';",
              "import { ReactNode } from 'react';",
              "import { Link } from 'react-router-dom';",
              "export function AppLayout({ children }: { children: ReactNode }) {",
              "return (",
              "<div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>",
              "<div",
              "style={{",
              "display: 'flex',",
              "alignItems: 'center',",
              "justifyContent: 'space-between',",
              "padding: '6px 12px',",
              "}}",
              ">",
              "<div>",
              "<Link to="/">",
              "<img src="/assets/solana-logo.png" height={24} alt="Solana Logo" />",
              "</Link>",
              "</div>",
              "<div>",
              "<WalletMultiButton />",
              "</div>",
              "</div>",
              "<div style={{ flexGrow: 1, padding: '6px' }}>{children}</div>",
              "<footer",
              "style={{",
              "display: 'flex',",
              "alignItems: 'center',",
              "justifyContent: 'center',",
              "padding: '6px 10px',",
              "}}",
              ">",
              "<aside>",
              "<p>",
              "Powered by{' '}",
              "<a",
              "href="https://github.com/solana-developers/create-solana-dapp"",
              "target="_blank"",
              "rel="noopener noreferrer"",
              ">",
              "create-solana-dapp",
              "</a>",
              "</p>",
              "</aside>",
              "</footer>",
              "</div>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/components/app-layout.tsx",
          },
          "counter": {
            "children": {
              "counter-data-access.tsx": {
                "content": [
                  "'use client';",
                  "import { CounterIDL, getCounterProgramId } from '@proj/anchor';",
                  "import { Program } from '@coral-xyz/anchor';",
                  "import { useConnection } from '@solana/wallet-adapter-react';",
                  "import { Cluster, Keypair, PublicKey } from '@solana/web3.js';",
                  "import { useMutation, useQuery } from '@tanstack/react-query';",
                  "import { useMemo } from 'react';",
                  "import toast from 'react-hot-toast';",
                  "import { useCluster } from '../cluster/cluster-data-access';",
                  "import { useAnchorProvider } from '../solana/solana-provider';",
                  "import { useTransactionToast } from '../ui/ui-layout';",
                  "export function useCounterProgram() {",
                  "const { connection } = useConnection();",
                  "const { cluster } = useCluster();",
                  "const transactionToast = useTransactionToast();",
                  "const provider = useAnchorProvider();",
                  "const programId = useMemo(",
                  "() => getCounterProgramId(cluster.network as Cluster),",
                  "[cluster]",
                  ");",
                  "const program = new Program(CounterIDL, programId, provider);",
                  "const accounts = useQuery({",
                  "queryKey: ['counter', 'all', { cluster }],",
                  "queryFn: () => program.account.counter.all(),",
                  "});",
                  "const getProgramAccount = useQuery({",
                  "queryKey: ['get-program-account', { cluster }],",
                  "queryFn: () => connection.getParsedAccountInfo(programId),",
                  "});",
                  "const initialize = useMutation({",
                  "mutationKey: ['counter', 'initialize', { cluster }],",
                  "mutationFn: (keypair: Keypair) =>",
                  "program.methods",
                  ".initializeCounter()",
                  ".accounts({ counter: keypair.publicKey })",
                  ".signers([keypair])",
                  ".rpc(),",
                  "onSuccess: (signature) => {",
                  "transactionToast(signature);",
                  "return accounts.refetch();",
                  "},",
                  "onError: () => toast.error('Failed to initialize counter'),",
                  "});",
                  "return {",
                  "program,",
                  "programId,",
                  "accounts,",
                  "getProgramAccount,",
                  "initialize,",
                  "};",
                  "}",
                  "export function useCounterProgramAccount({ counter }: { counter: PublicKey }) {",
                  "const { cluster } = useCluster();",
                  "const transactionToast = useTransactionToast();",
                  "const { program, accounts } = useCounterProgram();",
                  "const account = useQuery({",
                  "queryKey: ['counter', 'fetch', { cluster, counter }],",
                  "queryFn: () => program.account.counter.fetch(counter),",
                  "});",
                  "const close = useMutation({",
                  "mutationKey: ['counter', 'close', { cluster, counter }],",
                  "mutationFn: () =>",
                  "program.methods.closeCounter().accounts({ counter }).rpc(),",
                  "onSuccess: (tx) => {",
                  "transactionToast(tx);",
                  "return accounts.refetch();",
                  "},",
                  "});",
                  "const decrement = useMutation({",
                  "mutationKey: ['counter', 'decrement', { cluster, counter }],",
                  "mutationFn: () => program.methods.decrement().accounts({ counter }).rpc(),",
                  "onSuccess: (tx) => {",
                  "transactionToast(tx);",
                  "return account.refetch();",
                  "},",
                  "});",
                  "const increment = useMutation({",
                  "mutationKey: ['counter', 'increment', { cluster, counter }],",
                  "mutationFn: () => program.methods.increment().accounts({ counter }).rpc(),",
                  "onSuccess: (tx) => {",
                  "transactionToast(tx);",
                  "return account.refetch();",
                  "},",
                  "});",
                  "const set = useMutation({",
                  "mutationKey: ['counter', 'set', { cluster, counter }],",
                  "mutationFn: (value: number) =>",
                  "program.methods.set(value).accounts({ counter }).rpc(),",
                  "onSuccess: (tx) => {",
                  "transactionToast(tx);",
                  "return account.refetch();",
                  "},",
                  "});",
                  "return {",
                  "account,",
                  "close,",
                  "decrement,",
                  "increment,",
                  "set,",
                  "};",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/counter/counter-data-access.tsx",
              },
              "counter-feature.tsx": {
                "content": [
                  "'use client';",
                  "import { useWallet } from '@solana/wallet-adapter-react';",
                  "import { WalletButton } from '../solana/solana-provider';",
                  "import { AppHero, ellipsify } from '../ui/ui-layout';",
                  "import { ExplorerLink } from '../cluster/cluster-ui';",
                  "import { useCounterProgram } from './counter-data-access';",
                  "import { CounterCreate, CounterList } from './counter-ui';",
                  "export default function CounterFeature() {",
                  "const { publicKey } = useWallet();",
                  "const { programId } = useCounterProgram();",
                  "return publicKey ? (",
                  "<div>",
                  "<AppHero",
                  "title="Counter"",
                  "subtitle={",
                  "'You can create a new counter by clicking the "Create" button. The state of a counter is stored on-chain and can be manipulated by calling the program\\'s methods (increment, decrement, set, and close).'",
                  "}",
                  ">",
                  "<p className="mb-6">",
                  "<ExplorerLink",
                  "path={\`account/\${programId}\`}",
                  "label={ellipsify(programId.toString())}",
                  "/>",
                  "</p>",
                  "<CounterCreate />",
                  "</AppHero>",
                  "<CounterList />",
                  "</div>",
                  ") : (",
                  "<div className="max-w-4xl mx-auto">",
                  "<div className="hero py-[64px]">",
                  "<div className="hero-content text-center">",
                  "<WalletButton />",
                  "</div>",
                  "</div>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/counter/counter-feature.tsx",
              },
              "counter-ui.tsx": {
                "content": [
                  "'use client';",
                  "import { Keypair, PublicKey } from '@solana/web3.js';",
                  "import { useMemo } from 'react';",
                  "import { ellipsify } from '../ui/ui-layout';",
                  "import { ExplorerLink } from '../cluster/cluster-ui';",
                  "import {",
                  "useCounterProgram,",
                  "useCounterProgramAccount,",
                  "} from './counter-data-access';",
                  "export function CounterCreate() {",
                  "const { initialize } = useCounterProgram();",
                  "return (",
                  "<button",
                  "className="btn btn-xs lg:btn-md btn-primary"",
                  "onClick={() => initialize.mutateAsync(Keypair.generate())}",
                  "disabled={initialize.isPending}",
                  ">",
                  "Create {initialize.isPending && '...'}",
                  "</button>",
                  ");",
                  "}",
                  "export function CounterList() {",
                  "const { accounts, getProgramAccount } = useCounterProgram();",
                  "if (getProgramAccount.isLoading) {",
                  "return <span className="loading loading-spinner loading-lg"></span>;",
                  "}",
                  "if (!getProgramAccount.data?.value) {",
                  "return (",
                  "<div className="alert alert-info flex justify-center">",
                  "<span>",
                  "Program account not found. Make sure you have deployed the program and",
                  "are on the correct cluster.",
                  "</span>",
                  "</div>",
                  ");",
                  "}",
                  "return (",
                  "<div className={'space-y-6'}>",
                  "{accounts.isLoading ? (",
                  "<span className="loading loading-spinner loading-lg"></span>",
                  ") : accounts.data?.length ? (",
                  "<div className="grid md:grid-cols-2 gap-4">",
                  "{accounts.data?.map((account) => (",
                  "<CounterCard",
                  "key={account.publicKey.toString()}",
                  "counter={account.publicKey}",
                  "/>",
                  "))}",
                  "</div>",
                  ") : (",
                  "<div className="text-center">",
                  "<h2 className={'text-2xl'}>No Counters</h2>",
                  "No counters found. Create one above to get started.",
                  "</div>",
                  ")}",
                  "</div>",
                  ");",
                  "}",
                  "function CounterCard({ counter }: { counter: PublicKey }) {",
                  "const { account, increment, set, decrement, close } =",
                  "useCounterProgramAccount({",
                  "counter,",
                  "});",
                  "const count = useMemo(() => account.data?.count ?? 0, [account.data?.count]);",
                  "return account.isLoading ? (",
                  "<span className="loading loading-spinner loading-lg"></span>",
                  ") : (",
                  "<div className="card card-bordered border-base-300 border-4 text-neutral-content">",
                  "<div className="card-body items-center text-center">",
                  "<div className="space-y-6">",
                  "<h2",
                  "className="card-title justify-center text-3xl cursor-pointer"",
                  "onClick={() => account.refetch()}",
                  ">",
                  "{count}",
                  "</h2>",
                  "<div className="card-actions justify-around">",
                  "<button",
                  "className="btn btn-xs lg:btn-md btn-outline"",
                  "onClick={() => increment.mutateAsync()}",
                  "disabled={increment.isPending}",
                  ">",
                  "Increment",
                  "</button>",
                  "<button",
                  "className="btn btn-xs lg:btn-md btn-outline"",
                  "onClick={() => {",
                  "const value = window.prompt(",
                  "'Set value to:',",
                  "count.toString() ?? '0'",
                  ");",
                  "if (",
                  "!value ||",
                  "parseInt(value) === count ||",
                  "isNaN(parseInt(value))",
                  ") {",
                  "return;",
                  "}",
                  "return set.mutateAsync(parseInt(value));",
                  "}}",
                  "disabled={set.isPending}",
                  ">",
                  "Set",
                  "</button>",
                  "<button",
                  "className="btn btn-xs lg:btn-md btn-outline"",
                  "onClick={() => decrement.mutateAsync()}",
                  "disabled={decrement.isPending}",
                  ">",
                  "Decrement",
                  "</button>",
                  "</div>",
                  "<div className="text-center space-y-4">",
                  "<p>",
                  "<ExplorerLink",
                  "path={\`account/\${counter}\`}",
                  "label={ellipsify(counter.toString())}",
                  "/>",
                  "</p>",
                  "<button",
                  "className="btn btn-xs btn-secondary btn-outline"",
                  "onClick={() => {",
                  "if (",
                  "!window.confirm(",
                  "'Are you sure you want to close this account?'",
                  ")",
                  ") {",
                  "return;",
                  "}",
                  "return close.mutateAsync();",
                  "}}",
                  "disabled={close.isPending}",
                  ">",
                  "Close",
                  "</button>",
                  "</div>",
                  "</div>",
                  "</div>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/counter/counter-ui.tsx",
              },
            },
            "path": "./test-app/components/counter",
          },
          "solana-provider.tsx": {
            "content": [
              "import { WalletError } from '@solana/wallet-adapter-base';",
              "import {",
              "ConnectionProvider,",
              "WalletProvider,",
              "} from '@solana/wallet-adapter-react';",
              "import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';",
              "import { SolflareWalletAdapter } from '@solana/wallet-adapter-solflare';",
              "import { Cluster, clusterApiUrl } from '@solana/web3.js';",
              "import {",
              "createContext,",
              "ReactNode,",
              "useCallback,",
              "useContext,",
              "useMemo,",
              "useState,",
              "} from 'react';",
              "require('@solana/wallet-adapter-react-ui/styles.css');",
              "export interface SolanaProviderContext {",
              "cluster: Cluster;",
              "endpoint: string;",
              "setCluster?: (cluster: Cluster) => void;",
              "}",
              "const Context = createContext<SolanaProviderContext>(",
              "{} as SolanaProviderContext",
              ");",
              "export function SolanaProvider({ children }: { children: ReactNode }) {",
              "const [cluster, setCluster] = useState<Cluster>('devnet');",
              "const endpoint = useMemo(() => clusterApiUrl(cluster), [cluster]);",
              "const wallets = useMemo(() => [new SolflareWalletAdapter()], [cluster]);",
              "const onError = useCallback((error: WalletError) => {",
              "console.error(error);",
              "}, []);",
              "const value: SolanaProviderContext = {",
              "cluster,",
              "endpoint,",
              "setCluster,",
              "};",
              "return (",
              "<ConnectionProvider endpoint={endpoint}>",
              "<WalletProvider wallets={wallets} onError={onError} autoConnect={true}>",
              "<WalletModalProvider>",
              "<Context.Provider value={value}>{children}</Context.Provider>",
              "</WalletModalProvider>",
              "</WalletProvider>",
              "</ConnectionProvider>",
              ");",
              "}",
              "export function useSolana() {",
              "return useContext(Context);",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/components/solana-provider.tsx",
          },
        },
        "path": "./test-app/components",
      },
      "index.d.ts": {
        "content": [
          "/* eslint-disable @typescript-eslint/no-explicit-any */",
          "declare module '*.svg' {",
          "const content: any;",
          "export const ReactComponent: any;",
          "export default content;",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/index.d.ts",
      },
      "next-env.d.ts": {
        "content": [
          "/// <reference types="next" />",
          "/// <reference types="next/image-types/global" />",
          "// NOTE: This file should not be edited",
          "// see https://nextjs.org/docs/basic-features/typescript for more information.",
        ],
        "isBinary": false,
        "path": "./test-app/next-env.d.ts",
      },
      "next.config.js": {
        "content": [
          "//@ts-check",
          "// eslint-disable-next-line @typescript-eslint/no-var-requires",
          "const { composePlugins, withNx } = require('@nx/next');",
          "/**",
          "* @type {import('@nx/next/plugins/with-nx').WithNxOptions}",
          "**/",
          "const nextConfig = {",
          "webpack: (config) => {",
          "config.externals = [",
          "...(config.externals || []),",
          "'bigint',",
          "'node-gyp-build',",
          "];",
          "return config;",
          "},",
          "nx: {",
          "// Set this to true if you would like to use SVGR",
          "// See: https://github.com/gregberge/svgr",
          "svgr: false,",
          "},",
          "};",
          "const plugins = [",
          "// Add more Next.js plugins to this list if needed.",
          "withNx,",
          "];",
          "module.exports = composePlugins(...plugins)(nextConfig);",
        ],
        "isBinary": false,
        "path": "./test-app/next.config.js",
      },
      "project.json": {
        "content": [
          "{",
          ""name": "test-app",",
          ""$schema": "../node_modules/nx/schemas/project-schema.json",",
          ""sourceRoot": "test-app",",
          ""projectType": "application",",
          ""targets": {",
          ""build": {",
          ""executor": "@nx/next:build",",
          ""outputs": ["{options.outputPath}"],",
          ""defaultConfiguration": "production",",
          ""options": {",
          ""outputPath": "dist/test-app"",
          "},",
          ""configurations": {",
          ""development": {",
          ""outputPath": "test-app"",
          "},",
          ""production": {}",
          "}",
          "},",
          ""serve": {",
          ""executor": "@nx/next:server",",
          ""defaultConfiguration": "development",",
          ""options": {",
          ""buildTarget": "test-app:build",",
          ""dev": true,",
          ""port": 3000",
          "},",
          ""configurations": {",
          ""development": {",
          ""buildTarget": "test-app:build:development",",
          ""dev": true",
          "},",
          ""production": {",
          ""buildTarget": "test-app:build:production",",
          ""dev": false",
          "}",
          "}",
          "},",
          ""export": {",
          ""executor": "@nx/next:export",",
          ""options": {",
          ""buildTarget": "test-app:build:production"",
          "}",
          "},",
          ""lint": {",
          ""executor": "@nx/eslint:lint",",
          ""outputs": ["{options.outputFile}"],",
          ""options": {",
          ""lintFilePatterns": ["test-app/**/*.{ts,tsx,js,jsx}"]",
          "}",
          "}",
          "},",
          ""tags": []",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/project.json",
      },
      "public": {
        "children": {
          ".gitkeep": {
            "content": [],
            "isBinary": false,
            "path": "./test-app/public/.gitkeep",
          },
          "favicon.ico": {
            "content": null,
            "isBinary": true,
            "path": "./test-app/public/favicon.ico",
          },
          "solana-logo.png": {
            "content": null,
            "isBinary": true,
            "path": "./test-app/public/solana-logo.png",
          },
        },
        "path": "./test-app/public",
      },
      "tsconfig.json": {
        "content": [
          "{",
          ""extends": "../tsconfig.base.json",",
          ""compilerOptions": {",
          ""jsx": "preserve",",
          ""allowJs": true,",
          ""esModuleInterop": true,",
          ""allowSyntheticDefaultImports": true,",
          ""strict": true,",
          ""forceConsistentCasingInFileNames": true,",
          ""noEmit": true,",
          ""resolveJsonModule": true,",
          ""isolatedModules": true,",
          ""incremental": true,",
          ""plugins": [{ "name": "next" }]",
          "},",
          ""include": [",
          ""**/*.ts",",
          ""**/*.tsx",",
          ""**/*.js",",
          ""**/*.jsx",",
          ""../test-app/.next/types/**/*.ts",",
          ""../dist/test-app/.next/types/**/*.ts",",
          ""next-env.d.ts"",
          "],",
          ""exclude": [",
          ""node_modules",",
          ""jest.config.ts",",
          ""src/**/*.spec.ts",",
          ""src/**/*.test.ts"",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/tsconfig.json",
      },
    },
    "path": "./test-app",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {",
      ""@proj/anchor": ["anchor/src/index.ts"]",
      "}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;

exports[`application generator default apps should generate default app with "tailwind" ui 1`] = `
{
  ".eslintignore": {
    "content": [
      "node_modules",
    ],
    "isBinary": false,
    "path": "./.eslintignore",
  },
  ".eslintrc.json": {
    "content": [
      "{",
      ""root": true,",
      ""ignorePatterns": ["**/*"],",
      ""plugins": ["@nx"],",
      ""overrides": [",
      "{",
      ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
      ""rules": {",
      ""@nx/enforce-module-boundaries": [",
      ""error",",
      "{",
      ""enforceBuildableLibDependency": true,",
      ""allow": [],",
      ""depConstraints": [",
      "{",
      ""sourceTag": "*",",
      ""onlyDependOnLibsWithTags": ["*"]",
      "}",
      "]",
      "}",
      "]",
      "}",
      "},",
      "{",
      ""files": ["*.ts", "*.tsx"],",
      ""extends": ["plugin:@nx/typescript"],",
      ""rules": {}",
      "},",
      "{",
      ""files": ["*.js", "*.jsx"],",
      ""extends": ["plugin:@nx/javascript"],",
      ""rules": {}",
      "}",
      "]",
      "}",
    ],
    "isBinary": false,
    "path": "./.eslintrc.json",
  },
  ".prettierignore": {
    "content": [
      "# Add files here to ignore them from prettier formatting",
      "/dist",
      "/coverage",
      "/.nx/cache",
      ".anchor",
      "target",
      "node_modules",
      "dist",
      "tmp",
      "build",
      "test-ledger",
    ],
    "isBinary": false,
    "path": "./.prettierignore",
  },
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "LICENSE": {
    "content": [
      "MIT License",
      "Copyright (c) 2023 test",
      "Permission is hereby granted, free of charge, to any person obtaining a copy",
      "of this software and associated documentation files (the "Software"), to deal",
      "in the Software without restriction, including without limitation the rights",
      "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
      "copies of the Software, and to permit persons to whom the Software is",
      "furnished to do so, subject to the following conditions:",
      "The above copyright notice and this permission notice shall be included in all",
      "copies or substantial portions of the Software.",
      "THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
      "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
      "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
      "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
      "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
      "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
      "SOFTWARE.",
    ],
    "isBinary": false,
    "path": "./LICENSE",
  },
  "README.md": {
    "content": [
      "# proj",
      "This project is generated with the [create-solana-dapp](https://github.com/solana-developers/create-solana-dapp) generator.",
      "## Getting Started",
      "### Prerequisites",
      "- Node v18.18.0 or higher",
      "- Rust v1.70.0 or higher",
      "- Anchor CLI 0.29.0 or higher",
      "- Solana CLI 1.17.0 or higher",
      "### Installation",
      "#### Clone the repo",
      "\`\`\`shell",
      "git clone <repo-url>",
      "cd <repo-name>",
      "\`\`\`",
      "#### Install Dependencies",
      "\`\`\`shell",
      "yarn install",
      "\`\`\`",
      "#### Start the web app",
      "\`\`\`",
      "yarn dev",
      "\`\`\`",
      "## Apps",
      "### anchor",
      "This is a Solana program written in Rust using the Anchor framework.",
      "#### Commands",
      "You can use any normal anchor commands. Either move to the \`anchor\` directory and run the \`anchor\` command or prefix the command with \`yarn\`, eg: \`yarn anchor\`.",
      "#### Sync the program id:",
      "Running this command will create a new keypair in the \`anchor/target/deploy\` directory and save the address to the Anchor config file and update the \`declare_id!\` macro in the \`./src/lib.rs\` file of the program.",
      "You will manually need to update the constant in \`anchor/lib/counter-exports.ts\` to match the new program id.",
      "\`\`\`shell",
      "yarn anchor keys sync",
      "\`\`\`",
      "#### Build the program:",
      "\`\`\`shell",
      "yarn anchor build",
      "\`\`\`",
      "#### Start the test validator with the program deployed:",
      "\`\`\`shell",
      "yarn anchor localnet",
      "\`\`\`",
      "#### Run the tests",
      "\`\`\`shell",
      "yarn anchor test",
      "\`\`\`",
      "#### Deploy to Devnet",
      "\`\`\`shell",
      "yarn anchor deploy --provider.cluster devnet",
      "\`\`\`",
      "### web",
      "This is a React app that uses the Anchor generated client to interact with the Solana program.",
      "#### Commands",
      "Start the web app",
      "\`\`\`shell",
      "yarn dev",
      "\`\`\`",
      "Build the web app",
      "\`\`\`shell",
      "yarn build",
      "\`\`\`",
    ],
    "isBinary": false,
    "path": "./README.md",
  },
  "anchor": {
    "children": {
      ".eslintrc.json": {
        "content": [
          "{",
          ""extends": ["../.eslintrc.json"],",
          ""ignorePatterns": ["!**/*"],",
          ""overrides": [",
          "{",
          ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.js", "*.jsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.json"],",
          ""parser": "jsonc-eslint-parser",",
          ""rules": {",
          ""@nx/dependency-checks": [",
          ""error",",
          "{",
          ""ignoredFiles": ["{projectRoot}/rollup.config.{js,ts,mjs,mts}"]",
          "}",
          "]",
          "}",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/.eslintrc.json",
      },
      ".swcrc": {
        "content": [
          "{",
          ""jsc": {",
          ""target": "es2017",",
          ""parser": {",
          ""syntax": "typescript",",
          ""decorators": true,",
          ""dynamicImport": true",
          "},",
          ""transform": {",
          ""decoratorMetadata": true,",
          ""legacyDecorator": true",
          "},",
          ""keepClassNames": true,",
          ""externalHelpers": true,",
          ""loose": true",
          "},",
          ""module": {",
          ""type": "es6"",
          "},",
          ""sourceMaps": true,",
          ""exclude": [",
          ""jest.config.ts",",
          "".*\\\\.spec.tsx?$",",
          "".*\\\\.test.tsx?$",",
          ""./src/jest-setup.ts$",",
          ""./**/jest-setup.ts$",",
          "".*.js$"",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/.swcrc",
      },
      "Anchor.toml": {
        "content": [
          "[features]",
          "seeds = false",
          "skip-lint = false",
          "[programs.localnet]",
          "counter = "EuJfgknXicf6iZASeagt5U6XDDPpLTQrvWPW31vgAwo8"",
          "[registry]",
          "url = "https://api.apr.dev"",
          "[provider]",
          "cluster = "Localnet"",
          "wallet = "~/.config/solana/id.json"",
          "[scripts]",
          "test = "../node_modules/.bin/nx run anchor:jest"",
          "[test.validator]",
          "bind_address = "127.0.0.1"",
        ],
        "isBinary": false,
        "path": "./anchor/Anchor.toml",
      },
      "Cargo.lock": {
        "content": null,
        "isBinary": true,
        "path": "./anchor/Cargo.lock",
      },
      "Cargo.toml": {
        "content": [
          "[workspace]",
          "members = [",
          ""programs/*"",
          "]",
          "resolver = "2"",
          "[profile.release]",
          "overflow-checks = true",
          "lto = "fat"",
          "codegen-units = 1",
          "[profile.release.build-override]",
          "opt-level = 3",
          "incremental = false",
          "codegen-units = 1",
        ],
        "isBinary": false,
        "path": "./anchor/Cargo.toml",
      },
      "README.md": {
        "content": [
          "# anchor",
          "This library was generated with [Nx](https://nx.dev).",
          "## Building",
          "Run \`nx build anchor\` to build the library.",
          "## Running unit tests",
          "Run \`nx test anchor\` to execute the unit tests via [Jest](https://jestjs.io).",
        ],
        "isBinary": false,
        "path": "./anchor/README.md",
      },
      "jest.config.ts": {
        "content": [
          "/* eslint-disable */",
          "import { readFileSync } from 'fs';",
          "// Reading the SWC compilation config and remove the "exclude"",
          "// for the test files to be compiled by SWC",
          "const { exclude: _, ...swcJestConfig } = JSON.parse(",
          "readFileSync(\`\${__dirname}/.swcrc\`, 'utf-8')",
          ");",
          "// disable .swcrc look-up by SWC core because we're passing in swcJestConfig ourselves.",
          "// If we do not disable this, SWC Core will read .swcrc and won't transform our test files due to "exclude"",
          "if (swcJestConfig.swcrc === undefined) {",
          "swcJestConfig.swcrc = false;",
          "}",
          "// Uncomment if using global setup/teardown files being transformed via swc",
          "// https://nx.dev/packages/jest/documents/overview#global-setup/teardown-with-nx-libraries",
          "// jest needs EsModule Interop to find the default exported setup/teardown functions",
          "// swcJestConfig.module.noInterop = false;",
          "export default {",
          "displayName: 'anchor',",
          "preset: '../jest.preset.js',",
          "transform: {",
          "'^.+\\\\.[tj]s$': ['@swc/jest', swcJestConfig],",
          "},",
          "moduleFileExtensions: ['ts', 'js', 'html'],",
          "testEnvironment: '',",
          "coverageDirectory: '../coverage/anchor',",
          "};",
        ],
        "isBinary": false,
        "path": "./anchor/jest.config.ts",
      },
      "migrations": {
        "children": {
          "deploy.ts": {
            "content": [
              "// Migrations are an early feature. Currently, they're nothing more than this",
              "// single deploy script that's invoked from the CLI, injecting a provider",
              "// configured from the workspace's Anchor.toml.",
              "import * as anchor from '@coral-xyz/anchor';",
              "module.exports = async function (provider) {",
              "// Configure client to use the provider.",
              "anchor.setProvider(provider);",
              "// Add your deploy script here.",
              "};",
            ],
            "isBinary": false,
            "path": "./anchor/migrations/deploy.ts",
          },
        },
        "path": "./anchor/migrations",
      },
      "package.json": {
        "content": [
          "{",
          ""name": "@proj/anchor",",
          ""version": "0.0.1",",
          ""dependencies": {},",
          ""type": "commonjs",",
          ""main": "./index.cjs",",
          ""module": "./index.js"",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/package.json",
      },
      "programs": {
        "children": {
          "counter": {
            "children": {
              "Cargo.toml": {
                "content": [
                  "[package]",
                  "name = "counter"",
                  "version = "0.1.0"",
                  "description = "Created with Anchor"",
                  "edition = "2021"",
                  "[lib]",
                  "crate-type = ["cdylib", "lib"]",
                  "name = "counter"",
                  "[features]",
                  "no-entrypoint = []",
                  "no-idl = []",
                  "no-log-ix-name = []",
                  "cpi = ["no-entrypoint"]",
                  "default = []",
                  "[dependencies]",
                  "anchor-lang = "0.28.0"",
                ],
                "isBinary": false,
                "path": "./anchor/programs/counter/Cargo.toml",
              },
              "Xargo.toml": {
                "content": [
                  "[target.bpfel-unknown-unknown.dependencies.std]",
                  "features = []",
                ],
                "isBinary": false,
                "path": "./anchor/programs/counter/Xargo.toml",
              },
              "src": {
                "children": {
                  "lib.rs": {
                    "content": [
                      "#![allow(clippy::result_large_err)]",
                      "use anchor_lang::prelude::*;",
                      "declare_id!("CounNZdmsQmWh7uVngV9FXW2dZ6zAgbJyYsvBpqbykg");",
                      "#[program]",
                      "pub mod counter {",
                      "use super::*;",
                      "pub fn close_counter(_ctx: Context<CloseCounter>) -> Result<()> {",
                      "Ok(())",
                      "}",
                      "pub fn decrement(ctx: Context<Update>) -> Result<()> {",
                      "ctx.accounts.counter.count = ctx.accounts.counter.count.checked_sub(1).unwrap();",
                      "Ok(())",
                      "}",
                      "pub fn increment(ctx: Context<Update>) -> Result<()> {",
                      "ctx.accounts.counter.count = ctx.accounts.counter.count.checked_add(1).unwrap();",
                      "Ok(())",
                      "}",
                      "pub fn initialize_counter(_ctx: Context<InitializeCounter>) -> Result<()> {",
                      "Ok(())",
                      "}",
                      "pub fn set(ctx: Context<Update>, value: u8) -> Result<()> {",
                      "ctx.accounts.counter.count = value.clone();",
                      "Ok(())",
                      "}",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct InitializeCounter<'info> {",
                      "#[account(mut)]",
                      "pub payer: Signer<'info>,",
                      "#[account(",
                      "init,",
                      "space = 8 + Counter::INIT_SPACE,",
                      "payer = payer",
                      ")]",
                      "pub counter: Account<'info, Counter>,",
                      "pub system_program: Program<'info, System>,",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct CloseCounter<'info> {",
                      "#[account(mut)]",
                      "pub payer: Signer<'info>,",
                      "#[account(",
                      "mut,",
                      "close = payer, // close account and return lamports to payer",
                      ")]",
                      "pub counter: Account<'info, Counter>,",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct Update<'info> {",
                      "#[account(mut)]",
                      "pub counter: Account<'info, Counter>,",
                      "}",
                      "#[account]",
                      "#[derive(InitSpace)]",
                      "pub struct Counter {",
                      "count: u8,",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./anchor/programs/counter/src/lib.rs",
                  },
                },
                "path": "./anchor/programs/counter/src",
              },
            },
            "path": "./anchor/programs/counter",
          },
        },
        "path": "./anchor/programs",
      },
      "project.json": {
        "content": [
          "{",
          ""name": "anchor",",
          ""$schema": "../node_modules/nx/schemas/project-schema.json",",
          ""sourceRoot": "anchor/src",",
          ""projectType": "library",",
          ""targets": {",
          ""build": {",
          ""executor": "@nx/rollup:rollup",",
          ""outputs": ["{options.outputPath}"],",
          ""options": {",
          ""outputPath": "dist/anchor",",
          ""main": "anchor/src/index.ts",",
          ""tsConfig": "anchor/tsconfig.lib.json",",
          ""assets": [],",
          ""project": "anchor/package.json",",
          ""compiler": "swc",",
          ""format": ["cjs", "esm"]",
          "}",
          "},",
          ""lint": {",
          ""executor": "@nx/eslint:lint",",
          ""outputs": ["{options.outputFile}"],",
          ""options": {",
          ""lintFilePatterns": ["anchor/**/*.ts", "anchor/package.json"]",
          "}",
          "},",
          ""test": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor",",
          ""commands": ["anchor test"],",
          ""parallel": false",
          "}",
          "},",
          ""anchor": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor",",
          ""commands": ["anchor"],",
          ""parallel": false",
          "}",
          "},",
          ""localnet": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor",",
          ""commands": ["anchor localnet"],",
          ""parallel": false",
          "}",
          "},",
          ""jest": {",
          ""executor": "@nx/jest:jest",",
          ""outputs": ["{workspaceRoot}/coverage/{projectRoot}"],",
          ""options": {",
          ""jestConfig": "anchor/jest.config.ts"",
          "}",
          "}",
          "},",
          ""tags": []",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/project.json",
      },
      "src": {
        "children": {
          "counter-exports.ts": {
            "content": [
              "import { Program } from '@coral-xyz/anchor';",
              "import { Cluster, PublicKey } from '@solana/web3.js';",
              "import { IDL as CounterIDL } from '../target/types/counter';",
              "import type { Counter } from '../target/types/counter';",
              "export { Counter, CounterIDL };",
              "export type CounterProgram = Program<Counter>;",
              "export const COUNTER_PROGRAM_ID = new PublicKey(",
              "'CounNZdmsQmWh7uVngV9FXW2dZ6zAgbJyYsvBpqbykg'",
              ");",
              "export function getCounterProgramId(cluster: Cluster) {",
              "switch (cluster) {",
              "case 'devnet':",
              "case 'testnet':",
              "case 'mainnet-beta':",
              "return new PublicKey('CounNZdmsQmWh7uVngV9FXW2dZ6zAgbJyYsvBpqbykg');",
              "default:",
              "return COUNTER_PROGRAM_ID;",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "./anchor/src/counter-exports.ts",
          },
          "index.ts": {
            "content": [
              "export * from './counter-exports';",
            ],
            "isBinary": false,
            "path": "./anchor/src/index.ts",
          },
        },
        "path": "./anchor/src",
      },
      "target": {
        "children": {
          "idl": {
            "children": {
              "counter.json": {
                "content": [
                  "{",
                  ""version": "0.1.0",",
                  ""name": "counter",",
                  ""instructions": [",
                  "{",
                  ""name": "closeCounter",",
                  ""accounts": [",
                  "{",
                  ""name": "payer",",
                  ""isMut": true,",
                  ""isSigner": true",
                  "},",
                  "{",
                  ""name": "counter",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "decrement",",
                  ""accounts": [",
                  "{",
                  ""name": "counter",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "increment",",
                  ""accounts": [",
                  "{",
                  ""name": "counter",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "initializeCounter",",
                  ""accounts": [",
                  "{",
                  ""name": "payer",",
                  ""isMut": true,",
                  ""isSigner": true",
                  "},",
                  "{",
                  ""name": "counter",",
                  ""isMut": true,",
                  ""isSigner": true",
                  "},",
                  "{",
                  ""name": "systemProgram",",
                  ""isMut": false,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "set",",
                  ""accounts": [",
                  "{",
                  ""name": "counter",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": [",
                  "{",
                  ""name": "value",",
                  ""type": "u8"",
                  "}",
                  "]",
                  "}",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "Counter",",
                  ""type": {",
                  ""kind": "struct",",
                  ""fields": [",
                  "{",
                  ""name": "count",",
                  ""type": "u8"",
                  "}",
                  "]",
                  "}",
                  "}",
                  "],",
                  ""metadata": {",
                  ""address": "CounNZdmsQmWh7uVngV9FXW2dZ6zAgbJyYsvBpqbykg"",
                  "}",
                  "}",
                ],
                "isBinary": false,
                "path": "./anchor/target/idl/counter.json",
              },
            },
            "path": "./anchor/target/idl",
          },
          "types": {
            "children": {
              "counter.ts": {
                "content": [
                  "export type Counter = {",
                  "version: '0.1.0';",
                  "name: 'counter';",
                  "instructions: [",
                  "{",
                  "name: 'closeCounter';",
                  "accounts: [",
                  "{",
                  "name: 'payer';",
                  "isMut: true;",
                  "isSigner: true;",
                  "},",
                  "{",
                  "name: 'counter';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'decrement';",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'increment';",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'initializeCounter';",
                  "accounts: [",
                  "{",
                  "name: 'payer';",
                  "isMut: true;",
                  "isSigner: true;",
                  "},",
                  "{",
                  "name: 'counter';",
                  "isMut: true;",
                  "isSigner: true;",
                  "},",
                  "{",
                  "name: 'systemProgram';",
                  "isMut: false;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'set';",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [",
                  "{",
                  "name: 'value';",
                  "type: 'u8';",
                  "}",
                  "];",
                  "}",
                  "];",
                  "accounts: [",
                  "{",
                  "name: 'counter';",
                  "type: {",
                  "kind: 'struct';",
                  "fields: [",
                  "{",
                  "name: 'count';",
                  "type: 'u8';",
                  "}",
                  "];",
                  "};",
                  "}",
                  "];",
                  "};",
                  "export const IDL: Counter = {",
                  "version: '0.1.0',",
                  "name: 'counter',",
                  "instructions: [",
                  "{",
                  "name: 'closeCounter',",
                  "accounts: [",
                  "{",
                  "name: 'payer',",
                  "isMut: true,",
                  "isSigner: true,",
                  "},",
                  "{",
                  "name: 'counter',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'decrement',",
                  "accounts: [",
                  "{",
                  "name: 'counter',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'increment',",
                  "accounts: [",
                  "{",
                  "name: 'counter',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'initializeCounter',",
                  "accounts: [",
                  "{",
                  "name: 'payer',",
                  "isMut: true,",
                  "isSigner: true,",
                  "},",
                  "{",
                  "name: 'counter',",
                  "isMut: true,",
                  "isSigner: true,",
                  "},",
                  "{",
                  "name: 'systemProgram',",
                  "isMut: false,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'set',",
                  "accounts: [",
                  "{",
                  "name: 'counter',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [",
                  "{",
                  "name: 'value',",
                  "type: 'u8',",
                  "},",
                  "],",
                  "},",
                  "],",
                  "accounts: [",
                  "{",
                  "name: 'counter',",
                  "type: {",
                  "kind: 'struct',",
                  "fields: [",
                  "{",
                  "name: 'count',",
                  "type: 'u8',",
                  "},",
                  "],",
                  "},",
                  "},",
                  "],",
                  "};",
                ],
                "isBinary": false,
                "path": "./anchor/target/types/counter.ts",
              },
            },
            "path": "./anchor/target/types",
          },
        },
        "path": "./anchor/target",
      },
      "tests": {
        "children": {
          "counter.spec.ts": {
            "content": [
              "import * as anchor from '@coral-xyz/anchor';",
              "import { Program } from '@coral-xyz/anchor';",
              "import { Keypair } from '@solana/web3.js';",
              "import { Counter } from '../target/types/counter';",
              "describe('counter', () => {",
              "// Configure the client to use the local cluster.",
              "const provider = anchor.AnchorProvider.env();",
              "anchor.setProvider(provider);",
              "const payer = provider.wallet as anchor.Wallet;",
              "const program = anchor.workspace.Counter as Program<Counter>;",
              "const counterKeypair = Keypair.generate();",
              "it('Initialize Counter', async () => {",
              "await program.methods",
              ".initializeCounter()",
              ".accounts({",
              "counter: counterKeypair.publicKey,",
              "payer: payer.publicKey,",
              "})",
              ".signers([counterKeypair])",
              ".rpc();",
              "const currentCount = await program.account.counter.fetch(",
              "counterKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(0);",
              "});",
              "it('Increment Counter', async () => {",
              "await program.methods",
              ".increment()",
              ".accounts({ counter: counterKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.counter.fetch(",
              "counterKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(1);",
              "});",
              "it('Increment Counter Again', async () => {",
              "await program.methods",
              ".increment()",
              ".accounts({ counter: counterKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.counter.fetch(",
              "counterKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(2);",
              "});",
              "it('Decrement Counter', async () => {",
              "await program.methods",
              ".decrement()",
              ".accounts({ counter: counterKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.counter.fetch(",
              "counterKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(1);",
              "});",
              "it('Set counter value', async () => {",
              "await program.methods",
              ".set(42)",
              ".accounts({ counter: counterKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.counter.fetch(",
              "counterKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(42);",
              "});",
              "it('Set close the counter account', async () => {",
              "await program.methods",
              ".closeCounter()",
              ".accounts({",
              "payer: payer.publicKey,",
              "counter: counterKeypair.publicKey,",
              "})",
              ".rpc();",
              "// The account should no longer exist, returning null.",
              "const userAccount = await program.account.counter.fetchNullable(",
              "counterKeypair.publicKey",
              ");",
              "expect(userAccount).toBeNull();",
              "});",
              "});",
            ],
            "isBinary": false,
            "path": "./anchor/tests/counter.spec.ts",
          },
        },
        "path": "./anchor/tests",
      },
      "tsconfig.json": {
        "content": [
          "{",
          ""extends": "../tsconfig.base.json",",
          ""compilerOptions": {",
          ""module": "commonjs"",
          "},",
          ""files": [],",
          ""include": [],",
          ""references": [",
          "{",
          ""path": "./tsconfig.lib.json"",
          "},",
          "{",
          ""path": "./tsconfig.spec.json"",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/tsconfig.json",
      },
      "tsconfig.lib.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""declaration": true,",
          ""types": ["node"]",
          "},",
          ""include": ["src/**/*.ts"],",
          ""exclude": ["jest.config.ts", "src/**/*.spec.ts", "src/**/*.test.ts"]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/tsconfig.lib.json",
      },
      "tsconfig.spec.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""module": "commonjs",",
          ""types": ["jest", "node"]",
          "},",
          ""include": [",
          ""jest.config.ts",",
          ""src/**/*.test.ts",",
          ""src/**/*.spec.ts",",
          ""src/**/*.d.ts"",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/tsconfig.spec.json",
      },
    },
    "path": "./anchor",
  },
  "jest.config.ts": {
    "content": [
      "import { getJestProjects } from '@nx/jest';",
      "export default {",
      "projects: getJestProjects(),",
      "};",
    ],
    "isBinary": false,
    "path": "./jest.config.ts",
  },
  "jest.preset.js": {
    "content": [
      "const nxPreset = require('@nx/jest/preset').default;",
      "module.exports = { ...nxPreset };",
    ],
    "isBinary": false,
    "path": "./jest.preset.js",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": {",
      ""defaultBase": "main"",
      "},",
      ""targetDefaults": {",
      ""build": {",
      ""cache": true",
      "},",
      ""lint": {",
      ""cache": true,",
      ""inputs": [",
      ""default",",
      ""{workspaceRoot}/.eslintrc.json",",
      ""{workspaceRoot}/.eslintignore",",
      ""{workspaceRoot}/eslint.config.js"",
      "]",
      "},",
      ""e2e": {",
      ""cache": true",
      "},",
      ""@nx/jest:jest": {",
      ""cache": true,",
      ""inputs": ["default", "^default", "{workspaceRoot}/jest.preset.js"],",
      ""options": {",
      ""passWithNoTests": true",
      "},",
      ""configurations": {",
      ""ci": {",
      ""ci": true,",
      ""codeCoverage": true",
      "}",
      "}",
      "}",
      "},",
      ""generators": {",
      ""@nx/react": {",
      ""application": {",
      ""babel": true",
      "}",
      "},",
      ""@nx/next": {",
      ""application": {",
      ""style": "css",",
      ""linter": "eslint"",
      "}",
      "}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {",
      ""@coral-xyz/anchor": "^0.29.0",",
      ""@solana/spl-token": "0.3.9",",
      ""@solana/wallet-adapter-base": "^0.9.23",",
      ""@solana/wallet-adapter-react": "^0.15.35",",
      ""@solana/wallet-adapter-react-ui": "^0.9.34",",
      ""@solana/wallet-adapter-solflare": "^0.6.28",",
      ""@solana/web3.js": "1.87.2",",
      ""@swc/helpers": "~0.5.2",",
      ""@tabler/icons-react": "2.42.0",",
      ""@tailwindcss/typography": "0.5.10",",
      ""@tanstack/react-query": "5.8.4",",
      ""@tanstack/react-query-next-experimental": "5.8.4",",
      ""bs58": "5.0.0",",
      ""buffer": "6.0.3",",
      ""daisyui": "3.9.3",",
      ""encoding": "0.1.13",",
      ""jotai": "2.5.1",",
      ""next": "13.4.1",",
      ""react": "18.2.0",",
      ""react-dom": "18.2.0",",
      ""react-hot-toast": "2.4.1",",
      ""tslib": "^2.3.0"",
      "},",
      ""devDependencies": {",
      ""@nx/eslint": "17.1.3",",
      ""@nx/eslint-plugin": "17.1.3",",
      ""@nx/jest": "17.1.3",",
      ""@nx/js": "17.1.3",",
      ""@nx/next": "17.1.3",",
      ""@nx/react": "17.1.3",",
      ""@nx/rollup": "17.1.3",",
      ""@swc-node/register": "~1.6.7",",
      ""@swc/cli": "~0.1.62",",
      ""@swc/core": "~1.3.85",",
      ""@swc/jest": "0.2.20",",
      ""@testing-library/react": "14.0.0",",
      ""@types/jest": "^29.4.0",",
      ""@types/node": "18.14.2",",
      ""@types/react": "18.2.33",",
      ""@types/react-dom": "18.2.14",",
      ""@typescript-eslint/eslint-plugin": "^6.9.1",",
      ""@typescript-eslint/parser": "^6.9.1",",
      ""autoprefixer": "10.4.13",",
      ""eslint": "~8.46.0",",
      ""eslint-config-next": "13.4.1",",
      ""eslint-config-prettier": "^9.0.0",",
      ""eslint-plugin-import": "2.27.5",",
      ""eslint-plugin-jsx-a11y": "6.7.1",",
      ""eslint-plugin-react": "7.32.2",",
      ""eslint-plugin-react-hooks": "4.6.0",",
      ""jest": "^29.4.1",",
      ""jest-environment-jsdom": "^29.4.1",",
      ""postcss": "8.4.21",",
      ""prettier": "^2.6.2",",
      ""tailwindcss": "3.2.7",",
      ""ts-jest": "^29.1.0",",
      ""ts-node": "10.9.1",",
      ""typescript": "~5.2.2"",
      "},",
      ""scripts": {",
      ""anchor": "nx run anchor:anchor",",
      ""localnet": "nx run anchor:anchor localnet",",
      ""build": "nx build test-app",",
      ""dev": "nx serve test-app"",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test-app": {
    "children": {
      ".eslintrc.json": {
        "content": [
          "{",
          ""extends": [",
          ""plugin:@nx/react-typescript",",
          ""next",",
          ""next/core-web-vitals",",
          ""../.eslintrc.json"",
          "],",
          ""ignorePatterns": ["!**/*", ".next/**/*"],",
          ""overrides": [",
          "{",
          ""files": ["*.*"],",
          ""rules": {",
          ""@next/next/no-html-link-for-pages": "off"",
          "}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
          ""rules": {",
          ""@next/next/no-html-link-for-pages": ["error", "test-app/pages"]",
          "}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.js", "*.jsx"],",
          ""rules": {}",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/.eslintrc.json",
      },
      "app": {
        "children": {
          "account": {
            "children": {
              "[address]": {
                "children": {
                  "page.tsx": {
                    "content": [
                      "import AccountDetail from '../../../components/account/account-detail-feature';",
                      "export default function Page() {",
                      "return <AccountDetail />;",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./test-app/app/account/[address]/page.tsx",
                  },
                },
                "path": "./test-app/app/account/[address]",
              },
              "page.tsx": {
                "content": [
                  "import AccountList from '../../components/account/account-list-feature';",
                  "export default function Page() {",
                  "return <AccountList />;",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/app/account/page.tsx",
              },
            },
            "path": "./test-app/app/account",
          },
          "api": {
            "children": {
              "hello": {
                "children": {
                  "route.ts": {
                    "content": [
                      "export async function GET(request: Request) {",
                      "return new Response('Hello, from API!');",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./test-app/app/api/hello/route.ts",
                  },
                },
                "path": "./test-app/app/api/hello",
              },
            },
            "path": "./test-app/app/api",
          },
          "clusters": {
            "children": {
              "page.tsx": {
                "content": [
                  "import Cluster from '../../components/cluster/cluster-feature';",
                  "export default function Page() {",
                  "return <Cluster />;",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/app/clusters/page.tsx",
              },
            },
            "path": "./test-app/app/clusters",
          },
          "counter": {
            "children": {
              "page.tsx": {
                "content": [
                  "import Counter from '../../components/counter/counter-feature';",
                  "export default function Page() {",
                  "return <Counter />;",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/app/counter/page.tsx",
              },
            },
            "path": "./test-app/app/counter",
          },
          "global.css": {
            "content": [
              "@tailwind base;",
              "@tailwind components;",
              "@tailwind utilities;",
              "html,",
              "body {",
              "height: 100%;",
              "}",
              ".wallet-adapter-button-trigger {",
              "background: rgb(100, 26, 230) !important;",
              "border-radius: 8px !important;",
              "padding-left: 16px !important;",
              "padding-right: 16px !important;",
              "}",
              ".wallet-adapter-dropdown-list,",
              ".wallet-adapter-button {",
              "font-family: inherit !important;",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/global.css",
          },
          "layout.tsx": {
            "content": [
              "import './global.css';",
              "import { UiLayout } from '../components/ui/ui-layout';",
              "import { ClusterProvider } from '../components/cluster/cluster-data-access';",
              "import { SolanaProvider } from '../components/solana/solana-provider';",
              "import { Provider } from './provider';",
              "export const metadata = {",
              "title: 'Welcome to test-app',",
              "description: 'Powered by create-solana-dapp',",
              "};",
              "export default function RootLayout({",
              "children,",
              "}: {",
              "children: React.ReactNode;",
              "}) {",
              "return (",
              "<html lang="en">",
              "<body>",
              "<Provider>",
              "<ClusterProvider>",
              "<SolanaProvider>",
              "<UiLayout>{children}</UiLayout>",
              "</SolanaProvider>",
              "</ClusterProvider>",
              "</Provider>",
              "</body>",
              "</html>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/layout.tsx",
          },
          "page.module.css": {
            "content": [
              ".page {",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/page.module.css",
          },
          "page.tsx": {
            "content": [
              "import Dashboard from '../components/dashboard/dashboard-feature';",
              "export default function Page() {",
              "return <Dashboard />;",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/page.tsx",
          },
          "provider.tsx": {
            "content": [
              "'use client';",
              "import React, { ReactNode, useState } from 'react';",
              "import { ReactQueryStreamedHydration } from '@tanstack/react-query-next-experimental';",
              "import { QueryClientProvider, QueryClient } from '@tanstack/react-query';",
              "export function Provider({ children }: { children: ReactNode }) {",
              "const [client] = useState(new QueryClient());",
              "return (",
              "<QueryClientProvider client={client}>",
              "<ReactQueryStreamedHydration>{children}</ReactQueryStreamedHydration>",
              "</QueryClientProvider>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/provider.tsx",
          },
        },
        "path": "./test-app/app",
      },
      "components": {
        "children": {
          "account": {
            "children": {
              "account-data-access.tsx": {
                "content": [
                  "'use client';",
                  "import { useConnection, useWallet } from '@solana/wallet-adapter-react';",
                  "import { TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from '@solana/spl-token';",
                  "import {",
                  "Connection,",
                  "LAMPORTS_PER_SOL,",
                  "PublicKey,",
                  "SystemProgram,",
                  "TransactionMessage,",
                  "TransactionSignature,",
                  "VersionedTransaction,",
                  "} from '@solana/web3.js';",
                  "import { useMutation, useQuery } from '@tanstack/react-query';",
                  "import toast from 'react-hot-toast';",
                  "import { useCluster } from '../cluster/cluster-data-access';",
                  "import { useTransactionToast } from '../ui/ui-layout';",
                  "export function useAccount({ address }: { address: PublicKey }) {",
                  "const { cluster } = useCluster();",
                  "const { connection } = useConnection();",
                  "const transactionToast = useTransactionToast();",
                  "const wallet = useWallet();",
                  "const getBalance = useQuery({",
                  "queryKey: ['balance', { cluster, address }],",
                  "queryFn: () => connection.getBalance(address),",
                  "});",
                  "const getSignatures = useQuery({",
                  "queryKey: ['signatures', { cluster, address }],",
                  "queryFn: () => connection.getConfirmedSignaturesForAddress2(address),",
                  "});",
                  "const getTokenAccounts = useQuery({",
                  "queryKey: [",
                  "'token-accounts',",
                  "{ endpoint: connection.rpcEndpoint, address: address.toString() },",
                  "],",
                  "queryFn: async () => {",
                  "const [tokenAccounts, token2022Accounts] = await Promise.all([",
                  "connection.getParsedTokenAccountsByOwner(address, {",
                  "programId: TOKEN_PROGRAM_ID,",
                  "}),",
                  "connection.getParsedTokenAccountsByOwner(address, {",
                  "programId: TOKEN_2022_PROGRAM_ID,",
                  "}),",
                  "]);",
                  "return [...tokenAccounts.value, ...token2022Accounts.value];",
                  "},",
                  "});",
                  "const getTokenBalance = useQuery({",
                  "queryKey: [",
                  "'getTokenAccountBalance',",
                  "{ endpoint: connection.rpcEndpoint, account: address.toString() },",
                  "],",
                  "queryFn: () => connection.getTokenAccountBalance(address),",
                  "});",
                  "const requestAirdrop = useMutation({",
                  "mutationKey: ['airdrop', { cluster, address }],",
                  "mutationFn: async (amount: number = 1) => {",
                  "const [latestBlockhash, signature] = await Promise.all([",
                  "connection.getLatestBlockhash(),",
                  "connection.requestAirdrop(address, amount * LAMPORTS_PER_SOL),",
                  "]);",
                  "await connection.confirmTransaction(",
                  "{ signature, ...latestBlockhash },",
                  "'confirmed'",
                  ");",
                  "return signature;",
                  "},",
                  "onSuccess: (signature) => {",
                  "transactionToast(signature);",
                  "return Promise.all([getBalance.refetch(), getSignatures.refetch()]);",
                  "},",
                  "});",
                  "const transferSol = useMutation({",
                  "mutationKey: ['transfer-sol', { cluster, address }],",
                  "mutationFn: async (input: { destination: PublicKey; amount: number }) => {",
                  "let signature: TransactionSignature = '';",
                  "try {",
                  "const { transaction, latestBlockhash } = await createTransaction({",
                  "publicKey: address,",
                  "destination: input.destination,",
                  "amount: input.amount,",
                  "connection,",
                  "});",
                  "// Send transaction and await for signature",
                  "signature = await wallet.sendTransaction(transaction, connection);",
                  "// Send transaction and await for signature",
                  "await connection.confirmTransaction(",
                  "{ signature, ...latestBlockhash },",
                  "'confirmed'",
                  ");",
                  "console.log(signature);",
                  "return signature;",
                  "} catch (error: unknown) {",
                  "console.log('error', \`Transaction failed! \${error}\`, signature);",
                  "return;",
                  "}",
                  "},",
                  "onSuccess: (signature) => {",
                  "if (signature) {",
                  "transactionToast(signature);",
                  "}",
                  "return Promise.all([getBalance.refetch(), getSignatures.refetch()]);",
                  "},",
                  "onError: (error) => {",
                  "toast.error(\`Transaction failed! \${error}\`);",
                  "},",
                  "});",
                  "return {",
                  "getBalance,",
                  "getSignatures,",
                  "getTokenAccounts,",
                  "getTokenBalance,",
                  "requestAirdrop,",
                  "transferSol,",
                  "};",
                  "}",
                  "async function createTransaction({",
                  "publicKey,",
                  "destination,",
                  "amount,",
                  "connection,",
                  "}: {",
                  "publicKey: PublicKey;",
                  "destination: PublicKey;",
                  "amount: number;",
                  "connection: Connection;",
                  "}): Promise<{",
                  "transaction: VersionedTransaction;",
                  "latestBlockhash: { blockhash: string; lastValidBlockHeight: number };",
                  "}> {",
                  "// Get the latest blockhash to use in our transaction",
                  "const latestBlockhash = await connection.getLatestBlockhash();",
                  "// Create instructions to send, in this case a simple transfer",
                  "const instructions = [",
                  "SystemProgram.transfer({",
                  "fromPubkey: publicKey,",
                  "toPubkey: destination,",
                  "lamports: amount * LAMPORTS_PER_SOL,",
                  "}),",
                  "];",
                  "// Create a new TransactionMessage with version and compile it to legacy",
                  "const messageLegacy = new TransactionMessage({",
                  "payerKey: publicKey,",
                  "recentBlockhash: latestBlockhash.blockhash,",
                  "instructions,",
                  "}).compileToLegacyMessage();",
                  "// Create a new VersionedTransaction which supports legacy and v0",
                  "const transaction = new VersionedTransaction(messageLegacy);",
                  "return {",
                  "transaction,",
                  "latestBlockhash,",
                  "};",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/account/account-data-access.tsx",
              },
              "account-detail-feature.tsx": {
                "content": [
                  "'use client';",
                  "import { PublicKey } from '@solana/web3.js';",
                  "import { useMemo } from 'react';",
                  "import { useParams } from 'next/navigation';",
                  "import { ExplorerLink } from '../cluster/cluster-ui';",
                  "import { AppHero, ellipsify } from '../ui/ui-layout';",
                  "import {",
                  "AccountBalance,",
                  "AccountButtons,",
                  "AccountTokens,",
                  "AccountTransactions,",
                  "} from './account-ui';",
                  "export default function AccountDetailFeature() {",
                  "const params = useParams();",
                  "const address = useMemo(() => {",
                  "if (!params.address) {",
                  "return;",
                  "}",
                  "try {",
                  "return new PublicKey(params.address);",
                  "} catch (e) {",
                  "console.log(\`Invalid public key\`, e);",
                  "}",
                  "}, [params]);",
                  "if (!address) {",
                  "return <div>Error loading account</div>;",
                  "}",
                  "return (",
                  "<div>",
                  "<AppHero",
                  "title={<AccountBalance address={address} />}",
                  "subtitle={",
                  "<div className="my-4">",
                  "<ExplorerLink",
                  "path={\`account/\${address}\`}",
                  "label={ellipsify(address.toString())}",
                  "/>",
                  "</div>",
                  "}",
                  ">",
                  "<div className="my-4">",
                  "<AccountButtons address={address} />",
                  "</div>",
                  "</AppHero>",
                  "<div className="space-y-8">",
                  "<AccountTokens address={address} />",
                  "<AccountTransactions address={address} />",
                  "</div>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/account/account-detail-feature.tsx",
              },
              "account-list-feature.tsx": {
                "content": [
                  "'use client';",
                  "import { useWallet } from '@solana/wallet-adapter-react';",
                  "import { WalletButton } from '../solana/solana-provider';",
                  "import { redirect } from 'next/navigation';",
                  "export default function AccountListFeature() {",
                  "const { publicKey } = useWallet();",
                  "if (publicKey) {",
                  "return redirect(\`/account/\${publicKey.toString()}\`);",
                  "}",
                  "return (",
                  "<div className="hero py-[64px]">",
                  "<div className="hero-content text-center">",
                  "<WalletButton />",
                  "</div>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/account/account-list-feature.tsx",
              },
              "account-ui.tsx": {
                "content": [
                  "'use client';",
                  "import { useWallet } from '@solana/wallet-adapter-react';",
                  "import { LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js';",
                  "import { IconRefresh } from '@tabler/icons-react';",
                  "import { useQueryClient } from '@tanstack/react-query';",
                  "import { useMemo, useState } from 'react';",
                  "import { AppModal, ellipsify } from '../ui/ui-layout';",
                  "import { useCluster } from '../cluster/cluster-data-access';",
                  "import { ExplorerLink } from '../cluster/cluster-ui';",
                  "import { useAccount } from './account-data-access';",
                  "export function AccountBalance({ address }: { address: PublicKey }) {",
                  "const { getBalance: query } = useAccount({ address });",
                  "return (",
                  "<div>",
                  "<h1",
                  "className="text-5xl font-bold cursor-pointer"",
                  "onClick={() => query.refetch()}",
                  ">",
                  "{query.data ? <BalanceSol balance={query.data} /> : '...'} SOL",
                  "</h1>",
                  "</div>",
                  ");",
                  "}",
                  "export function AccountChecker() {",
                  "const { publicKey } = useWallet();",
                  "if (!publicKey) {",
                  "return null;",
                  "}",
                  "return <AccountBalanceCheck address={publicKey} />;",
                  "}",
                  "export function AccountBalanceCheck({ address }: { address: PublicKey }) {",
                  "const { cluster } = useCluster();",
                  "const { getBalance: query, requestAirdrop } = useAccount({ address });",
                  "if (query.isLoading) {",
                  "return null;",
                  "}",
                  "if (query.isError || !query.data) {",
                  "return (",
                  "<div className="alert alert-warning text-warning-content/80 rounded-none flex justify-center">",
                  "<span>",
                  "You are connected to <strong>{cluster.name}</strong> but your account",
                  "is not found on this cluster.",
                  "</span>",
                  "<button",
                  "className="btn btn-xs btn-neutral"",
                  "onClick={() =>",
                  "requestAirdrop.mutateAsync(1).catch((err) => console.log(err))",
                  "}",
                  ">",
                  "Request Airdrop",
                  "</button>",
                  "</div>",
                  ");",
                  "}",
                  "return null;",
                  "}",
                  "export function AccountButtons({ address }: { address: PublicKey }) {",
                  "const wallet = useWallet();",
                  "const { cluster } = useCluster();",
                  "const [showAirdropModal, setShowAirdropModal] = useState(false);",
                  "const [showReceiveModal, setShowReceiveModal] = useState(false);",
                  "const [showSendModal, setShowSendModal] = useState(false);",
                  "return (",
                  "<div>",
                  "<ModalAirdrop",
                  "hide={() => setShowAirdropModal(false)}",
                  "address={address}",
                  "show={showAirdropModal}",
                  "/>",
                  "<ModalReceive",
                  "address={address}",
                  "show={showReceiveModal}",
                  "hide={() => setShowReceiveModal(false)}",
                  "/>",
                  "<ModalSend",
                  "address={address}",
                  "show={showSendModal}",
                  "hide={() => setShowSendModal(false)}",
                  "/>",
                  "<div className="space-x-2">",
                  "<button",
                  "disabled={cluster.network?.includes('mainnet')}",
                  "className="btn btn-xs lg:btn-md btn-outline"",
                  "onClick={() => setShowAirdropModal(true)}",
                  ">",
                  "Airdrop",
                  "</button>",
                  "<button",
                  "disabled={wallet.publicKey?.toString() !== address.toString()}",
                  "className="btn btn-xs lg:btn-md btn-outline"",
                  "onClick={() => setShowSendModal(true)}",
                  ">",
                  "Send",
                  "</button>",
                  "<button",
                  "className="btn btn-xs lg:btn-md btn-outline"",
                  "onClick={() => setShowReceiveModal(true)}",
                  ">",
                  "Receive",
                  "</button>",
                  "</div>",
                  "</div>",
                  ");",
                  "}",
                  "export function AccountTokens({ address }: { address: PublicKey }) {",
                  "const [showAll, setShowAll] = useState(false);",
                  "const { getTokenAccounts: query } = useAccount({ address });",
                  "const client = useQueryClient();",
                  "const items = useMemo(() => {",
                  "if (showAll) return query.data;",
                  "return query.data?.slice(0, 5);",
                  "}, [query.data, showAll]);",
                  "return (",
                  "<div className="space-y-2">",
                  "<div className="justify-between">",
                  "<div className="flex justify-between">",
                  "<h2 className="text-2xl font-bold">Token Accounts</h2>",
                  "<div className="space-x-2">",
                  "{query.isLoading ? (",
                  "<span className="loading loading-spinner loading"></span>",
                  ") : (",
                  "<button",
                  "className="btn btn-sm btn-outline"",
                  "onClick={async () => {",
                  "await query.refetch();",
                  "await client.invalidateQueries({",
                  "queryKey: ['getTokenAccountBalance'],",
                  "});",
                  "}}",
                  ">",
                  "<IconRefresh size={16} />",
                  "</button>",
                  ")}",
                  "</div>",
                  "</div>",
                  "</div>",
                  "{query.isError && (",
                  "<pre className="alert alert-error">",
                  "Error: {query.error?.message.toString()}",
                  "</pre>",
                  ")}",
                  "{query.isSuccess && (",
                  "<div>",
                  "{query.data.length === 0 ? (",
                  "<div>No token accounts found.</div>",
                  ") : (",
                  "<table className="table border-4 rounded-lg border-separate border-base-300">",
                  "<thead>",
                  "<tr>",
                  "<th>Public Key</th>",
                  "<th>Mint</th>",
                  "<th className="text-right">Balance</th>",
                  "</tr>",
                  "</thead>",
                  "<tbody>",
                  "{items?.map(({ account, pubkey }) => (",
                  "<tr key={pubkey.toString()}>",
                  "<td>",
                  "<div className="flex space-x-2">",
                  "<span className="font-mono">",
                  "<ExplorerLink",
                  "label={ellipsify(pubkey.toString())}",
                  "path={\`account/\${pubkey.toString()}\`}",
                  "/>",
                  "</span>",
                  "</div>",
                  "</td>",
                  "<td>",
                  "<div className="flex space-x-2">",
                  "<span className="font-mono">",
                  "<ExplorerLink",
                  "label={ellipsify(account.data.parsed.info.mint)}",
                  "path={\`account/\${account.data.parsed.info.mint.toString()}\`}",
                  "/>",
                  "</span>",
                  "</div>",
                  "</td>",
                  "<td className="text-right">",
                  "<span className="font-mono">",
                  "<AccountTokenBalance address={address} />",
                  "</span>",
                  "</td>",
                  "</tr>",
                  "))}",
                  "{(query.data?.length ?? 0) > 5 && (",
                  "<tr>",
                  "<td colSpan={4} className="text-center">",
                  "<button",
                  "className="btn btn-xs btn-outline"",
                  "onClick={() => setShowAll(!showAll)}",
                  ">",
                  "{showAll ? 'Show Less' : 'Show All'}",
                  "</button>",
                  "</td>",
                  "</tr>",
                  ")}",
                  "</tbody>",
                  "</table>",
                  ")}",
                  "</div>",
                  ")}",
                  "</div>",
                  ");",
                  "}",
                  "export function AccountTokenBalance({ address }: { address: PublicKey }) {",
                  "const { getTokenBalance } = useAccount({ address });",
                  "return getTokenBalance.isLoading ? (",
                  "<span className="loading loading-spinner"></span>",
                  ") : getTokenBalance.data ? (",
                  "<div>{getTokenBalance.data?.value.uiAmount}</div>",
                  ") : (",
                  "<div>Error</div>",
                  ");",
                  "}",
                  "export function AccountTransactions({ address }: { address: PublicKey }) {",
                  "const { getSignatures: query } = useAccount({ address });",
                  "const [showAll, setShowAll] = useState(false);",
                  "const items = useMemo(() => {",
                  "if (showAll) return query.data;",
                  "return query.data?.slice(0, 5);",
                  "}, [query.data, showAll]);",
                  "return (",
                  "<div className="space-y-2">",
                  "<div className="flex justify-between">",
                  "<h2 className="text-2xl font-bold">Transaction History</h2>",
                  "<div className="space-x-2">",
                  "{query.isLoading ? (",
                  "<span className="loading loading-spinner loading"></span>",
                  ") : (",
                  "<button",
                  "className="btn btn-sm btn-outline"",
                  "onClick={() => query.refetch()}",
                  ">",
                  "<IconRefresh size={16} />",
                  "</button>",
                  ")}",
                  "</div>",
                  "</div>",
                  "{query.isError && (",
                  "<pre className="alert alert-error">",
                  "Error: {query.error?.message.toString()}",
                  "</pre>",
                  ")}",
                  "{query.isSuccess && (",
                  "<div>",
                  "{query.data.length === 0 ? (",
                  "<div>No transactions found.</div>",
                  ") : (",
                  "<table className="table border-4 rounded-lg border-separate border-base-300">",
                  "<thead>",
                  "<tr>",
                  "<th>Signature</th>",
                  "<th className="text-right">Slot</th>",
                  "<th>Block Time</th>",
                  "<th className="text-right">Status</th>",
                  "</tr>",
                  "</thead>",
                  "<tbody>",
                  "{items?.map((item) => (",
                  "<tr key={item.signature}>",
                  "<th className="font-mono">",
                  "<ExplorerLink",
                  "path={\`tx/\${item.signature}\`}",
                  "label={ellipsify(item.signature, 8)}",
                  "/>",
                  "</th>",
                  "<td className="font-mono text-right">",
                  "<ExplorerLink",
                  "path={\`block/\${item.slot}\`}",
                  "label={item.slot.toString()}",
                  "/>",
                  "</td>",
                  "<td>",
                  "{new Date((item.blockTime ?? 0) * 1000).toISOString()}",
                  "</td>",
                  "<td className="text-right">",
                  "{item.err ? (",
                  "<div",
                  "className="badge badge-error"",
                  "title={JSON.stringify(item.err)}",
                  ">",
                  "Failed",
                  "</div>",
                  ") : (",
                  "<div className="badge badge-success">Success</div>",
                  ")}",
                  "</td>",
                  "</tr>",
                  "))}",
                  "{(query.data?.length ?? 0) > 5 && (",
                  "<tr>",
                  "<td colSpan={4} className="text-center">",
                  "<button",
                  "className="btn btn-xs btn-outline"",
                  "onClick={() => setShowAll(!showAll)}",
                  ">",
                  "{showAll ? 'Show Less' : 'Show All'}",
                  "</button>",
                  "</td>",
                  "</tr>",
                  ")}",
                  "</tbody>",
                  "</table>",
                  ")}",
                  "</div>",
                  ")}",
                  "</div>",
                  ");",
                  "}",
                  "function BalanceSol({ balance }: { balance: number }) {",
                  "return (",
                  "<span>{Math.round((balance / LAMPORTS_PER_SOL) * 100000) / 100000}</span>",
                  ");",
                  "}",
                  "function ModalReceive({",
                  "hide,",
                  "show,",
                  "address,",
                  "}: {",
                  "hide: () => void;",
                  "show: boolean;",
                  "address: PublicKey;",
                  "}) {",
                  "return (",
                  "<AppModal title="Receive" hide={hide} show={show}>",
                  "<p>You can receive assets by sending them to your public key:</p>",
                  "<code>{address.toString()}</code>",
                  "</AppModal>",
                  ");",
                  "}",
                  "function ModalAirdrop({",
                  "hide,",
                  "show,",
                  "address,",
                  "}: {",
                  "hide: () => void;",
                  "show: boolean;",
                  "address: PublicKey;",
                  "}) {",
                  "const { requestAirdrop: mutation } = useAccount({ address });",
                  "const [amount, setAmount] = useState(2);",
                  "return (",
                  "<AppModal",
                  "hide={hide}",
                  "show={show}",
                  "title="Airdrop"",
                  "submitDisabled={!amount || mutation.isPending}",
                  "submitLabel="Requqest Airdrop"",
                  "submit={() => mutation.mutateAsync(amount).then(() => hide())}",
                  ">",
                  "<input",
                  "disabled={mutation.isPending}",
                  "type="number"",
                  "placeholder="Amount"",
                  "className="input input-bordered w-full"",
                  "value={amount}",
                  "onChange={(e) => setAmount(Number(e.target.value))}",
                  "/>",
                  "</AppModal>",
                  ");",
                  "}",
                  "function ModalSend({",
                  "hide,",
                  "show,",
                  "address,",
                  "}: {",
                  "hide: () => void;",
                  "show: boolean;",
                  "address: PublicKey;",
                  "}) {",
                  "const wallet = useWallet();",
                  "const { transferSol: mutation } = useAccount({ address });",
                  "const [destination, setDestination] = useState('');",
                  "const [amount, setAmount] = useState(1);",
                  "if (!address || !wallet.sendTransaction) {",
                  "return <div>Wallet not connected</div>;",
                  "}",
                  "return (",
                  "<AppModal",
                  "hide={hide}",
                  "show={show}",
                  "title="Send"",
                  "submitDisabled={!destination || !amount || mutation.isPending}",
                  "submitLabel="Send"",
                  "submit={() => {",
                  "mutation",
                  ".mutateAsync({",
                  "destination: new PublicKey(destination),",
                  "amount,",
                  "})",
                  ".then(() => hide());",
                  "}}",
                  ">",
                  "<input",
                  "disabled={mutation.isPending}",
                  "type="text"",
                  "placeholder="Destination"",
                  "className="input input-bordered w-full"",
                  "value={destination}",
                  "onChange={(e) => setDestination(e.target.value)}",
                  "/>",
                  "<input",
                  "disabled={mutation.isPending}",
                  "type="number"",
                  "placeholder="Amount"",
                  "className="input input-bordered w-full"",
                  "value={amount}",
                  "onChange={(e) => setAmount(Number(e.target.value))}",
                  "/>",
                  "</AppModal>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/account/account-ui.tsx",
              },
            },
            "path": "./test-app/components/account",
          },
          "cluster": {
            "children": {
              "cluster-data-access.tsx": {
                "content": [
                  "'use client';",
                  "import { WalletAdapterNetwork } from '@solana/wallet-adapter-base';",
                  "import { clusterApiUrl } from '@solana/web3.js';",
                  "import { atom, useAtomValue, useSetAtom } from 'jotai';",
                  "import { atomWithStorage } from 'jotai/utils';",
                  "import { createContext, ReactNode, useContext } from 'react';",
                  "export interface Cluster {",
                  "name: string;",
                  "endpoint: string;",
                  "network?: ClusterNetwork;",
                  "active?: boolean;",
                  "}",
                  "export enum ClusterNetwork {",
                  "Mainnet = 'mainnet-beta',",
                  "Testnet = 'testnet',",
                  "Devnet = 'devnet',",
                  "Custom = 'custom',",
                  "}",
                  "export function toWalletAdapterNetwork(",
                  "cluster?: ClusterNetwork",
                  "): WalletAdapterNetwork | undefined {",
                  "switch (cluster) {",
                  "case ClusterNetwork.Mainnet:",
                  "return WalletAdapterNetwork.Mainnet;",
                  "case ClusterNetwork.Testnet:",
                  "return WalletAdapterNetwork.Testnet;",
                  "case ClusterNetwork.Devnet:",
                  "return WalletAdapterNetwork.Devnet;",
                  "default:",
                  "return undefined;",
                  "}",
                  "}",
                  "export const defaultClusters: Cluster[] = [",
                  "{",
                  "name: 'devnet',",
                  "endpoint: clusterApiUrl('devnet'),",
                  "network: ClusterNetwork.Devnet,",
                  "},",
                  "{ name: 'local', endpoint: 'http://localhost:8899' },",
                  "{",
                  "name: 'testnet',",
                  "endpoint: clusterApiUrl('testnet'),",
                  "network: ClusterNetwork.Testnet,",
                  "},",
                  "];",
                  "const clusterAtom = atomWithStorage<Cluster>(",
                  "'solana-cluster',",
                  "defaultClusters[0]",
                  ");",
                  "const clustersAtom = atomWithStorage<Cluster[]>(",
                  "'solana-clusters',",
                  "defaultClusters",
                  ");",
                  "const activeClustersAtom = atom<Cluster[]>((get) => {",
                  "const clusters = get(clustersAtom);",
                  "const cluster = get(clusterAtom);",
                  "return clusters.map((item) => ({",
                  "...item,",
                  "active: item.name === cluster.name,",
                  "}));",
                  "});",
                  "const activeClusterAtom = atom<Cluster>((get) => {",
                  "const clusters = get(activeClustersAtom);",
                  "return clusters.find((item) => item.active) || clusters[0];",
                  "});",
                  "export interface ClusterProviderContext {",
                  "cluster: Cluster;",
                  "clusters: Cluster[];",
                  "addCluster: (cluster: Cluster) => void;",
                  "deleteCluster: (cluster: Cluster) => void;",
                  "setCluster: (cluster: Cluster) => void;",
                  "getExplorerUrl(path: string): string;",
                  "}",
                  "const Context = createContext<ClusterProviderContext>(",
                  "{} as ClusterProviderContext",
                  ");",
                  "export function ClusterProvider({ children }: { children: ReactNode }) {",
                  "const cluster = useAtomValue(activeClusterAtom);",
                  "const clusters = useAtomValue(activeClustersAtom);",
                  "const setCluster = useSetAtom(clusterAtom);",
                  "const setClusters = useSetAtom(clustersAtom);",
                  "const value: ClusterProviderContext = {",
                  "cluster,",
                  "clusters: clusters.sort((a, b) => (a.name > b.name ? 1 : -1)),",
                  "addCluster: (cluster: Cluster) => {",
                  "setClusters([...clusters, cluster]);",
                  "},",
                  "deleteCluster: (cluster: Cluster) => {",
                  "setClusters(clusters.filter((item) => item.name !== cluster.name));",
                  "},",
                  "setCluster: (cluster: Cluster) => setCluster(cluster),",
                  "getExplorerUrl: (path: string) =>",
                  "\`https://explorer.solana.com/\${path}\${getClusterUrlParam(cluster)}\`,",
                  "};",
                  "return <Context.Provider value={value}>{children}</Context.Provider>;",
                  "}",
                  "export function useCluster() {",
                  "return useContext(Context);",
                  "}",
                  "function getClusterUrlParam(cluster: Cluster): string {",
                  "let suffix = '';",
                  "switch (cluster.network) {",
                  "case ClusterNetwork.Devnet:",
                  "suffix = 'devnet';",
                  "break;",
                  "case ClusterNetwork.Mainnet:",
                  "suffix = '';",
                  "break;",
                  "case ClusterNetwork.Testnet:",
                  "suffix = 'testnet';",
                  "break;",
                  "default:",
                  "suffix = \`custom&customUrl=\${encodeURIComponent(cluster.endpoint)}\`;",
                  "break;",
                  "}",
                  "return suffix.length ? \`?cluster=\${suffix}\` : '';",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/cluster/cluster-data-access.tsx",
              },
              "cluster-feature.tsx": {
                "content": [
                  "'use client';",
                  "import { useState } from 'react';",
                  "import { AppHero } from '../ui/ui-layout';",
                  "import { ClusterUiModal } from './cluster-ui';",
                  "import { ClusterUiTable } from './cluster-ui';",
                  "export default function ClusterFeature() {",
                  "const [showModal, setShowModal] = useState(false);",
                  "return (",
                  "<div>",
                  "<AppHero",
                  "title="Clusters"",
                  "subtitle="Manage and select your Solana clusters"",
                  ">",
                  "<ClusterUiModal",
                  "show={showModal}",
                  "hideModal={() => setShowModal(false)}",
                  "/>",
                  "<button",
                  "className="btn btn-xs lg:btn-md btn-primary"",
                  "onClick={() => setShowModal(true)}",
                  ">",
                  "Add Cluster",
                  "</button>",
                  "</AppHero>",
                  "<ClusterUiTable />",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/cluster/cluster-feature.tsx",
              },
              "cluster-ui.tsx": {
                "content": [
                  "'use client';",
                  "import { useConnection } from '@solana/wallet-adapter-react';",
                  "import { IconTrash } from '@tabler/icons-react';",
                  "import { useQuery } from '@tanstack/react-query';",
                  "import { ReactNode, useState } from 'react';",
                  "import { AppModal } from '../ui/ui-layout';",
                  "import { ClusterNetwork, useCluster } from './cluster-data-access';",
                  "export function ExplorerLink({",
                  "path,",
                  "label,",
                  "className,",
                  "}: {",
                  "path: string;",
                  "label: string;",
                  "className?: string;",
                  "}) {",
                  "const { getExplorerUrl } = useCluster();",
                  "return (",
                  "<a",
                  "href={getExplorerUrl(path)}",
                  "target="_blank"",
                  "rel="noopener noreferrer"",
                  "className={className ? className : \`link font-mono\`}",
                  ">",
                  "{label}",
                  "</a>",
                  ");",
                  "}",
                  "export function ClusterChecker({ children }: { children: ReactNode }) {",
                  "const { cluster } = useCluster();",
                  "const { connection } = useConnection();",
                  "const query = useQuery({",
                  "queryKey: ['version', { cluster, endpoint: connection.rpcEndpoint }],",
                  "queryFn: () => connection.getVersion(),",
                  "retry: 1,",
                  "});",
                  "if (query.isLoading) {",
                  "return null;",
                  "}",
                  "if (query.isError || !query.data) {",
                  "return (",
                  "<div className="alert alert-warning text-warning-content/80 rounded-none flex justify-center">",
                  "<span>",
                  "Error connecting to cluster <strong>{cluster.name}</strong>",
                  "</span>",
                  "<button",
                  "className="btn btn-xs btn-neutral"",
                  "onClick={() => query.refetch()}",
                  ">",
                  "Refresh",
                  "</button>",
                  "</div>",
                  ");",
                  "}",
                  "return children;",
                  "}",
                  "export function ClusterUiSelect() {",
                  "const { clusters, setCluster, cluster } = useCluster();",
                  "return (",
                  "<div className="dropdown dropdown-end">",
                  "<label tabIndex={0} className="btn btn-primary rounded-btn">",
                  "{cluster.name}",
                  "</label>",
                  "<ul",
                  "tabIndex={0}",
                  "className="menu dropdown-content z-[1] p-2 shadow bg-base-100 rounded-box w-52 mt-4"",
                  ">",
                  "{clusters.map((item) => (",
                  "<li key={item.name}>",
                  "<button",
                  "className={\`btn btn-sm \${",
                  "item.active ? 'btn-primary' : 'btn-ghost'",
                  "}\`}",
                  "onClick={() => setCluster(item)}",
                  ">",
                  "{item.name}",
                  "</button>",
                  "</li>",
                  "))}",
                  "</ul>",
                  "</div>",
                  ");",
                  "}",
                  "export function ClusterUiModal({",
                  "hideModal,",
                  "show,",
                  "}: {",
                  "hideModal: () => void;",
                  "show: boolean;",
                  "}) {",
                  "const { addCluster } = useCluster();",
                  "const [name, setName] = useState('');",
                  "const [network, setNetwork] = useState<ClusterNetwork | undefined>();",
                  "const [endpoint, setEndpoint] = useState('');",
                  "return (",
                  "<AppModal",
                  "title={'Add Cluster'}",
                  "hide={hideModal}",
                  "show={show}",
                  "submit={() => {",
                  "addCluster({ name, network, endpoint });",
                  "hideModal();",
                  "}}",
                  "submitLabel="Save"",
                  ">",
                  "<input",
                  "type="text"",
                  "placeholder="Name"",
                  "className="input input-bordered w-full"",
                  "value={name}",
                  "onChange={(e) => setName(e.target.value)}",
                  "/>",
                  "<input",
                  "type="text"",
                  "placeholder="Endpoint"",
                  "className="input input-bordered w-full"",
                  "value={endpoint}",
                  "onChange={(e) => setEndpoint(e.target.value)}",
                  "/>",
                  "<select",
                  "className="select select-bordered w-full"",
                  "value={network}",
                  "onChange={(e) => setNetwork(e.target.value as ClusterNetwork)}",
                  ">",
                  "<option value={undefined}>Select a network</option>",
                  "<option value={ClusterNetwork.Devnet}>Devnet</option>",
                  "<option value={ClusterNetwork.Testnet}>Testnet</option>",
                  "<option value={ClusterNetwork.Mainnet}>Mainnet</option>",
                  "</select>",
                  "</AppModal>",
                  ");",
                  "}",
                  "export function ClusterUiTable() {",
                  "const { clusters, setCluster, deleteCluster } = useCluster();",
                  "return (",
                  "<div className="overflow-x-auto">",
                  "<table className="table border-4 border-separate border-base-300">",
                  "<thead>",
                  "<tr>",
                  "<th>Name/ Network / Endpoint</th>",
                  "<th className="text-center">Actions</th>",
                  "</tr>",
                  "</thead>",
                  "<tbody>",
                  "{clusters.map((item) => (",
                  "<tr key={item.name} className={item?.active ? 'bg-base-200' : ''}>",
                  "<td className="space-y-2">",
                  "<div className="whitespace-nowrap space-x-2">",
                  "<span className="text-xl">",
                  "{item?.active ? (",
                  "item.name",
                  ") : (",
                  "<button",
                  "title="Select cluster"",
                  "className="link link-secondary"",
                  "onClick={() => setCluster(item)}",
                  ">",
                  "{item.name}",
                  "</button>",
                  ")}",
                  "</span>",
                  "</div>",
                  "<span className="text-xs">",
                  "Network: {item.network ?? 'custom'}",
                  "</span>",
                  "<div className="whitespace-nowrap text-gray-500 text-xs">",
                  "{item.endpoint}",
                  "</div>",
                  "</td>",
                  "<td className="space-x-2 whitespace-nowrap text-center">",
                  "<button",
                  "disabled={item?.active}",
                  "className="btn btn-xs btn-default btn-outline"",
                  "onClick={() => {",
                  "if (!window.confirm('Are you sure?')) return;",
                  "deleteCluster(item);",
                  "}}",
                  ">",
                  "<IconTrash size={16} />",
                  "</button>",
                  "</td>",
                  "</tr>",
                  "))}",
                  "</tbody>",
                  "</table>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/cluster/cluster-ui.tsx",
              },
            },
            "path": "./test-app/components/cluster",
          },
          "counter": {
            "children": {
              "counter-data-access.tsx": {
                "content": [
                  "'use client';",
                  "import { CounterIDL, getCounterProgramId } from '@proj/anchor';",
                  "import { Program } from '@coral-xyz/anchor';",
                  "import { useConnection } from '@solana/wallet-adapter-react';",
                  "import { Cluster, Keypair, PublicKey } from '@solana/web3.js';",
                  "import { useMutation, useQuery } from '@tanstack/react-query';",
                  "import { useMemo } from 'react';",
                  "import toast from 'react-hot-toast';",
                  "import { useCluster } from '../cluster/cluster-data-access';",
                  "import { useAnchorProvider } from '../solana/solana-provider';",
                  "import { useTransactionToast } from '../ui/ui-layout';",
                  "export function useCounterProgram() {",
                  "const { connection } = useConnection();",
                  "const { cluster } = useCluster();",
                  "const transactionToast = useTransactionToast();",
                  "const provider = useAnchorProvider();",
                  "const programId = useMemo(",
                  "() => getCounterProgramId(cluster.network as Cluster),",
                  "[cluster]",
                  ");",
                  "const program = new Program(CounterIDL, programId, provider);",
                  "const accounts = useQuery({",
                  "queryKey: ['counter', 'all', { cluster }],",
                  "queryFn: () => program.account.counter.all(),",
                  "});",
                  "const getProgramAccount = useQuery({",
                  "queryKey: ['get-program-account', { cluster }],",
                  "queryFn: () => connection.getParsedAccountInfo(programId),",
                  "});",
                  "const initialize = useMutation({",
                  "mutationKey: ['counter', 'initialize', { cluster }],",
                  "mutationFn: (keypair: Keypair) =>",
                  "program.methods",
                  ".initializeCounter()",
                  ".accounts({ counter: keypair.publicKey })",
                  ".signers([keypair])",
                  ".rpc(),",
                  "onSuccess: (signature) => {",
                  "transactionToast(signature);",
                  "return accounts.refetch();",
                  "},",
                  "onError: () => toast.error('Failed to initialize counter'),",
                  "});",
                  "return {",
                  "program,",
                  "programId,",
                  "accounts,",
                  "getProgramAccount,",
                  "initialize,",
                  "};",
                  "}",
                  "export function useCounterProgramAccount({ counter }: { counter: PublicKey }) {",
                  "const { cluster } = useCluster();",
                  "const transactionToast = useTransactionToast();",
                  "const { program, accounts } = useCounterProgram();",
                  "const account = useQuery({",
                  "queryKey: ['counter', 'fetch', { cluster, counter }],",
                  "queryFn: () => program.account.counter.fetch(counter),",
                  "});",
                  "const close = useMutation({",
                  "mutationKey: ['counter', 'close', { cluster, counter }],",
                  "mutationFn: () =>",
                  "program.methods.closeCounter().accounts({ counter }).rpc(),",
                  "onSuccess: (tx) => {",
                  "transactionToast(tx);",
                  "return accounts.refetch();",
                  "},",
                  "});",
                  "const decrement = useMutation({",
                  "mutationKey: ['counter', 'decrement', { cluster, counter }],",
                  "mutationFn: () => program.methods.decrement().accounts({ counter }).rpc(),",
                  "onSuccess: (tx) => {",
                  "transactionToast(tx);",
                  "return account.refetch();",
                  "},",
                  "});",
                  "const increment = useMutation({",
                  "mutationKey: ['counter', 'increment', { cluster, counter }],",
                  "mutationFn: () => program.methods.increment().accounts({ counter }).rpc(),",
                  "onSuccess: (tx) => {",
                  "transactionToast(tx);",
                  "return account.refetch();",
                  "},",
                  "});",
                  "const set = useMutation({",
                  "mutationKey: ['counter', 'set', { cluster, counter }],",
                  "mutationFn: (value: number) =>",
                  "program.methods.set(value).accounts({ counter }).rpc(),",
                  "onSuccess: (tx) => {",
                  "transactionToast(tx);",
                  "return account.refetch();",
                  "},",
                  "});",
                  "return {",
                  "account,",
                  "close,",
                  "decrement,",
                  "increment,",
                  "set,",
                  "};",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/counter/counter-data-access.tsx",
              },
              "counter-feature.tsx": {
                "content": [
                  "'use client';",
                  "import { useWallet } from '@solana/wallet-adapter-react';",
                  "import { WalletButton } from '../solana/solana-provider';",
                  "import { AppHero, ellipsify } from '../ui/ui-layout';",
                  "import { ExplorerLink } from '../cluster/cluster-ui';",
                  "import { useCounterProgram } from './counter-data-access';",
                  "import { CounterCreate, CounterList } from './counter-ui';",
                  "export default function CounterFeature() {",
                  "const { publicKey } = useWallet();",
                  "const { programId } = useCounterProgram();",
                  "return publicKey ? (",
                  "<div>",
                  "<AppHero",
                  "title="Counter"",
                  "subtitle={",
                  "'You can create a new counter by clicking the "Create" button. The state of a counter is stored on-chain and can be manipulated by calling the program\\'s methods (increment, decrement, set, and close).'",
                  "}",
                  ">",
                  "<p className="mb-6">",
                  "<ExplorerLink",
                  "path={\`account/\${programId}\`}",
                  "label={ellipsify(programId.toString())}",
                  "/>",
                  "</p>",
                  "<CounterCreate />",
                  "</AppHero>",
                  "<CounterList />",
                  "</div>",
                  ") : (",
                  "<div className="max-w-4xl mx-auto">",
                  "<div className="hero py-[64px]">",
                  "<div className="hero-content text-center">",
                  "<WalletButton />",
                  "</div>",
                  "</div>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/counter/counter-feature.tsx",
              },
              "counter-ui.tsx": {
                "content": [
                  "'use client';",
                  "import { Keypair, PublicKey } from '@solana/web3.js';",
                  "import { useMemo } from 'react';",
                  "import { ellipsify } from '../ui/ui-layout';",
                  "import { ExplorerLink } from '../cluster/cluster-ui';",
                  "import {",
                  "useCounterProgram,",
                  "useCounterProgramAccount,",
                  "} from './counter-data-access';",
                  "export function CounterCreate() {",
                  "const { initialize } = useCounterProgram();",
                  "return (",
                  "<button",
                  "className="btn btn-xs lg:btn-md btn-primary"",
                  "onClick={() => initialize.mutateAsync(Keypair.generate())}",
                  "disabled={initialize.isPending}",
                  ">",
                  "Create {initialize.isPending && '...'}",
                  "</button>",
                  ");",
                  "}",
                  "export function CounterList() {",
                  "const { accounts, getProgramAccount } = useCounterProgram();",
                  "if (getProgramAccount.isLoading) {",
                  "return <span className="loading loading-spinner loading-lg"></span>;",
                  "}",
                  "if (!getProgramAccount.data?.value) {",
                  "return (",
                  "<div className="alert alert-info flex justify-center">",
                  "<span>",
                  "Program account not found. Make sure you have deployed the program and",
                  "are on the correct cluster.",
                  "</span>",
                  "</div>",
                  ");",
                  "}",
                  "return (",
                  "<div className={'space-y-6'}>",
                  "{accounts.isLoading ? (",
                  "<span className="loading loading-spinner loading-lg"></span>",
                  ") : accounts.data?.length ? (",
                  "<div className="grid md:grid-cols-2 gap-4">",
                  "{accounts.data?.map((account) => (",
                  "<CounterCard",
                  "key={account.publicKey.toString()}",
                  "counter={account.publicKey}",
                  "/>",
                  "))}",
                  "</div>",
                  ") : (",
                  "<div className="text-center">",
                  "<h2 className={'text-2xl'}>No Counters</h2>",
                  "No counters found. Create one above to get started.",
                  "</div>",
                  ")}",
                  "</div>",
                  ");",
                  "}",
                  "function CounterCard({ counter }: { counter: PublicKey }) {",
                  "const { account, increment, set, decrement, close } =",
                  "useCounterProgramAccount({",
                  "counter,",
                  "});",
                  "const count = useMemo(() => account.data?.count ?? 0, [account.data?.count]);",
                  "return account.isLoading ? (",
                  "<span className="loading loading-spinner loading-lg"></span>",
                  ") : (",
                  "<div className="card card-bordered border-base-300 border-4 text-neutral-content">",
                  "<div className="card-body items-center text-center">",
                  "<div className="space-y-6">",
                  "<h2",
                  "className="card-title justify-center text-3xl cursor-pointer"",
                  "onClick={() => account.refetch()}",
                  ">",
                  "{count}",
                  "</h2>",
                  "<div className="card-actions justify-around">",
                  "<button",
                  "className="btn btn-xs lg:btn-md btn-outline"",
                  "onClick={() => increment.mutateAsync()}",
                  "disabled={increment.isPending}",
                  ">",
                  "Increment",
                  "</button>",
                  "<button",
                  "className="btn btn-xs lg:btn-md btn-outline"",
                  "onClick={() => {",
                  "const value = window.prompt(",
                  "'Set value to:',",
                  "count.toString() ?? '0'",
                  ");",
                  "if (",
                  "!value ||",
                  "parseInt(value) === count ||",
                  "isNaN(parseInt(value))",
                  ") {",
                  "return;",
                  "}",
                  "return set.mutateAsync(parseInt(value));",
                  "}}",
                  "disabled={set.isPending}",
                  ">",
                  "Set",
                  "</button>",
                  "<button",
                  "className="btn btn-xs lg:btn-md btn-outline"",
                  "onClick={() => decrement.mutateAsync()}",
                  "disabled={decrement.isPending}",
                  ">",
                  "Decrement",
                  "</button>",
                  "</div>",
                  "<div className="text-center space-y-4">",
                  "<p>",
                  "<ExplorerLink",
                  "path={\`account/\${counter}\`}",
                  "label={ellipsify(counter.toString())}",
                  "/>",
                  "</p>",
                  "<button",
                  "className="btn btn-xs btn-secondary btn-outline"",
                  "onClick={() => {",
                  "if (",
                  "!window.confirm(",
                  "'Are you sure you want to close this account?'",
                  ")",
                  ") {",
                  "return;",
                  "}",
                  "return close.mutateAsync();",
                  "}}",
                  "disabled={close.isPending}",
                  ">",
                  "Close",
                  "</button>",
                  "</div>",
                  "</div>",
                  "</div>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/counter/counter-ui.tsx",
              },
            },
            "path": "./test-app/components/counter",
          },
          "dashboard": {
            "children": {
              "dashboard-feature.tsx": {
                "content": [
                  "'use client';",
                  "import { AppHero } from '../ui/ui-layout';",
                  "const links: { label: string; href: string }[] = [",
                  "{ label: 'Solana Docs', href: 'https://docs.solana.com/' },",
                  "{ label: 'Solana Faucet', href: 'https://faucet.solana.com/' },",
                  "{ label: 'Solana Cookbook', href: 'https://solanacookbook.com/' },",
                  "{ label: 'Solana Stack Overflow', href: 'https://solana.stackexchange.com/' },",
                  "{",
                  "label: 'Solana Developers GitHub',",
                  "href: 'https://github.com/solana-developers/',",
                  "},",
                  "];",
                  "export default function DashboardFeature() {",
                  "return (",
                  "<div>",
                  "<AppHero title="gm" subtitle="Say hi to you new Solana dApp." />",
                  "<div className="max-w-xl mx-auto py-6 sm:px-6 lg:px-8 text-center">",
                  "<div className="space-y-2">",
                  "<p>Here are some helpful links to get you started.</p>",
                  "{links.map((link, index) => (",
                  "<div key={index}>",
                  "<a",
                  "href={link.href}",
                  "className="link"",
                  "target="_blank"",
                  "rel="noopener noreferrer"",
                  ">",
                  "{link.label}",
                  "</a>",
                  "</div>",
                  "))}",
                  "</div>",
                  "</div>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/dashboard/dashboard-feature.tsx",
              },
            },
            "path": "./test-app/components/dashboard",
          },
          "solana": {
            "children": {
              "solana-provider.tsx": {
                "content": [
                  "'use client';",
                  "import dynamic from 'next/dynamic';",
                  "import { AnchorProvider } from '@coral-xyz/anchor';",
                  "import { WalletError } from '@solana/wallet-adapter-base';",
                  "import {",
                  "AnchorWallet,",
                  "ConnectionProvider,",
                  "useConnection,",
                  "useWallet,",
                  "WalletProvider,",
                  "} from '@solana/wallet-adapter-react';",
                  "import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';",
                  "import { SolflareWalletAdapter } from '@solana/wallet-adapter-solflare';",
                  "import { ReactNode, useCallback, useMemo } from 'react';",
                  "import {",
                  "toWalletAdapterNetwork,",
                  "useCluster,",
                  "} from '../cluster/cluster-data-access';",
                  "require('@solana/wallet-adapter-react-ui/styles.css');",
                  "export const WalletButton = dynamic(",
                  "async () =>",
                  "(await import('@solana/wallet-adapter-react-ui')).WalletMultiButton,",
                  "{ ssr: false }",
                  ");",
                  "export function SolanaProvider({ children }: { children: ReactNode }) {",
                  "const { cluster } = useCluster();",
                  "const endpoint = useMemo(() => cluster.endpoint, [cluster]);",
                  "const wallets = useMemo(",
                  "() => [",
                  "new SolflareWalletAdapter({",
                  "network: toWalletAdapterNetwork(cluster.network),",
                  "}),",
                  "],",
                  "[cluster]",
                  ");",
                  "const onError = useCallback((error: WalletError) => {",
                  "console.error(error);",
                  "}, []);",
                  "return (",
                  "<ConnectionProvider endpoint={endpoint}>",
                  "<WalletProvider wallets={wallets} onError={onError} autoConnect={true}>",
                  "<WalletModalProvider>{children}</WalletModalProvider>",
                  "</WalletProvider>",
                  "</ConnectionProvider>",
                  ");",
                  "}",
                  "export function useAnchorProvider() {",
                  "const { connection } = useConnection();",
                  "const wallet = useWallet();",
                  "return new AnchorProvider(connection, wallet as AnchorWallet, {",
                  "commitment: 'confirmed',",
                  "});",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/solana/solana-provider.tsx",
              },
            },
            "path": "./test-app/components/solana",
          },
          "ui": {
            "children": {
              "ui-layout.tsx": {
                "content": [
                  "'use client';",
                  "import { WalletButton } from '../solana/solana-provider';",
                  "import * as React from 'react';",
                  "import { ReactNode, Suspense, useEffect, useRef } from 'react';",
                  "import Link from 'next/link';",
                  "import { AccountChecker } from '../account/account-ui';",
                  "import {",
                  "ClusterChecker,",
                  "ClusterUiSelect,",
                  "ExplorerLink,",
                  "} from '../cluster/cluster-ui';",
                  "import toast, { Toaster } from 'react-hot-toast';",
                  "export function UiLayout({ children }: { children: ReactNode }) {",
                  "const pathname = 'TODO: implement me';",
                  "const pages = [",
                  "{ label: 'Account', path: '/account' },",
                  "{ label: 'Counter', path: '/counter' },",
                  "{ label: 'Clusters', path: '/clusters' },",
                  "];",
                  "return (",
                  "<div className="h-full flex flex-col">",
                  "<div className="navbar bg-base-300 text-neutral-content flex-col md:flex-row space-y-2 md:space-y-0">",
                  "<div className="flex-1">",
                  "<Link className="btn btn-ghost normal-case text-xl" href="/">",
                  "<img",
                  "className="h-4 md:h-6"",
                  "alt="Solana Logo"",
                  "src="/solana-logo.png"",
                  "/>",
                  "</Link>",
                  "<ul className="menu menu-horizontal px-1 space-x-2">",
                  "{pages.map(({ label, path }) => (",
                  "<li key={path}>",
                  "<Link",
                  "className={pathname.startsWith(path) ? 'active' : ''}",
                  "href={path}",
                  ">",
                  "{label}",
                  "</Link>",
                  "</li>",
                  "))}",
                  "</ul>",
                  "</div>",
                  "<div className="flex-none space-x-2">",
                  "<WalletButton />",
                  "<ClusterUiSelect />",
                  "</div>",
                  "</div>",
                  "<ClusterChecker>",
                  "<AccountChecker />",
                  "</ClusterChecker>",
                  "<div className="flex-grow mx-4 lg:mx-auto">",
                  "<Suspense",
                  "fallback={",
                  "<div className="text-center my-32">",
                  "<span className="loading loading-spinner loading-lg"></span>",
                  "</div>",
                  "}",
                  ">",
                  "{children}",
                  "</Suspense>",
                  "<Toaster position="bottom-right" />",
                  "</div>",
                  "<footer className="footer footer-center p-4 bg-base-300 text-base-content">",
                  "<aside>",
                  "<p>",
                  "Powered by{' '}",
                  "<a",
                  "className={'link '}",
                  "href="https://github.com/solana-developers/create-solana-dapp"",
                  "target={'_blank'}",
                  "rel={'noopener noreferrer'}",
                  ">",
                  "create-solana-dapp",
                  "</a>",
                  "</p>",
                  "</aside>",
                  "</footer>",
                  "</div>",
                  ");",
                  "}",
                  "export function AppModal({",
                  "children,",
                  "title,",
                  "hide,",
                  "show,",
                  "submit,",
                  "submitDisabled,",
                  "submitLabel,",
                  "}: {",
                  "children: ReactNode;",
                  "title: string;",
                  "hide: () => void;",
                  "show: boolean;",
                  "submit?: () => void;",
                  "submitDisabled?: boolean;",
                  "submitLabel?: string;",
                  "}) {",
                  "const dialogRef = useRef<HTMLDialogElement | null>(null);",
                  "useEffect(() => {",
                  "if (!dialogRef.current) return;",
                  "if (show) {",
                  "dialogRef.current.showModal();",
                  "} else {",
                  "dialogRef.current.close();",
                  "}",
                  "}, [show, dialogRef]);",
                  "return (",
                  "<dialog className="modal" ref={dialogRef}>",
                  "<div className="modal-box space-y-5">",
                  "<h3 className="font-bold text-lg">{title}</h3>",
                  "{children}",
                  "<div className="modal-action">",
                  "<div className="join space-x-2">",
                  "{submit ? (",
                  "<button",
                  "className="btn btn-xs lg:btn-md btn-primary"",
                  "onClick={submit}",
                  "disabled={submitDisabled}",
                  ">",
                  "{submitLabel || 'Save'}",
                  "</button>",
                  ") : null}",
                  "<button onClick={hide} className="btn">",
                  "Close",
                  "</button>",
                  "</div>",
                  "</div>",
                  "</div>",
                  "</dialog>",
                  ");",
                  "}",
                  "export function AppHero({",
                  "children,",
                  "title,",
                  "subtitle,",
                  "}: {",
                  "children?: ReactNode;",
                  "title: ReactNode;",
                  "subtitle: ReactNode;",
                  "}) {",
                  "return (",
                  "<div className="hero py-[64px]">",
                  "<div className="hero-content text-center">",
                  "<div className="max-w-2xl">",
                  "{typeof title === 'string' ? (",
                  "<h1 className="text-5xl font-bold cursor-pointer">{title}</h1>",
                  ") : (",
                  "title",
                  ")}",
                  "{typeof subtitle === 'string' ? (",
                  "<p className="py-6">{subtitle}</p>",
                  ") : (",
                  "subtitle",
                  ")}",
                  "{children}",
                  "</div>",
                  "</div>",
                  "</div>",
                  ");",
                  "}",
                  "export function ellipsify(str = '', len = 4) {",
                  "if (str.length > 30) {",
                  "return (",
                  "str.substring(0, len) + '..' + str.substring(str.length - len, str.length)",
                  ");",
                  "}",
                  "return str;",
                  "}",
                  "export function useTransactionToast() {",
                  "return (signature: string) => {",
                  "toast.success(",
                  "<div className={'text-center'}>",
                  "<div className="text-lg">Transaction sent</div>",
                  "<ExplorerLink",
                  "path={\`tx/\${signature}\`}",
                  "label={'View Transaction'}",
                  "className="btn btn-xs btn-primary"",
                  "/>",
                  "</div>",
                  ");",
                  "};",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/ui/ui-layout.tsx",
              },
            },
            "path": "./test-app/components/ui",
          },
        },
        "path": "./test-app/components",
      },
      "index.d.ts": {
        "content": [
          "/* eslint-disable @typescript-eslint/no-explicit-any */",
          "declare module '*.svg' {",
          "const content: any;",
          "export const ReactComponent: any;",
          "export default content;",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/index.d.ts",
      },
      "next-env.d.ts": {
        "content": [
          "/// <reference types="next" />",
          "/// <reference types="next/image-types/global" />",
          "// NOTE: This file should not be edited",
          "// see https://nextjs.org/docs/basic-features/typescript for more information.",
        ],
        "isBinary": false,
        "path": "./test-app/next-env.d.ts",
      },
      "next.config.js": {
        "content": [
          "//@ts-check",
          "// eslint-disable-next-line @typescript-eslint/no-var-requires",
          "const { composePlugins, withNx } = require('@nx/next');",
          "/**",
          "* @type {import('@nx/next/plugins/with-nx').WithNxOptions}",
          "**/",
          "const nextConfig = {",
          "webpack: (config) => {",
          "config.externals = [",
          "...(config.externals || []),",
          "'bigint',",
          "'node-gyp-build',",
          "];",
          "return config;",
          "},",
          "nx: {",
          "// Set this to true if you would like to use SVGR",
          "// See: https://github.com/gregberge/svgr",
          "svgr: false,",
          "},",
          "};",
          "const plugins = [",
          "// Add more Next.js plugins to this list if needed.",
          "withNx,",
          "];",
          "module.exports = composePlugins(...plugins)(nextConfig);",
        ],
        "isBinary": false,
        "path": "./test-app/next.config.js",
      },
      "postcss.config.js": {
        "content": [
          "const { join } = require('path');",
          "// Note: If you use library-specific PostCSS/Tailwind configuration then you should remove the \`postcssConfig\` build",
          "// option from your application's configuration (i.e. project.json).",
          "//",
          "// See: https://nx.dev/guides/using-tailwind-css-in-react#step-4:-applying-configuration-to-libraries",
          "module.exports = {",
          "plugins: {",
          "tailwindcss: {",
          "config: join(__dirname, 'tailwind.config.js'),",
          "},",
          "autoprefixer: {},",
          "},",
          "};",
        ],
        "isBinary": false,
        "path": "./test-app/postcss.config.js",
      },
      "project.json": {
        "content": [
          "{",
          ""name": "test-app",",
          ""$schema": "../node_modules/nx/schemas/project-schema.json",",
          ""sourceRoot": "test-app",",
          ""projectType": "application",",
          ""targets": {",
          ""build": {",
          ""executor": "@nx/next:build",",
          ""outputs": ["{options.outputPath}"],",
          ""defaultConfiguration": "production",",
          ""options": {",
          ""outputPath": "dist/test-app"",
          "},",
          ""configurations": {",
          ""development": {",
          ""outputPath": "test-app"",
          "},",
          ""production": {}",
          "}",
          "},",
          ""serve": {",
          ""executor": "@nx/next:server",",
          ""defaultConfiguration": "development",",
          ""options": {",
          ""buildTarget": "test-app:build",",
          ""dev": true,",
          ""port": 3000",
          "},",
          ""configurations": {",
          ""development": {",
          ""buildTarget": "test-app:build:development",",
          ""dev": true",
          "},",
          ""production": {",
          ""buildTarget": "test-app:build:production",",
          ""dev": false",
          "}",
          "}",
          "},",
          ""export": {",
          ""executor": "@nx/next:export",",
          ""options": {",
          ""buildTarget": "test-app:build:production"",
          "}",
          "},",
          ""lint": {",
          ""executor": "@nx/eslint:lint",",
          ""outputs": ["{options.outputFile}"],",
          ""options": {",
          ""lintFilePatterns": ["test-app/**/*.{ts,tsx,js,jsx}"]",
          "}",
          "}",
          "},",
          ""tags": []",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/project.json",
      },
      "public": {
        "children": {
          ".gitkeep": {
            "content": [],
            "isBinary": false,
            "path": "./test-app/public/.gitkeep",
          },
          "favicon.ico": {
            "content": null,
            "isBinary": true,
            "path": "./test-app/public/favicon.ico",
          },
          "solana-logo.png": {
            "content": null,
            "isBinary": true,
            "path": "./test-app/public/solana-logo.png",
          },
        },
        "path": "./test-app/public",
      },
      "tailwind.config.js": {
        "content": [
          "const { createGlobPatternsForDependencies } = require('@nx/react/tailwind');",
          "const { join } = require('path');",
          "/** @type {import('tailwindcss').Config} */",
          "module.exports = {",
          "content: [",
          "join(",
          "__dirname,",
          "'{src,pages,components,app}/**/*!(*.stories|*.spec).{ts,tsx,html}'",
          "),",
          "...createGlobPatternsForDependencies(__dirname),",
          "],",
          "theme: {",
          "extend: {},",
          "},",
          "plugins: [require('daisyui')],",
          "};",
        ],
        "isBinary": false,
        "path": "./test-app/tailwind.config.js",
      },
      "tsconfig.json": {
        "content": [
          "{",
          ""extends": "../tsconfig.base.json",",
          ""compilerOptions": {",
          ""jsx": "preserve",",
          ""allowJs": true,",
          ""esModuleInterop": true,",
          ""allowSyntheticDefaultImports": true,",
          ""strict": true,",
          ""forceConsistentCasingInFileNames": true,",
          ""noEmit": true,",
          ""resolveJsonModule": true,",
          ""isolatedModules": true,",
          ""incremental": true,",
          ""plugins": [{ "name": "next" }]",
          "},",
          ""include": [",
          ""**/*.ts",",
          ""**/*.tsx",",
          ""**/*.js",",
          ""**/*.jsx",",
          ""../test-app/.next/types/**/*.ts",",
          ""../dist/test-app/.next/types/**/*.ts",",
          ""next-env.d.ts"",
          "],",
          ""exclude": [",
          ""node_modules",",
          ""jest.config.ts",",
          ""src/**/*.spec.ts",",
          ""src/**/*.test.ts"",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/tsconfig.json",
      },
    },
    "path": "./test-app",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {",
      ""@proj/anchor": ["anchor/src/index.ts"]",
      "}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
}
`;
