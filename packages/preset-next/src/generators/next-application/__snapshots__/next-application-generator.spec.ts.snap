// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`application generator custom apps should generate app without anchor 1`] = `
{
  ".eslintignore": {
    "content": [
      "node_modules",
    ],
    "isBinary": false,
    "path": "./.eslintignore",
  },
  ".eslintrc.json": {
    "content": [
      "{",
      ""root": true,",
      ""ignorePatterns": ["**/*"],",
      ""plugins": ["@nx"],",
      ""overrides": [",
      "{",
      ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
      ""rules": {",
      ""@nx/enforce-module-boundaries": [",
      ""error",",
      "{",
      ""enforceBuildableLibDependency": true,",
      ""allow": [],",
      ""depConstraints": [",
      "{",
      ""sourceTag": "*",",
      ""onlyDependOnLibsWithTags": ["*"]",
      "}",
      "]",
      "}",
      "]",
      "}",
      "},",
      "{",
      ""files": ["*.ts", "*.tsx"],",
      ""extends": ["plugin:@nx/typescript"],",
      ""rules": {}",
      "},",
      "{",
      ""files": ["*.js", "*.jsx"],",
      ""extends": ["plugin:@nx/javascript"],",
      ""rules": {}",
      "}",
      "]",
      "}",
    ],
    "isBinary": false,
    "path": "./.eslintrc.json",
  },
  ".prettierignore": {
    "content": [
      "# Add files here to ignore them from prettier formatting",
      "/dist",
      "/coverage",
      "/.nx/cache",
    ],
    "isBinary": false,
    "path": "./.prettierignore",
  },
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "LICENSE": {
    "content": [
      "MIT License",
      "Copyright (c) 2024 test",
      "Permission is hereby granted, free of charge, to any person obtaining a copy",
      "of this software and associated documentation files (the "Software"), to deal",
      "in the Software without restriction, including without limitation the rights",
      "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
      "copies of the Software, and to permit persons to whom the Software is",
      "furnished to do so, subject to the following conditions:",
      "The above copyright notice and this permission notice shall be included in all",
      "copies or substantial portions of the Software.",
      "THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
      "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
      "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
      "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
      "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
      "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
      "SOFTWARE.",
    ],
    "isBinary": false,
    "path": "./LICENSE",
  },
  "README.md": {
    "content": [
      "# proj",
      "This project is generated with the [create-solana-dapp](https://github.com/solana-developers/create-solana-dapp) generator.",
      "## Getting Started",
      "### Prerequisites",
      "- Node v18.18.0 or higher",
      "### Installation",
      "#### Clone the repo",
      "\`\`\`shell",
      "git clone <repo-url>",
      "cd <repo-name>",
      "\`\`\`",
      "#### Install Dependencies",
      "\`\`\`shell",
      "yarn install",
      "\`\`\`",
      "#### Start the web app",
      "\`\`\`",
      "yarn dev",
      "\`\`\`",
      "## Apps",
      "### web",
      "This is a React app.",
      "#### Commands",
      "Start the web app",
      "\`\`\`shell",
      "yarn dev",
      "\`\`\`",
      "Build the web app",
      "\`\`\`shell",
      "yarn build",
      "\`\`\`",
    ],
    "isBinary": false,
    "path": "./README.md",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": {",
      ""defaultBase": "main"",
      "},",
      ""targetDefaults": {",
      ""build": {",
      ""cache": true",
      "},",
      ""lint": {",
      ""cache": true",
      "},",
      ""@nx/next:build": {",
      ""cache": true,",
      ""dependsOn": ["^build"],",
      ""inputs": ["default", "^default"]",
      "},",
      ""@nx/eslint:lint": {",
      ""cache": true,",
      ""inputs": [",
      ""default",",
      ""{workspaceRoot}/.eslintrc.json",",
      ""{workspaceRoot}/.eslintignore",",
      ""{workspaceRoot}/eslint.config.js"",
      "]",
      "}",
      "},",
      ""generators": {",
      ""@nx/next": {",
      ""application": {",
      ""style": "css",",
      ""linter": "eslint"",
      "}",
      "}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {",
      ""@solana/spl-token": "0.4.1",",
      ""@solana/wallet-adapter-base": "^0.9.23",",
      ""@solana/wallet-adapter-react": "^0.15.35",",
      ""@solana/wallet-adapter-react-ui": "^0.9.35",",
      ""@solana/web3.js": "1.90.0",",
      ""@tanstack/react-query-next-experimental": "5.24.1",",
      ""bs58": "5.0.0",",
      ""buffer": "6.0.3",",
      ""encoding": "0.1.13",",
      ""next": "14.0.4",",
      ""react": "18.2.0",",
      ""react-dom": "18.2.0",",
      ""tslib": "^2.3.0"",
      "},",
      ""devDependencies": {",
      ""@nx/eslint": "18.1.3",",
      ""@nx/eslint-plugin": "18.1.3",",
      ""@nx/js": "18.1.3",",
      ""@nx/next": "18.1.3",",
      ""@swc-node/register": "~1.8.0",",
      ""@swc/core": "~1.3.85",",
      ""@swc/helpers": "~0.5.2",",
      ""@types/react": "18.2.33",",
      ""@types/react-dom": "18.2.14",",
      ""@typescript-eslint/eslint-plugin": "^6.13.2",",
      ""@typescript-eslint/parser": "^6.13.2",",
      ""eslint": "~8.48.0",",
      ""eslint-config-next": "14.0.4",",
      ""eslint-config-prettier": "^9.0.0",",
      ""eslint-plugin-import": "2.27.5",",
      ""eslint-plugin-jsx-a11y": "6.7.1",",
      ""eslint-plugin-react": "7.32.2",",
      ""eslint-plugin-react-hooks": "4.6.0",",
      ""prettier": "^2.6.2",",
      ""typescript": "~5.3.2"",
      "},",
      ""scripts": {",
      ""build": "nx build test-app",",
      ""dev": "nx serve test-app"",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test-app": {
    "children": {
      ".eslintrc.json": {
        "content": [
          "{",
          ""extends": [",
          ""plugin:@nx/react-typescript",",
          ""next",",
          ""next/core-web-vitals",",
          ""../.eslintrc.json"",
          "],",
          ""ignorePatterns": ["!**/*", ".next/**/*"],",
          ""overrides": [",
          "{",
          ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
          ""rules": {",
          ""@next/next/no-html-link-for-pages": ["error", "test-app/pages"]",
          "}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.js", "*.jsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
          ""rules": {",
          ""@nx/enforce-module-boundaries": [",
          ""error",",
          "{",
          ""allow": ["@/"]",
          "}",
          "]",
          "}",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/.eslintrc.json",
      },
      "app": {
        "children": {
          "global.css": {
            "content": [
              "html,",
              "body,",
              "#root {",
              "height: 100%;",
              "padding: 0;",
              "margin: 0;",
              "}",
              ":root {",
              "color-scheme: light dark;",
              "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica,",
              "Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/global.css",
          },
          "layout.tsx": {
            "content": [
              "import './global.css';",
              "import { AppLayout } from '@/components/ui/app-layout';",
              "import { ClusterProvider } from '@/components/cluster/cluster-data-access';",
              "import { SolanaProvider } from '@/components/solana/solana-provider';",
              "export const metadata = {",
              "title: 'proj',",
              "description: 'Generated by create-solana-dapp',",
              "};",
              "export default function RootLayout({",
              "children,",
              "}: {",
              "children: React.ReactNode;",
              "}) {",
              "return (",
              "<html lang="en">",
              "<body>",
              "<ClusterProvider>",
              "<SolanaProvider>",
              "<AppLayout>{children}</AppLayout>",
              "</SolanaProvider>",
              "</ClusterProvider>",
              "</body>",
              "</html>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/layout.tsx",
          },
          "page.tsx": {
            "content": [
              "export default async function Index() {",
              "return (",
              "<div>",
              "<div>Index</div>",
              "</div>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/page.tsx",
          },
        },
        "path": "./test-app/app",
      },
      "components": {
        "children": {
          "app-layout.tsx": {
            "content": [
              "import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';",
              "import { ReactNode } from 'react';",
              "import Link from 'next/link';",
              "export function AppLayout({ children }: { children: ReactNode }) {",
              "return (",
              "<div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>",
              "<div",
              "style={{",
              "display: 'flex',",
              "alignItems: 'center',",
              "justifyContent: 'space-between',",
              "padding: '6px 12px',",
              "}}",
              ">",
              "<div>",
              "<Link href="/">",
              "<img src="/assets/solana-logo.png" height={24} alt="Solana Logo" />",
              "</Link>",
              "</div>",
              "<div>",
              "<WalletMultiButton />",
              "</div>",
              "</div>",
              "<div style={{ flexGrow: 1, padding: '6px' }}>{children}</div>",
              "<footer",
              "style={{",
              "display: 'flex',",
              "alignItems: 'center',",
              "justifyContent: 'center',",
              "padding: '6px 10px',",
              "}}",
              ">",
              "<aside>",
              "<p>",
              "Generated by{' '}",
              "<a",
              "href="https://github.com/solana-developers/create-solana-dapp"",
              "target="_blank"",
              "rel="noopener noreferrer"",
              ">",
              "create-solana-dapp",
              "</a>",
              "</p>",
              "</aside>",
              "</footer>",
              "</div>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/components/app-layout.tsx",
          },
          "cluster": {
            "children": {
              "cluster-data-access.tsx": {
                "content": [
                  "'use client';",
                  "import { clusterApiUrl } from '@solana/web3.js';",
                  "import { createContext, ReactNode, useContext } from 'react';",
                  "export interface Cluster {",
                  "endpoint: string;",
                  "network?: ClusterNetwork;",
                  "}",
                  "export enum ClusterNetwork {",
                  "Mainnet = 'mainnet-beta',",
                  "Testnet = 'testnet',",
                  "Devnet = 'devnet',",
                  "Custom = 'custom',",
                  "}",
                  "export interface ClusterProviderContext {",
                  "cluster: Cluster;",
                  "}",
                  "const Context = createContext<ClusterProviderContext>(",
                  "{} as ClusterProviderContext",
                  ");",
                  "export function ClusterProvider({ children }: { children: ReactNode }) {",
                  "const value: ClusterProviderContext = {",
                  "cluster: { endpoint: clusterApiUrl('devnet') },",
                  "};",
                  "return <Context.Provider value={value}>{children}</Context.Provider>;",
                  "}",
                  "export function useCluster() {",
                  "return useContext(Context);",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/cluster/cluster-data-access.tsx",
              },
            },
            "path": "./test-app/components/cluster",
          },
          "solana": {
            "children": {
              "solana-provider.tsx": {
                "content": [
                  "'use client';",
                  "import dynamic from 'next/dynamic';",
                  "import { WalletError } from '@solana/wallet-adapter-base';",
                  "import {",
                  "ConnectionProvider,",
                  "WalletProvider,",
                  "} from '@solana/wallet-adapter-react';",
                  "import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';",
                  "import { ReactNode, useCallback, useMemo } from 'react';",
                  "import { useCluster } from '../cluster/cluster-data-access';",
                  "require('@solana/wallet-adapter-react-ui/styles.css');",
                  "export const WalletButton = dynamic(",
                  "async () =>",
                  "(await import('@solana/wallet-adapter-react-ui')).WalletMultiButton,",
                  "{ ssr: false }",
                  ");",
                  "export function SolanaProvider({ children }: { children: ReactNode }) {",
                  "const { cluster } = useCluster();",
                  "const endpoint = useMemo(() => cluster.endpoint, [cluster]);",
                  "const onError = useCallback((error: WalletError) => {",
                  "console.error(error);",
                  "}, []);",
                  "return (",
                  "<ConnectionProvider endpoint={endpoint}>",
                  "<WalletProvider wallets={[]} onError={onError} autoConnect={true}>",
                  "<WalletModalProvider>{children}</WalletModalProvider>",
                  "</WalletProvider>",
                  "</ConnectionProvider>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/solana/solana-provider.tsx",
              },
            },
            "path": "./test-app/components/solana",
          },
          "ui": {
            "children": {
              "app-layout.tsx": {
                "content": [
                  "import { ReactNode } from 'react';",
                  "import Link from 'next/link';",
                  "import { WalletButton } from '../solana/solana-provider';",
                  "export function AppLayout({ children }: { children: ReactNode }) {",
                  "return (",
                  "<div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>",
                  "<div",
                  "style={{",
                  "display: 'flex',",
                  "alignItems: 'center',",
                  "justifyContent: 'space-between',",
                  "padding: '6px 12px',",
                  "}}",
                  ">",
                  "<div>",
                  "<Link href="/">",
                  "<img src="/solana-logo.png" height={24} alt="Solana Logo" />",
                  "</Link>",
                  "</div>",
                  "<div>",
                  "<WalletButton />",
                  "</div>",
                  "</div>",
                  "<div style={{ flexGrow: 1, padding: '6px' }}>{children}</div>",
                  "<footer",
                  "style={{",
                  "display: 'flex',",
                  "alignItems: 'center',",
                  "justifyContent: 'center',",
                  "padding: '6px 10px',",
                  "}}",
                  ">",
                  "<aside>",
                  "<p>",
                  "Generated by{' '}",
                  "<a",
                  "href="https://github.com/solana-developers/create-solana-dapp"",
                  "target="_blank"",
                  "rel="noopener noreferrer"",
                  ">",
                  "create-solana-dapp",
                  "</a>",
                  "</p>",
                  "</aside>",
                  "</footer>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/ui/app-layout.tsx",
              },
            },
            "path": "./test-app/components/ui",
          },
        },
        "path": "./test-app/components",
      },
      "index.d.ts": {
        "content": [
          "/* eslint-disable @typescript-eslint/no-explicit-any */",
          "declare module '*.svg' {",
          "const content: any;",
          "export const ReactComponent: any;",
          "export default content;",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/index.d.ts",
      },
      "next-env.d.ts": {
        "content": [
          "/// <reference types="next" />",
          "/// <reference types="next/image-types/global" />",
          "// NOTE: This file should not be edited",
          "// see https://nextjs.org/docs/basic-features/typescript for more information.",
        ],
        "isBinary": false,
        "path": "./test-app/next-env.d.ts",
      },
      "next.config.js": {
        "content": [
          "//@ts-check",
          "// eslint-disable-next-line @typescript-eslint/no-var-requires",
          "const { composePlugins, withNx } = require('@nx/next');",
          "/**",
          "* @type {import('@nx/next/plugins/with-nx').WithNxOptions}",
          "**/",
          "const nextConfig = {",
          "webpack: (config) => {",
          "config.externals = [",
          "...(config.externals || []),",
          "'bigint',",
          "'node-gyp-build',",
          "];",
          "return config;",
          "},",
          "nx: {",
          "// Set this to true if you would like to use SVGR",
          "// See: https://github.com/gregberge/svgr",
          "svgr: false,",
          "},",
          "};",
          "const plugins = [",
          "// Add more Next.js plugins to this list if needed.",
          "withNx,",
          "];",
          "module.exports = composePlugins(...plugins)(nextConfig);",
        ],
        "isBinary": false,
        "path": "./test-app/next.config.js",
      },
      "project.json": {
        "content": [
          "{",
          ""name": "test-app",",
          ""$schema": "../node_modules/nx/schemas/project-schema.json",",
          ""sourceRoot": "test-app",",
          ""projectType": "application",",
          ""targets": {",
          ""build": {",
          ""executor": "@nx/next:build",",
          ""outputs": ["{options.outputPath}"],",
          ""defaultConfiguration": "production",",
          ""options": {",
          ""outputPath": "dist/test-app"",
          "},",
          ""configurations": {",
          ""development": {",
          ""outputPath": "test-app"",
          "},",
          ""production": {}",
          "}",
          "},",
          ""serve": {",
          ""executor": "@nx/next:server",",
          ""defaultConfiguration": "development",",
          ""options": {",
          ""buildTarget": "test-app:build",",
          ""dev": true,",
          ""port": 3000",
          "},",
          ""configurations": {",
          ""development": {",
          ""buildTarget": "test-app:build:development",",
          ""dev": true",
          "},",
          ""production": {",
          ""buildTarget": "test-app:build:production",",
          ""dev": false",
          "}",
          "}",
          "},",
          ""export": {",
          ""executor": "@nx/next:export",",
          ""options": {",
          ""buildTarget": "test-app:build:production"",
          "}",
          "},",
          ""lint": {",
          ""executor": "@nx/eslint:lint"",
          "}",
          "},",
          ""tags": []",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/project.json",
      },
      "public": {
        "children": {
          ".gitkeep": {
            "content": [],
            "isBinary": false,
            "path": "./test-app/public/.gitkeep",
          },
          "favicon.ico": {
            "content": null,
            "isBinary": true,
            "path": "./test-app/public/favicon.ico",
          },
          "solana-logo.png": {
            "content": null,
            "isBinary": true,
            "path": "./test-app/public/solana-logo.png",
          },
        },
        "path": "./test-app/public",
      },
      "src": {
        "children": {
          "app": {
            "children": {
              "api": {
                "children": {
                  "hello": {
                    "children": {
                      "route.ts": {
                        "content": [
                          "export async function GET(request: Request) {",
                          "return new Response('Hello, from API!');",
                          "}",
                        ],
                        "isBinary": false,
                        "path": "./test-app/src/app/api/hello/route.ts",
                      },
                    },
                    "path": "./test-app/src/app/api/hello",
                  },
                },
                "path": "./test-app/src/app/api",
              },
              "global.css": {
                "content": [
                  "html {",
                  "-webkit-text-size-adjust: 100%;",
                  "font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont,",
                  "Segoe UI, Roboto, Helvetica Neue, Arial, Noto Sans, sans-serif,",
                  "Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji;",
                  "line-height: 1.5;",
                  "tab-size: 4;",
                  "scroll-behavior: smooth;",
                  "}",
                  "body {",
                  "font-family: inherit;",
                  "line-height: inherit;",
                  "margin: 0;",
                  "}",
                  "h1,",
                  "h2,",
                  "p,",
                  "pre {",
                  "margin: 0;",
                  "}",
                  "*,",
                  "::before,",
                  "::after {",
                  "box-sizing: border-box;",
                  "border-width: 0;",
                  "border-style: solid;",
                  "border-color: currentColor;",
                  "}",
                  "h1,",
                  "h2 {",
                  "font-size: inherit;",
                  "font-weight: inherit;",
                  "}",
                  "a {",
                  "color: inherit;",
                  "text-decoration: inherit;",
                  "}",
                  "pre {",
                  "font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,",
                  "Liberation Mono, Courier New, monospace;",
                  "}",
                  "svg {",
                  "display: block;",
                  "vertical-align: middle;",
                  "shape-rendering: auto;",
                  "text-rendering: optimizeLegibility;",
                  "}",
                  "pre {",
                  "background-color: rgba(55, 65, 81, 1);",
                  "border-radius: 0.25rem;",
                  "color: rgba(229, 231, 235, 1);",
                  "font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,",
                  "Liberation Mono, Courier New, monospace;",
                  "overflow: scroll;",
                  "padding: 0.5rem 0.75rem;",
                  "}",
                  ".shadow {",
                  "box-shadow: 0 0 #0000, 0 0 #0000, 0 10px 15px -3px rgba(0, 0, 0, 0.1),",
                  "0 4px 6px -2px rgba(0, 0, 0, 0.05);",
                  "}",
                  ".rounded {",
                  "border-radius: 1.5rem;",
                  "}",
                  ".wrapper {",
                  "width: 100%;",
                  "}",
                  ".container {",
                  "margin-left: auto;",
                  "margin-right: auto;",
                  "max-width: 768px;",
                  "padding-bottom: 3rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "color: rgba(55, 65, 81, 1);",
                  "width: 100%;",
                  "}",
                  "#welcome {",
                  "margin-top: 2.5rem;",
                  "}",
                  "#welcome h1 {",
                  "font-size: 3rem;",
                  "font-weight: 500;",
                  "letter-spacing: -0.025em;",
                  "line-height: 1;",
                  "}",
                  "#welcome span {",
                  "display: block;",
                  "font-size: 1.875rem;",
                  "font-weight: 300;",
                  "line-height: 2.25rem;",
                  "margin-bottom: 0.5rem;",
                  "}",
                  "#hero {",
                  "align-items: center;",
                  "background-color: hsla(214, 62%, 21%, 1);",
                  "border: none;",
                  "box-sizing: border-box;",
                  "color: rgba(55, 65, 81, 1);",
                  "display: grid;",
                  "grid-template-columns: 1fr;",
                  "margin-top: 3.5rem;",
                  "}",
                  "#hero .text-container {",
                  "color: rgba(255, 255, 255, 1);",
                  "padding: 3rem 2rem;",
                  "}",
                  "#hero .text-container h2 {",
                  "font-size: 1.5rem;",
                  "line-height: 2rem;",
                  "position: relative;",
                  "}",
                  "#hero .text-container h2 svg {",
                  "color: hsla(162, 47%, 50%, 1);",
                  "height: 2rem;",
                  "left: -0.25rem;",
                  "position: absolute;",
                  "top: 0;",
                  "width: 2rem;",
                  "}",
                  "#hero .text-container h2 span {",
                  "margin-left: 2.5rem;",
                  "}",
                  "#hero .text-container a {",
                  "background-color: rgba(255, 255, 255, 1);",
                  "border-radius: 0.75rem;",
                  "color: rgba(55, 65, 81, 1);",
                  "display: inline-block;",
                  "margin-top: 1.5rem;",
                  "padding: 1rem 2rem;",
                  "text-decoration: inherit;",
                  "}",
                  "#hero .logo-container {",
                  "display: none;",
                  "justify-content: center;",
                  "padding-left: 2rem;",
                  "padding-right: 2rem;",
                  "}",
                  "#hero .logo-container svg {",
                  "color: rgba(255, 255, 255, 1);",
                  "width: 66.666667%;",
                  "}",
                  "#middle-content {",
                  "align-items: flex-start;",
                  "display: grid;",
                  "gap: 4rem;",
                  "grid-template-columns: 1fr;",
                  "margin-top: 3.5rem;",
                  "}",
                  "#learning-materials {",
                  "padding: 2.5rem 2rem;",
                  "}",
                  "#learning-materials h2 {",
                  "font-weight: 500;",
                  "font-size: 1.25rem;",
                  "letter-spacing: -0.025em;",
                  "line-height: 1.75rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "}",
                  ".list-item-link {",
                  "align-items: center;",
                  "border-radius: 0.75rem;",
                  "display: flex;",
                  "margin-top: 1rem;",
                  "padding: 1rem;",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "width: 100%;",
                  "}",
                  ".list-item-link svg:first-child {",
                  "margin-right: 1rem;",
                  "height: 1.5rem;",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "width: 1.5rem;",
                  "}",
                  ".list-item-link > span {",
                  "flex-grow: 1;",
                  "font-weight: 400;",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "}",
                  ".list-item-link > span > span {",
                  "color: rgba(107, 114, 128, 1);",
                  "display: block;",
                  "flex-grow: 1;",
                  "font-size: 0.75rem;",
                  "font-weight: 300;",
                  "line-height: 1rem;",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "}",
                  ".list-item-link svg:last-child {",
                  "height: 1rem;",
                  "transition-property: all;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "width: 1rem;",
                  "}",
                  ".list-item-link:hover {",
                  "color: rgba(255, 255, 255, 1);",
                  "background-color: hsla(162, 47%, 50%, 1);",
                  "}",
                  ".list-item-link:hover > span {",
                  "}",
                  ".list-item-link:hover > span > span {",
                  "color: rgba(243, 244, 246, 1);",
                  "}",
                  ".list-item-link:hover svg:last-child {",
                  "transform: translateX(0.25rem);",
                  "}",
                  "#other-links {",
                  "}",
                  ".button-pill {",
                  "padding: 1.5rem 2rem;",
                  "transition-duration: 300ms;",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "align-items: center;",
                  "display: flex;",
                  "}",
                  ".button-pill svg {",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "flex-shrink: 0;",
                  "width: 3rem;",
                  "}",
                  ".button-pill > span {",
                  "letter-spacing: -0.025em;",
                  "font-weight: 400;",
                  "font-size: 1.125rem;",
                  "line-height: 1.75rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "}",
                  ".button-pill span span {",
                  "display: block;",
                  "font-size: 0.875rem;",
                  "font-weight: 300;",
                  "line-height: 1.25rem;",
                  "}",
                  ".button-pill:hover svg,",
                  ".button-pill:hover {",
                  "color: rgba(255, 255, 255, 1) !important;",
                  "}",
                  "#nx-console:hover {",
                  "background-color: rgba(0, 122, 204, 1);",
                  "}",
                  "#nx-console svg {",
                  "color: rgba(0, 122, 204, 1);",
                  "}",
                  "#nx-console-jetbrains {",
                  "margin-top: 2rem;",
                  "}",
                  "#nx-console-jetbrains:hover {",
                  "background-color: rgba(255, 49, 140, 1);",
                  "}",
                  "#nx-console-jetbrains svg {",
                  "color: rgba(255, 49, 140, 1);",
                  "}",
                  "#nx-repo:hover {",
                  "background-color: rgba(24, 23, 23, 1);",
                  "}",
                  "#nx-repo svg {",
                  "color: rgba(24, 23, 23, 1);",
                  "}",
                  "#nx-cloud {",
                  "margin-bottom: 2rem;",
                  "margin-top: 2rem;",
                  "padding: 2.5rem 2rem;",
                  "}",
                  "#nx-cloud > div {",
                  "align-items: center;",
                  "display: flex;",
                  "}",
                  "#nx-cloud > div svg {",
                  "border-radius: 0.375rem;",
                  "flex-shrink: 0;",
                  "width: 3rem;",
                  "}",
                  "#nx-cloud > div h2 {",
                  "font-size: 1.125rem;",
                  "font-weight: 400;",
                  "letter-spacing: -0.025em;",
                  "line-height: 1.75rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "}",
                  "#nx-cloud > div h2 span {",
                  "display: block;",
                  "font-size: 0.875rem;",
                  "font-weight: 300;",
                  "line-height: 1.25rem;",
                  "}",
                  "#nx-cloud p {",
                  "font-size: 1rem;",
                  "line-height: 1.5rem;",
                  "margin-top: 1rem;",
                  "}",
                  "#nx-cloud pre {",
                  "margin-top: 1rem;",
                  "}",
                  "#nx-cloud a {",
                  "color: rgba(107, 114, 128, 1);",
                  "display: block;",
                  "font-size: 0.875rem;",
                  "line-height: 1.25rem;",
                  "margin-top: 1.5rem;",
                  "text-align: right;",
                  "}",
                  "#nx-cloud a:hover {",
                  "text-decoration: underline;",
                  "}",
                  "#commands {",
                  "padding: 2.5rem 2rem;",
                  "margin-top: 3.5rem;",
                  "}",
                  "#commands h2 {",
                  "font-size: 1.25rem;",
                  "font-weight: 400;",
                  "letter-spacing: -0.025em;",
                  "line-height: 1.75rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "}",
                  "#commands p {",
                  "font-size: 1rem;",
                  "font-weight: 300;",
                  "line-height: 1.5rem;",
                  "margin-top: 1rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "}",
                  "details {",
                  "align-items: center;",
                  "display: flex;",
                  "margin-top: 1rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "width: 100%;",
                  "}",
                  "details pre > span {",
                  "color: rgba(181, 181, 181, 1);",
                  "display: block;",
                  "}",
                  "summary {",
                  "border-radius: 0.5rem;",
                  "display: flex;",
                  "font-weight: 400;",
                  "padding: 0.5rem;",
                  "cursor: pointer;",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "}",
                  "summary:hover {",
                  "background-color: rgba(243, 244, 246, 1);",
                  "}",
                  "summary svg {",
                  "height: 1.5rem;",
                  "margin-right: 1rem;",
                  "width: 1.5rem;",
                  "}",
                  "#love {",
                  "color: rgba(107, 114, 128, 1);",
                  "font-size: 0.875rem;",
                  "line-height: 1.25rem;",
                  "margin-top: 3.5rem;",
                  "opacity: 0.6;",
                  "text-align: center;",
                  "}",
                  "#love svg {",
                  "color: rgba(252, 165, 165, 1);",
                  "width: 1.25rem;",
                  "height: 1.25rem;",
                  "display: inline;",
                  "margin-top: -0.25rem;",
                  "}",
                  "@media screen and (min-width: 768px) {",
                  "#hero {",
                  "grid-template-columns: repeat(2, minmax(0, 1fr));",
                  "}",
                  "#hero .logo-container {",
                  "display: flex;",
                  "}",
                  "#middle-content {",
                  "grid-template-columns: repeat(2, minmax(0, 1fr));",
                  "}",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/global.css",
              },
              "layout.tsx": {
                "content": [
                  "import './global.css';",
                  "export const metadata = {",
                  "title: 'Welcome to test-app',",
                  "description: 'Generated by create-nx-workspace',",
                  "};",
                  "export default function RootLayout({",
                  "children,",
                  "}: {",
                  "children: React.ReactNode;",
                  "}) {",
                  "return (",
                  "<html lang="en">",
                  "<body>{children}</body>",
                  "</html>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/layout.tsx",
              },
              "page.module.css": {
                "content": [
                  ".page {",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/page.module.css",
              },
              "page.tsx": {
                "content": [
                  "import styles from './page.module.css';",
                  "export default function Index() {",
                  "/*",
                  "* Replace the elements below with your own.",
                  "*",
                  "* Note: The corresponding styles are in the ./index.css file.",
                  "*/",
                  "return (",
                  "<div className={styles.page}>",
                  "<div className="wrapper">",
                  "<div className="container">",
                  "<div id="welcome">",
                  "<h1>",
                  "<span> Hello there, </span>",
                  "Welcome test-app 👋",
                  "</h1>",
                  "</div>",
                  "<div id="hero" className="rounded">",
                  "<div className="text-container">",
                  "<h2>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"",
                  "/>",
                  "</svg>",
                  "<span>You&apos;re up and running</span>",
                  "</h2>",
                  "<a href="#commands"> What&apos;s next? </a>",
                  "</div>",
                  "<div className="logo-container">",
                  "<svg",
                  "fill="currentColor"",
                  "role="img"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path d="M11.987 14.138l-3.132 4.923-5.193-8.427-.012 8.822H0V4.544h3.691l5.247 8.833.005-3.998 3.044 4.759zm.601-5.761c.024-.048 0-3.784.008-3.833h-3.65c.002.059-.005 3.776-.003 3.833h3.645zm5.634 4.134a2.061 2.061 0 0 0-1.969 1.336 1.963 1.963 0 0 1 2.343-.739c.396.161.917.422 1.33.283a2.1 2.1 0 0 0-1.704-.88zm3.39 1.061c-.375-.13-.8-.277-1.109-.681-.06-.08-.116-.17-.176-.265a2.143 2.143 0 0 0-.533-.642c-.294-.216-.68-.322-1.18-.322a2.482 2.482 0 0 0-2.294 1.536 2.325 2.325 0 0 1 4.002.388.75.75 0 0 0 .836.334c.493-.105.46.36 1.203.518v-.133c-.003-.446-.246-.55-.75-.733zm2.024 1.266a.723.723 0 0 0 .347-.638c-.01-2.957-2.41-5.487-5.37-5.487a5.364 5.364 0 0 0-4.487 2.418c-.01-.026-1.522-2.39-1.538-2.418H8.943l3.463 5.423-3.379 5.32h3.54l1.54-2.366 1.568 2.366h3.541l-3.21-5.052a.7.7 0 0 1-.084-.32 2.69 2.69 0 0 1 2.69-2.691h.001c1.488 0 1.736.89 2.057 1.308.634.826 1.9.464 1.9 1.541a.707.707 0 0 0 1.066.596zm.35.133c-.173.372-.56.338-.755.639-.176.271.114.412.114.412s.337.156.538-.311c.104-.231.14-.488.103-.74z" />",
                  "</svg>",
                  "</div>",
                  "</div>",
                  "<div id="middle-content">",
                  "<div id="learning-materials" className="rounded shadow">",
                  "<h2>Learning materials</h2>",
                  "<a",
                  "href="https://nx.dev/getting-started/intro?utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  "className="list-item-link"",
                  ">",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"",
                  "/>",
                  "</svg>",
                  "<span>",
                  "Documentation",
                  "<span> Everything is in there </span>",
                  "</span>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M9 5l7 7-7 7"",
                  "/>",
                  "</svg>",
                  "</a>",
                  "<a",
                  "href="https://blog.nrwl.io/?utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  "className="list-item-link"",
                  ">",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"",
                  "/>",
                  "</svg>",
                  "<span>",
                  "Blog",
                  "<span> Changelog, features & events </span>",
                  "</span>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M9 5l7 7-7 7"",
                  "/>",
                  "</svg>",
                  "</a>",
                  "<a",
                  "href="https://www.youtube.com/@NxDevtools/videos?utm_source=nx-project&sub_confirmation=1"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  "className="list-item-link"",
                  ">",
                  "<svg",
                  "role="img"",
                  "viewBox="0 0 24 24"",
                  "fill="currentColor"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<title>YouTube</title>",
                  "<path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z" />",
                  "</svg>",
                  "<span>",
                  "YouTube channel",
                  "<span> Nx Show, talks & tutorials </span>",
                  "</span>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M9 5l7 7-7 7"",
                  "/>",
                  "</svg>",
                  "</a>",
                  "<a",
                  "href="https://nx.dev/react-tutorial/1-code-generation?utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  "className="list-item-link"",
                  ">",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M15 15l-2 5L9 9l11 4-5 2zm0 0l5 5M7.188 2.239l.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656l-2.12 2.122"",
                  "/>",
                  "</svg>",
                  "<span>",
                  "Interactive tutorials",
                  "<span> Create an app, step-by-step </span>",
                  "</span>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M9 5l7 7-7 7"",
                  "/>",
                  "</svg>",
                  "</a>",
                  "<a",
                  "href="https://nxplaybook.com/?utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  "className="list-item-link"",
                  ">",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path d="M12 14l9-5-9-5-9 5 9 5z" />",
                  "<path d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z" />",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222"",
                  "/>",
                  "</svg>",
                  "<span>",
                  "Video courses",
                  "<span> Nx custom courses </span>",
                  "</span>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M9 5l7 7-7 7"",
                  "/>",
                  "</svg>",
                  "</a>",
                  "</div>",
                  "<div id="other-links">",
                  "<a",
                  "id="nx-console"",
                  "className="button-pill rounded shadow"",
                  "href="https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console&utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  ">",
                  "<svg",
                  "fill="currentColor"",
                  "role="img"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<title>Visual Studio Code</title>",
                  "<path d="M23.15 2.587L18.21.21a1.494 1.494 0 0 0-1.705.29l-9.46 8.63-4.12-3.128a.999.999 0 0 0-1.276.057L.327 7.261A1 1 0 0 0 .326 8.74L3.899 12 .326 15.26a1 1 0 0 0 .001 1.479L1.65 17.94a.999.999 0 0 0 1.276.057l4.12-3.128 9.46 8.63a1.492 1.492 0 0 0 1.704.29l4.942-2.377A1.5 1.5 0 0 0 24 20.06V3.939a1.5 1.5 0 0 0-.85-1.352zm-5.146 14.861L10.826 12l7.178-5.448v10.896z" />",
                  "</svg>",
                  "<span>",
                  "Install Nx Console for VSCode",
                  "<span>The official VSCode extension for Nx.</span>",
                  "</span>",
                  "</a>",
                  "<a",
                  "id="nx-console-jetbrains"",
                  "className="button-pill rounded shadow"",
                  "href="https://plugins.jetbrains.com/plugin/21060-nx-console"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  ">",
                  "<svg",
                  "height="48"",
                  "width="48"",
                  "viewBox="20 20 60 60"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path d="m22.5 22.5h60v60h-60z" />",
                  "<g fill="#fff">",
                  "<path d="m29.03 71.25h22.5v3.75h-22.5z" />",
                  "<path d="m28.09 38 1.67-1.58a1.88 1.88 0 0 0 1.47.87c.64 0 1.06-.44 1.06-1.31v-5.98h2.58v6a3.48 3.48 0 0 1 -.87 2.6 3.56 3.56 0 0 1 -2.57.95 3.84 3.84 0 0 1 -3.34-1.55z" />",
                  "<path d="m36 30h7.53v2.19h-5v1.44h4.49v2h-4.42v1.49h5v2.21h-7.6z" />",
                  "<path d="m47.23 32.29h-2.8v-2.29h8.21v2.27h-2.81v7.1h-2.6z" />",
                  "<path d="m29.13 43.08h4.42a3.53 3.53 0 0 1 2.55.83 2.09 2.09 0 0 1 .6 1.53 2.16 2.16 0 0 1 -1.44 2.09 2.27 2.27 0 0 1 1.86 2.29c0 1.61-1.31 2.59-3.55 2.59h-4.44zm5 2.89c0-.52-.42-.8-1.18-.8h-1.29v1.64h1.24c.79 0 1.25-.26 1.25-.81zm-.9 2.66h-1.57v1.73h1.62c.8 0 1.24-.31 1.24-.86 0-.5-.4-.87-1.27-.87z" />",
                  "<path d="m38 43.08h4.1a4.19 4.19 0 0 1 3 1 2.93 2.93 0 0 1 .9 2.19 3 3 0 0 1 -1.93 2.89l2.24 3.27h-3l-1.88-2.84h-.87v2.84h-2.56zm4 4.5c.87 0 1.39-.43 1.39-1.11 0-.75-.54-1.12-1.4-1.12h-1.44v2.26z" />",
                  "<path d="m49.59 43h2.5l4 9.44h-2.79l-.67-1.69h-3.63l-.67 1.69h-2.71zm2.27 5.73-1-2.65-1.06 2.65z" />",
                  "<path d="m56.46 43.05h2.6v9.37h-2.6z" />",
                  "<path d="m60.06 43.05h2.42l3.37 5v-5h2.57v9.37h-2.26l-3.53-5.14v5.14h-2.57z" />",
                  "<path d="m68.86 51 1.45-1.73a4.84 4.84 0 0 0 3 1.13c.71 0 1.08-.24 1.08-.65 0-.4-.31-.6-1.59-.91-2-.46-3.53-1-3.53-2.93 0-1.74 1.37-3 3.62-3a5.89 5.89 0 0 1 3.86 1.25l-1.26 1.84a4.63 4.63 0 0 0 -2.62-.92c-.63 0-.94.25-.94.6 0 .42.32.61 1.63.91 2.14.46 3.44 1.16 3.44 2.91 0 1.91-1.51 3-3.79 3a6.58 6.58 0 0 1 -4.35-1.5z" />",
                  "</g>",
                  "</svg>",
                  "<span>",
                  "Install Nx Console for JetBrains",
                  "<span>",
                  "Available for WebStorm, Intellij IDEA Ultimate and more!",
                  "</span>",
                  "</span>",
                  "</a>",
                  "<div id="nx-cloud" className="rounded shadow">",
                  "<div>",
                  "<svg",
                  "id="nx-cloud-logo"",
                  "role="img"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  "stroke="currentColor"",
                  "fill="transparent"",
                  "viewBox="0 0 24 24"",
                  ">",
                  "<path",
                  "strokeWidth="2"",
                  "d="M23 3.75V6.5c-3.036 0-5.5 2.464-5.5 5.5s-2.464 5.5-5.5 5.5-5.5 2.464-5.5 5.5H3.75C2.232 23 1 21.768 1 20.25V3.75C1 2.232 2.232 1 3.75 1h16.5C21.768 1 23 2.232 23 3.75Z"",
                  "/>",
                  "<path",
                  "strokeWidth="2"",
                  "d="M23 6v14.1667C23 21.7307 21.7307 23 20.1667 23H6c0-3.128 2.53867-5.6667 5.6667-5.6667 3.128 0 5.6666-2.5386 5.6666-5.6666C17.3333 8.53867 19.872 6 23 6Z"",
                  "/>",
                  "</svg>",
                  "<h2>",
                  "Nx Cloud",
                  "<span>Enable faster CI & better DX</span>",
                  "</h2>",
                  "</div>",
                  "<p>",
                  "You can activate distributed tasks executions and caching by",
                  "running:",
                  "</p>",
                  "<pre>nx connect</pre>",
                  "<a",
                  "href="https://nx.app/?utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  ">",
                  "{' '}",
                  "What is Nx Cloud?{' '}",
                  "</a>",
                  "</div>",
                  "<a",
                  "id="nx-repo"",
                  "className="button-pill rounded shadow"",
                  "href="https://github.com/nrwl/nx?utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  ">",
                  "<svg",
                  "fill="currentColor"",
                  "role="img"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" />",
                  "</svg>",
                  "<span>",
                  "Nx is open source",
                  "<span> Love Nx? Give us a star! </span>",
                  "</span>",
                  "</a>",
                  "</div>",
                  "</div>",
                  "<div id="commands" className="rounded shadow">",
                  "<h2>Next steps</h2>",
                  "<p>Here are some things you can do with Nx:</p>",
                  "<details>",
                  "<summary>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"",
                  "/>",
                  "</svg>",
                  "Add UI library",
                  "</summary>",
                  "<pre>",
                  "<span># Generate UI lib</span>",
                  "nx g @nx/next:library ui",
                  "<span># Add a component</span>",
                  "nx g @nx/next:component ui/src/lib/button",
                  "</pre>",
                  "</details>",
                  "<details>",
                  "<summary>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"",
                  "/>",
                  "</svg>",
                  "View project details",
                  "</summary>",
                  "<pre>nx show project test-app --web</pre>",
                  "</details>",
                  "<details>",
                  "<summary>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"",
                  "/>",
                  "</svg>",
                  "View interactive project graph",
                  "</summary>",
                  "<pre>nx graph</pre>",
                  "</details>",
                  "<details>",
                  "<summary>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"",
                  "/>",
                  "</svg>",
                  "Run affected commands",
                  "</summary>",
                  "<pre>",
                  "<span># see what&apos;s been affected by changes</span>",
                  "nx affected:graph",
                  "<span># run tests for current changes</span>",
                  "nx affected:test",
                  "<span># run e2e tests for current changes</span>",
                  "nx affected:e2e",
                  "</pre>",
                  "</details>",
                  "</div>",
                  "<p id="love">",
                  "Carefully crafted with",
                  "<svg",
                  "fill="currentColor"",
                  "stroke="none"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"",
                  "/>",
                  "</svg>",
                  "</p>",
                  "</div>",
                  "</div>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/page.tsx",
              },
            },
            "path": "./test-app/src/app",
          },
        },
        "path": "./test-app/src",
      },
      "tsconfig.json": {
        "content": [
          "{",
          ""extends": "../tsconfig.base.json",",
          ""compilerOptions": {",
          ""jsx": "preserve",",
          ""allowJs": true,",
          ""esModuleInterop": true,",
          ""allowSyntheticDefaultImports": true,",
          ""strict": true,",
          ""forceConsistentCasingInFileNames": true,",
          ""noEmit": true,",
          ""resolveJsonModule": true,",
          ""isolatedModules": true,",
          ""incremental": true,",
          ""plugins": [",
          "{",
          ""name": "next"",
          "}",
          "]",
          "},",
          ""include": [",
          ""**/*.ts",",
          ""**/*.tsx",",
          ""**/*.js",",
          ""**/*.jsx",",
          ""../test-app/.next/types/**/*.ts",",
          ""../dist/test-app/.next/types/**/*.ts",",
          ""next-env.d.ts",",
          "".next/types/**/*.ts"",
          "],",
          ""exclude": ["node_modules", "jest.config.ts", "**/*.spec.ts", "**/*.test.ts"]",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/tsconfig.json",
      },
    },
    "path": "./test-app",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {",
      ""@/*": ["./test-app/*"]",
      "}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
  "vercel.json": {
    "content": [
      "{",
      ""buildCommand": "npm run build",",
      ""outputDirectory": "dist/web/.next"",
      "}",
    ],
    "isBinary": false,
    "path": "./vercel.json",
  },
}
`;

exports[`application generator default apps should generate default app with "none" ui 1`] = `
{
  ".eslintignore": {
    "content": [
      "node_modules",
    ],
    "isBinary": false,
    "path": "./.eslintignore",
  },
  ".eslintrc.json": {
    "content": [
      "{",
      ""root": true,",
      ""ignorePatterns": ["**/*"],",
      ""plugins": ["@nx"],",
      ""overrides": [",
      "{",
      ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
      ""rules": {",
      ""@nx/enforce-module-boundaries": [",
      ""error",",
      "{",
      ""enforceBuildableLibDependency": true,",
      ""allow": [],",
      ""depConstraints": [",
      "{",
      ""sourceTag": "*",",
      ""onlyDependOnLibsWithTags": ["*"]",
      "}",
      "]",
      "}",
      "]",
      "}",
      "},",
      "{",
      ""files": ["*.ts", "*.tsx"],",
      ""extends": ["plugin:@nx/typescript"],",
      ""rules": {}",
      "},",
      "{",
      ""files": ["*.js", "*.jsx"],",
      ""extends": ["plugin:@nx/javascript"],",
      ""rules": {}",
      "}",
      "]",
      "}",
    ],
    "isBinary": false,
    "path": "./.eslintrc.json",
  },
  ".prettierignore": {
    "content": [
      "# Add files here to ignore them from prettier formatting",
      "/dist",
      "/coverage",
      "/.nx/cache",
      ".anchor",
      "anchor/target/deploy",
      "anchor/target/debug",
      "anchor/target/release",
      "anchor/target/sbf-solana-solana",
      "anchor/target/.rustc_info.json",
      "!anchor/target/idl/*.json",
      "!anchor/target/types/*.ts",
      "node_modules",
      "dist",
      "tmp",
      "build",
      "test-ledger",
    ],
    "isBinary": false,
    "path": "./.prettierignore",
  },
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "LICENSE": {
    "content": [
      "MIT License",
      "Copyright (c) 2024 test",
      "Permission is hereby granted, free of charge, to any person obtaining a copy",
      "of this software and associated documentation files (the "Software"), to deal",
      "in the Software without restriction, including without limitation the rights",
      "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
      "copies of the Software, and to permit persons to whom the Software is",
      "furnished to do so, subject to the following conditions:",
      "The above copyright notice and this permission notice shall be included in all",
      "copies or substantial portions of the Software.",
      "THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
      "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
      "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
      "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
      "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
      "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
      "SOFTWARE.",
    ],
    "isBinary": false,
    "path": "./LICENSE",
  },
  "README.md": {
    "content": [
      "# proj",
      "This project is generated with the [create-solana-dapp](https://github.com/solana-developers/create-solana-dapp) generator.",
      "## Getting Started",
      "### Prerequisites",
      "- Node v18.18.0 or higher",
      "- Rust v1.70.0 or higher",
      "- Anchor CLI 0.29.0 or higher",
      "- Solana CLI 1.17.0 or higher",
      "### Installation",
      "#### Clone the repo",
      "\`\`\`shell",
      "git clone <repo-url>",
      "cd <repo-name>",
      "\`\`\`",
      "#### Install Dependencies",
      "\`\`\`shell",
      "yarn install",
      "\`\`\`",
      "#### Start the web app",
      "\`\`\`",
      "yarn dev",
      "\`\`\`",
      "## Apps",
      "### anchor",
      "This is a Solana program written in Rust using the Anchor framework.",
      "#### Commands",
      "You can use any normal anchor commands. Either move to the \`anchor\` directory and run the \`anchor\` command or prefix the command with \`yarn\`, eg: \`yarn anchor\`.",
      "#### Sync the program id:",
      "Running this command will create a new keypair in the \`anchor/target/deploy\` directory and save the address to the Anchor config file and update the \`declare_id!\` macro in the \`./src/lib.rs\` file of the program.",
      "You will manually need to update the constant in \`anchor/lib/counter-exports.ts\` to match the new program id.",
      "\`\`\`shell",
      "yarn anchor keys sync",
      "\`\`\`",
      "#### Build the program:",
      "\`\`\`shell",
      "yarn anchor-build",
      "\`\`\`",
      "#### Start the test validator with the program deployed:",
      "\`\`\`shell",
      "yarn anchor-localnet",
      "\`\`\`",
      "#### Run the tests",
      "\`\`\`shell",
      "yarn anchor-test",
      "\`\`\`",
      "#### Deploy to Devnet",
      "\`\`\`shell",
      "yarn anchor deploy --provider.cluster devnet",
      "\`\`\`",
      "### web",
      "This is a React app that uses the Anchor generated client to interact with the Solana program.",
      "#### Commands",
      "Start the web app",
      "\`\`\`shell",
      "yarn dev",
      "\`\`\`",
      "Build the web app",
      "\`\`\`shell",
      "yarn build",
      "\`\`\`",
    ],
    "isBinary": false,
    "path": "./README.md",
  },
  "anchor": {
    "children": {
      ".eslintrc.json": {
        "content": [
          "{",
          ""extends": ["../.eslintrc.json"],",
          ""ignorePatterns": ["!**/*"],",
          ""overrides": [",
          "{",
          ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.js", "*.jsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.json"],",
          ""parser": "jsonc-eslint-parser",",
          ""rules": {",
          ""@nx/dependency-checks": [",
          ""error",",
          "{",
          ""ignoredFiles": ["{projectRoot}/rollup.config.{js,ts,mjs,mts}"]",
          "}",
          "]",
          "}",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/.eslintrc.json",
      },
      ".swcrc": {
        "content": [
          "{",
          ""jsc": {",
          ""target": "es2017",",
          ""parser": {",
          ""syntax": "typescript",",
          ""decorators": true,",
          ""dynamicImport": true",
          "},",
          ""transform": {",
          ""decoratorMetadata": true,",
          ""legacyDecorator": true",
          "},",
          ""keepClassNames": true,",
          ""externalHelpers": true,",
          ""loose": true",
          "},",
          ""module": {",
          ""type": "es6"",
          "},",
          ""sourceMaps": true,",
          ""exclude": [",
          ""jest.config.ts",",
          "".*\\\\.spec.tsx?$",",
          "".*\\\\.test.tsx?$",",
          ""./src/jest-setup.ts$",",
          ""./**/jest-setup.ts$",",
          "".*.js$"",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/.swcrc",
      },
      "Anchor.toml": {
        "content": [
          "[toolchain]",
          "[features]",
          "seeds = false",
          "skip-lint = false",
          "[programs.localnet]",
          "my_program = "GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA"",
          "[registry]",
          "url = "https://api.apr.dev"",
          "[provider]",
          "cluster = "Localnet"",
          "wallet = "~/.config/solana/id.json"",
          "[scripts]",
          "test = "../node_modules/.bin/nx run anchor:jest"",
          "[test]",
          "startup_wait = 5000",
          "shutdown_wait = 2000",
          "upgradeable = false",
          "[test.validator]",
          "bind_address = "127.0.0.1"",
          "ledger = ".anchor/test-ledger"",
          "rpc_port = 8899",
        ],
        "isBinary": false,
        "path": "./anchor/Anchor.toml",
      },
      "Cargo.lock": {
        "content": null,
        "isBinary": true,
        "path": "./anchor/Cargo.lock",
      },
      "Cargo.toml": {
        "content": [
          "[workspace]",
          "members = [",
          ""programs/*"",
          "]",
          "resolver = "2"",
          "[profile.release]",
          "overflow-checks = true",
          "lto = "fat"",
          "codegen-units = 1",
          "[profile.release.build-override]",
          "opt-level = 3",
          "incremental = false",
          "codegen-units = 1",
        ],
        "isBinary": false,
        "path": "./anchor/Cargo.toml",
      },
      "README.md": {
        "content": [
          "# anchor",
          "This library was generated with [Nx](https://nx.dev).",
          "## Building",
          "Run \`nx build anchor\` to build the library.",
          "## Running unit tests",
          "Run \`nx test anchor\` to execute the unit tests via [Jest](https://jestjs.io).",
        ],
        "isBinary": false,
        "path": "./anchor/README.md",
      },
      "jest.config.ts": {
        "content": [
          "/* eslint-disable */",
          "import { readFileSync } from 'fs';",
          "// Reading the SWC compilation config and remove the "exclude"",
          "// for the test files to be compiled by SWC",
          "const { exclude: _, ...swcJestConfig } = JSON.parse(",
          "readFileSync(\`\${__dirname}/.swcrc\`, 'utf-8')",
          ");",
          "// disable .swcrc look-up by SWC core because we're passing in swcJestConfig ourselves.",
          "// If we do not disable this, SWC Core will read .swcrc and won't transform our test files due to "exclude"",
          "if (swcJestConfig.swcrc === undefined) {",
          "swcJestConfig.swcrc = false;",
          "}",
          "// Uncomment if using global setup/teardown files being transformed via swc",
          "// https://nx.dev/packages/jest/documents/overview#global-setup/teardown-with-nx-libraries",
          "// jest needs EsModule Interop to find the default exported setup/teardown functions",
          "// swcJestConfig.module.noInterop = false;",
          "export default {",
          "displayName: 'anchor',",
          "preset: '../jest.preset.js',",
          "transform: {",
          "'^.+\\\\.[tj]s$': ['@swc/jest', swcJestConfig],",
          "},",
          "moduleFileExtensions: ['ts', 'js', 'html'],",
          "testEnvironment: '',",
          "coverageDirectory: '../coverage/anchor',",
          "};",
        ],
        "isBinary": false,
        "path": "./anchor/jest.config.ts",
      },
      "migrations": {
        "children": {
          "deploy.ts": {
            "content": [
              "// Migrations are an early feature. Currently, they're nothing more than this",
              "// single deploy script that's invoked from the CLI, injecting a provider",
              "// configured from the workspace's Anchor.toml.",
              "import * as anchor from '@coral-xyz/anchor';",
              "module.exports = async function (provider) {",
              "// Configure client to use the provider.",
              "anchor.setProvider(provider);",
              "// Add your deploy script here.",
              "};",
            ],
            "isBinary": false,
            "path": "./anchor/migrations/deploy.ts",
          },
        },
        "path": "./anchor/migrations",
      },
      "package.json": {
        "content": [
          "{",
          ""name": "@proj/anchor",",
          ""version": "0.0.1",",
          ""dependencies": {",
          ""@coral-xyz/anchor": "^0.29.0",",
          ""@solana/web3.js": "1.90.0"",
          "},",
          ""type": "commonjs",",
          ""main": "./index.cjs",",
          ""module": "./index.js",",
          ""private": true",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/package.json",
      },
      "programs": {
        "children": {
          "my-program": {
            "children": {
              "Cargo.toml": {
                "content": [
                  "[package]",
                  "name = "my-program"",
                  "version = "0.1.0"",
                  "description = "Created with Anchor"",
                  "edition = "2021"",
                  "[lib]",
                  "crate-type = ["cdylib", "lib"]",
                  "name = "my_program"",
                  "[features]",
                  "no-entrypoint = []",
                  "no-idl = []",
                  "no-log-ix-name = []",
                  "cpi = ["no-entrypoint"]",
                  "default = []",
                  "[dependencies]",
                  "anchor-lang = "0.29.0"",
                ],
                "isBinary": false,
                "path": "./anchor/programs/my-program/Cargo.toml",
              },
              "Xargo.toml": {
                "content": [
                  "[target.bpfel-unknown-unknown.dependencies.std]",
                  "features = []",
                ],
                "isBinary": false,
                "path": "./anchor/programs/my-program/Xargo.toml",
              },
              "src": {
                "children": {
                  "lib.rs": {
                    "content": [
                      "#![allow(clippy::result_large_err)]",
                      "use anchor_lang::prelude::*;",
                      "declare_id!("GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA");",
                      "#[program]",
                      "pub mod my_program {",
                      "use super::*;",
                      "pub fn close(_ctx: Context<CloseMyProgram>) -> Result<()> {",
                      "Ok(())",
                      "}",
                      "pub fn decrement(ctx: Context<Update>) -> Result<()> {",
                      "ctx.accounts.my_program.count = ctx.accounts.my_program.count.checked_sub(1).unwrap();",
                      "Ok(())",
                      "}",
                      "pub fn increment(ctx: Context<Update>) -> Result<()> {",
                      "ctx.accounts.my_program.count = ctx.accounts.my_program.count.checked_add(1).unwrap();",
                      "Ok(())",
                      "}",
                      "pub fn initialize(_ctx: Context<InitializeMyProgram>) -> Result<()> {",
                      "Ok(())",
                      "}",
                      "pub fn set(ctx: Context<Update>, value: u8) -> Result<()> {",
                      "ctx.accounts.my_program.count = value.clone();",
                      "Ok(())",
                      "}",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct InitializeMyProgram<'info> {",
                      "#[account(mut)]",
                      "pub payer: Signer<'info>,",
                      "#[account(",
                      "init,",
                      "space = 8 + MyProgram::INIT_SPACE,",
                      "payer = payer",
                      ")]",
                      "pub my_program: Account<'info, MyProgram>,",
                      "pub system_program: Program<'info, System>,",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct CloseMyProgram<'info> {",
                      "#[account(mut)]",
                      "pub payer: Signer<'info>,",
                      "#[account(",
                      "mut,",
                      "close = payer, // close account and return lamports to payer",
                      ")]",
                      "pub my_program: Account<'info, MyProgram>,",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct Update<'info> {",
                      "#[account(mut)]",
                      "pub my_program: Account<'info, MyProgram>,",
                      "}",
                      "#[account]",
                      "#[derive(InitSpace)]",
                      "pub struct MyProgram {",
                      "count: u8,",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./anchor/programs/my-program/src/lib.rs",
                  },
                },
                "path": "./anchor/programs/my-program/src",
              },
            },
            "path": "./anchor/programs/my-program",
          },
        },
        "path": "./anchor/programs",
      },
      "project.json": {
        "content": [
          "{",
          ""name": "anchor",",
          ""$schema": "../node_modules/nx/schemas/project-schema.json",",
          ""sourceRoot": "anchor/src",",
          ""projectType": "library",",
          ""targets": {",
          ""build": {",
          ""executor": "@nx/rollup:rollup",",
          ""outputs": ["{options.outputPath}"],",
          ""options": {",
          ""outputPath": "dist/anchor",",
          ""main": "anchor/src/index.ts",",
          ""tsConfig": "anchor/tsconfig.lib.json",",
          ""assets": [],",
          ""project": "anchor/package.json",",
          ""compiler": "swc",",
          ""format": ["cjs", "esm"]",
          "}",
          "},",
          ""lint": {",
          ""executor": "@nx/eslint:lint"",
          "},",
          ""test": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor",",
          ""commands": ["anchor test"],",
          ""parallel": false",
          "}",
          "},",
          ""anchor": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor",",
          ""commands": ["anchor"],",
          ""parallel": false",
          "}",
          "},",
          ""localnet": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor",",
          ""commands": ["anchor localnet"],",
          ""parallel": false",
          "}",
          "},",
          ""jest": {",
          ""executor": "@nx/jest:jest",",
          ""outputs": ["{workspaceRoot}/coverage/{projectRoot}"],",
          ""options": {",
          ""jestConfig": "anchor/jest.config.ts"",
          "}",
          "}",
          "},",
          ""tags": []",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/project.json",
      },
      "src": {
        "children": {
          "index.ts": {
            "content": [
              "// This file was generated by preset-anchor. Programs are exported from this file.",
              "export * from './my-program-exports';",
            ],
            "isBinary": false,
            "path": "./anchor/src/index.ts",
          },
          "my-program-exports.ts": {
            "content": [
              "// Here we export some useful types and functions for interacting with the Anchor program.",
              "import { Cluster, PublicKey } from '@solana/web3.js';",
              "import type { MyProgram } from '../target/types/my_program';",
              "import { IDL as MyProgramIDL } from '../target/types/my_program';",
              "// Re-export the generated IDL and type",
              "export { MyProgram, MyProgramIDL };",
              "// After updating your program ID (e.g. after running \`anchor keys sync\`) update the value below.",
              "export const MY_PROGRAM_PROGRAM_ID = new PublicKey(",
              "'GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA'",
              ");",
              "// This is a helper function to get the program ID for the MyProgram program depending on the cluster.",
              "export function getMyProgramProgramId(cluster: Cluster) {",
              "switch (cluster) {",
              "case 'devnet':",
              "case 'testnet':",
              "case 'mainnet-beta':",
              "default:",
              "return MY_PROGRAM_PROGRAM_ID;",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "./anchor/src/my-program-exports.ts",
          },
        },
        "path": "./anchor/src",
      },
      "target": {
        "children": {
          "deploy": {
            "children": {
              "my_program-keypair.json": {
                "content": [
                  "[",
                  "102, 57, 177, 113, 190, 89, 227, 160, 193, 179, 207, 89, 103, 112, 83, 251,",
                  "142, 20, 242, 30, 81, 26, 82, 85, 207, 97, 28, 129, 190, 28, 128, 71, 228, 27,",
                  "114, 255, 63, 136, 164, 140, 185, 151, 50, 58, 148, 32, 197, 184, 85, 144, 79,",
                  "78, 24, 248, 25, 138, 254, 31, 96, 78, 56, 230, 148, 1",
                  "]",
                ],
                "isBinary": false,
                "path": "./anchor/target/deploy/my_program-keypair.json",
              },
            },
            "path": "./anchor/target/deploy",
          },
          "idl": {
            "children": {
              "my_program.json": {
                "content": [
                  "{",
                  ""version": "0.1.0",",
                  ""name": "my_program",",
                  ""instructions": [",
                  "{",
                  ""name": "close",",
                  ""accounts": [",
                  "{",
                  ""name": "payer",",
                  ""isMut": true,",
                  ""isSigner": true",
                  "},",
                  "{",
                  ""name": "myProgram",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "decrement",",
                  ""accounts": [",
                  "{",
                  ""name": "myProgram",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "increment",",
                  ""accounts": [",
                  "{",
                  ""name": "myProgram",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "initialize",",
                  ""accounts": [",
                  "{",
                  ""name": "payer",",
                  ""isMut": true,",
                  ""isSigner": true",
                  "},",
                  "{",
                  ""name": "myProgram",",
                  ""isMut": true,",
                  ""isSigner": true",
                  "},",
                  "{",
                  ""name": "systemProgram",",
                  ""isMut": false,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "set",",
                  ""accounts": [",
                  "{",
                  ""name": "myProgram",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": [",
                  "{",
                  ""name": "value",",
                  ""type": "u8"",
                  "}",
                  "]",
                  "}",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "MyProgram",",
                  ""type": {",
                  ""kind": "struct",",
                  ""fields": [",
                  "{",
                  ""name": "count",",
                  ""type": "u8"",
                  "}",
                  "]",
                  "}",
                  "}",
                  "],",
                  ""metadata": {",
                  ""address": "GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA"",
                  "}",
                  "}",
                ],
                "isBinary": false,
                "path": "./anchor/target/idl/my_program.json",
              },
            },
            "path": "./anchor/target/idl",
          },
          "types": {
            "children": {
              "my_program.ts": {
                "content": [
                  "export type MyProgram = {",
                  "version: '0.1.0';",
                  "name: 'my_program';",
                  "instructions: [",
                  "{",
                  "name: 'close';",
                  "accounts: [",
                  "{",
                  "name: 'payer';",
                  "isMut: true;",
                  "isSigner: true;",
                  "},",
                  "{",
                  "name: 'myProgram';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'decrement';",
                  "accounts: [",
                  "{",
                  "name: 'myProgram';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'increment';",
                  "accounts: [",
                  "{",
                  "name: 'myProgram';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'initialize';",
                  "accounts: [",
                  "{",
                  "name: 'payer';",
                  "isMut: true;",
                  "isSigner: true;",
                  "},",
                  "{",
                  "name: 'myProgram';",
                  "isMut: true;",
                  "isSigner: true;",
                  "},",
                  "{",
                  "name: 'systemProgram';",
                  "isMut: false;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'set';",
                  "accounts: [",
                  "{",
                  "name: 'myProgram';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [",
                  "{",
                  "name: 'value';",
                  "type: 'u8';",
                  "}",
                  "];",
                  "}",
                  "];",
                  "accounts: [",
                  "{",
                  "name: 'myProgram';",
                  "type: {",
                  "kind: 'struct';",
                  "fields: [",
                  "{",
                  "name: 'count';",
                  "type: 'u8';",
                  "}",
                  "];",
                  "};",
                  "}",
                  "];",
                  "};",
                  "export const IDL: MyProgram = {",
                  "version: '0.1.0',",
                  "name: 'my_program',",
                  "instructions: [",
                  "{",
                  "name: 'close',",
                  "accounts: [",
                  "{",
                  "name: 'payer',",
                  "isMut: true,",
                  "isSigner: true,",
                  "},",
                  "{",
                  "name: 'myProgram',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'decrement',",
                  "accounts: [",
                  "{",
                  "name: 'myProgram',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'increment',",
                  "accounts: [",
                  "{",
                  "name: 'myProgram',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'initialize',",
                  "accounts: [",
                  "{",
                  "name: 'payer',",
                  "isMut: true,",
                  "isSigner: true,",
                  "},",
                  "{",
                  "name: 'myProgram',",
                  "isMut: true,",
                  "isSigner: true,",
                  "},",
                  "{",
                  "name: 'systemProgram',",
                  "isMut: false,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'set',",
                  "accounts: [",
                  "{",
                  "name: 'myProgram',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [",
                  "{",
                  "name: 'value',",
                  "type: 'u8',",
                  "},",
                  "],",
                  "},",
                  "],",
                  "accounts: [",
                  "{",
                  "name: 'myProgram',",
                  "type: {",
                  "kind: 'struct',",
                  "fields: [",
                  "{",
                  "name: 'count',",
                  "type: 'u8',",
                  "},",
                  "],",
                  "},",
                  "},",
                  "],",
                  "};",
                ],
                "isBinary": false,
                "path": "./anchor/target/types/my_program.ts",
              },
            },
            "path": "./anchor/target/types",
          },
        },
        "path": "./anchor/target",
      },
      "tests": {
        "children": {
          "my-program.spec.ts": {
            "content": [
              "import * as anchor from '@coral-xyz/anchor';",
              "import { Program } from '@coral-xyz/anchor';",
              "import { Keypair } from '@solana/web3.js';",
              "import { MyProgram } from '../target/types/my_program';",
              "describe('my-program', () => {",
              "// Configure the client to use the local cluster.",
              "const provider = anchor.AnchorProvider.env();",
              "anchor.setProvider(provider);",
              "const payer = provider.wallet as anchor.Wallet;",
              "const program = anchor.workspace.MyProgram as Program<MyProgram>;",
              "const myProgramKeypair = Keypair.generate();",
              "it('Initialize MyProgram', async () => {",
              "await program.methods",
              ".initialize()",
              ".accounts({",
              "myProgram: myProgramKeypair.publicKey,",
              "payer: payer.publicKey,",
              "})",
              ".signers([myProgramKeypair])",
              ".rpc();",
              "const currentCount = await program.account.myProgram.fetch(",
              "myProgramKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(0);",
              "});",
              "it('Increment MyProgram', async () => {",
              "await program.methods",
              ".increment()",
              ".accounts({ myProgram: myProgramKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.myProgram.fetch(",
              "myProgramKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(1);",
              "});",
              "it('Increment MyProgram Again', async () => {",
              "await program.methods",
              ".increment()",
              ".accounts({ myProgram: myProgramKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.myProgram.fetch(",
              "myProgramKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(2);",
              "});",
              "it('Decrement MyProgram', async () => {",
              "await program.methods",
              ".decrement()",
              ".accounts({ myProgram: myProgramKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.myProgram.fetch(",
              "myProgramKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(1);",
              "});",
              "it('Set myProgram value', async () => {",
              "await program.methods",
              ".set(42)",
              ".accounts({ myProgram: myProgramKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.myProgram.fetch(",
              "myProgramKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(42);",
              "});",
              "it('Set close the myProgram account', async () => {",
              "await program.methods",
              ".close()",
              ".accounts({",
              "payer: payer.publicKey,",
              "myProgram: myProgramKeypair.publicKey,",
              "})",
              ".rpc();",
              "// The account should no longer exist, returning null.",
              "const userAccount = await program.account.myProgram.fetchNullable(",
              "myProgramKeypair.publicKey",
              ");",
              "expect(userAccount).toBeNull();",
              "});",
              "});",
            ],
            "isBinary": false,
            "path": "./anchor/tests/my-program.spec.ts",
          },
        },
        "path": "./anchor/tests",
      },
      "tsconfig.json": {
        "content": [
          "{",
          ""extends": "../tsconfig.base.json",",
          ""compilerOptions": {",
          ""module": "commonjs"",
          "},",
          ""files": [],",
          ""include": [],",
          ""references": [",
          "{",
          ""path": "./tsconfig.lib.json"",
          "},",
          "{",
          ""path": "./tsconfig.spec.json"",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/tsconfig.json",
      },
      "tsconfig.lib.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""declaration": true,",
          ""types": ["node"]",
          "},",
          ""include": ["src/**/*.ts"],",
          ""exclude": ["jest.config.ts", "src/**/*.spec.ts", "src/**/*.test.ts"]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/tsconfig.lib.json",
      },
      "tsconfig.spec.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""module": "commonjs",",
          ""types": ["jest", "node"]",
          "},",
          ""include": [",
          ""jest.config.ts",",
          ""src/**/*.test.ts",",
          ""src/**/*.spec.ts",",
          ""src/**/*.d.ts"",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/tsconfig.spec.json",
      },
    },
    "path": "./anchor",
  },
  "jest.config.ts": {
    "content": [
      "import { getJestProjectsAsync } from '@nx/jest';",
      "export default async () => ({",
      "projects: await getJestProjectsAsync(),",
      "});",
    ],
    "isBinary": false,
    "path": "./jest.config.ts",
  },
  "jest.preset.js": {
    "content": [
      "const nxPreset = require('@nx/jest/preset').default;",
      "module.exports = { ...nxPreset };",
    ],
    "isBinary": false,
    "path": "./jest.preset.js",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": {",
      ""defaultBase": "main"",
      "},",
      ""targetDefaults": {",
      ""build": {",
      ""cache": true",
      "},",
      ""lint": {",
      ""cache": true",
      "},",
      ""@nx/next:build": {",
      ""cache": true,",
      ""dependsOn": ["^build"],",
      ""inputs": ["default", "^default"]",
      "},",
      ""@nx/eslint:lint": {",
      ""cache": true,",
      ""inputs": [",
      ""default",",
      ""{workspaceRoot}/.eslintrc.json",",
      ""{workspaceRoot}/.eslintignore",",
      ""{workspaceRoot}/eslint.config.js"",
      "]",
      "},",
      ""@nx/rollup:rollup": {",
      ""cache": true,",
      ""dependsOn": ["^build"],",
      ""inputs": ["default", "^default"]",
      "},",
      ""@nx/jest:jest": {",
      ""cache": true,",
      ""inputs": ["default", "^default", "{workspaceRoot}/jest.preset.js"],",
      ""options": {",
      ""passWithNoTests": true",
      "},",
      ""configurations": {",
      ""ci": {",
      ""ci": true,",
      ""codeCoverage": true",
      "}",
      "}",
      "}",
      "},",
      ""generators": {",
      ""@nx/next": {",
      ""application": {",
      ""style": "css",",
      ""linter": "eslint"",
      "}",
      "}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {",
      ""@coral-xyz/anchor": "^0.29.0",",
      ""@solana/spl-token": "0.4.1",",
      ""@solana/wallet-adapter-base": "^0.9.23",",
      ""@solana/wallet-adapter-react": "^0.15.35",",
      ""@solana/wallet-adapter-react-ui": "^0.9.35",",
      ""@solana/web3.js": "1.90.0",",
      ""@tanstack/react-query-next-experimental": "5.24.1",",
      ""bs58": "5.0.0",",
      ""buffer": "6.0.3",",
      ""encoding": "0.1.13",",
      ""next": "14.0.4",",
      ""react": "18.2.0",",
      ""react-dom": "18.2.0",",
      ""tslib": "^2.3.0"",
      "},",
      ""devDependencies": {",
      ""@nx/eslint": "18.1.3",",
      ""@nx/eslint-plugin": "18.1.3",",
      ""@nx/jest": "18.1.3",",
      ""@nx/js": "18.1.3",",
      ""@nx/next": "18.1.3",",
      ""@nx/rollup": "18.1.3",",
      ""@swc-node/register": "~1.8.0",",
      ""@swc/cli": "~0.1.62",",
      ""@swc/core": "~1.3.85",",
      ""@swc/helpers": "~0.5.2",",
      ""@swc/jest": "0.2.20",",
      ""@types/jest": "^29.4.0",",
      ""@types/node": "18.16.9",",
      ""@types/react": "18.2.33",",
      ""@types/react-dom": "18.2.14",",
      ""@typescript-eslint/eslint-plugin": "^6.13.2",",
      ""@typescript-eslint/parser": "^6.13.2",",
      ""eslint": "~8.48.0",",
      ""eslint-config-next": "14.0.4",",
      ""eslint-config-prettier": "^9.0.0",",
      ""eslint-plugin-import": "2.27.5",",
      ""eslint-plugin-jsx-a11y": "6.7.1",",
      ""eslint-plugin-react": "7.32.2",",
      ""eslint-plugin-react-hooks": "4.6.0",",
      ""jest": "^29.4.1",",
      ""jest-environment-jsdom": "^29.4.1",",
      ""prettier": "^2.6.2",",
      ""ts-jest": "^29.1.0",",
      ""ts-node": "10.9.1",",
      ""typescript": "~5.3.2"",
      "},",
      ""scripts": {",
      ""anchor": "nx run anchor:anchor",",
      ""anchor-build": "nx run anchor:anchor build",",
      ""anchor-localnet": "nx run anchor:anchor localnet",",
      ""anchor-test": "nx run anchor:anchor test",",
      ""feature": "nx generate @solana-developers/preset-react:feature",",
      ""build": "nx build test-app",",
      ""dev": "nx serve test-app"",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test-app": {
    "children": {
      ".eslintrc.json": {
        "content": [
          "{",
          ""extends": [",
          ""plugin:@nx/react-typescript",",
          ""next",",
          ""next/core-web-vitals",",
          ""../.eslintrc.json"",
          "],",
          ""ignorePatterns": ["!**/*", ".next/**/*"],",
          ""overrides": [",
          "{",
          ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
          ""rules": {",
          ""@next/next/no-html-link-for-pages": ["error", "test-app/pages"]",
          "}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.js", "*.jsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
          ""rules": {",
          ""@nx/enforce-module-boundaries": [",
          ""error",",
          "{",
          ""allow": ["@/"]",
          "}",
          "]",
          "}",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/.eslintrc.json",
      },
      "app": {
        "children": {
          "global.css": {
            "content": [
              "html,",
              "body,",
              "#root {",
              "height: 100%;",
              "padding: 0;",
              "margin: 0;",
              "}",
              ":root {",
              "color-scheme: light dark;",
              "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica,",
              "Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/global.css",
          },
          "layout.tsx": {
            "content": [
              "import './global.css';",
              "import { AppLayout } from '@/components/ui/app-layout';",
              "import { ClusterProvider } from '@/components/cluster/cluster-data-access';",
              "import { SolanaProvider } from '@/components/solana/solana-provider';",
              "export const metadata = {",
              "title: 'proj',",
              "description: 'Generated by create-solana-dapp',",
              "};",
              "export default function RootLayout({",
              "children,",
              "}: {",
              "children: React.ReactNode;",
              "}) {",
              "return (",
              "<html lang="en">",
              "<body>",
              "<ClusterProvider>",
              "<SolanaProvider>",
              "<AppLayout>{children}</AppLayout>",
              "</SolanaProvider>",
              "</ClusterProvider>",
              "</body>",
              "</html>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/layout.tsx",
          },
          "page.tsx": {
            "content": [
              "import { MyProgramIDL } from '@proj/anchor';",
              "export default async function Index() {",
              "return (",
              "<div>",
              "<pre>{JSON.stringify(MyProgramIDL, null, 2)}</pre>",
              "</div>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/page.tsx",
          },
        },
        "path": "./test-app/app",
      },
      "components": {
        "children": {
          "app-layout.tsx": {
            "content": [
              "import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';",
              "import { ReactNode } from 'react';",
              "import Link from 'next/link';",
              "export function AppLayout({ children }: { children: ReactNode }) {",
              "return (",
              "<div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>",
              "<div",
              "style={{",
              "display: 'flex',",
              "alignItems: 'center',",
              "justifyContent: 'space-between',",
              "padding: '6px 12px',",
              "}}",
              ">",
              "<div>",
              "<Link href="/">",
              "<img src="/assets/solana-logo.png" height={24} alt="Solana Logo" />",
              "</Link>",
              "</div>",
              "<div>",
              "<WalletMultiButton />",
              "</div>",
              "</div>",
              "<div style={{ flexGrow: 1, padding: '6px' }}>{children}</div>",
              "<footer",
              "style={{",
              "display: 'flex',",
              "alignItems: 'center',",
              "justifyContent: 'center',",
              "padding: '6px 10px',",
              "}}",
              ">",
              "<aside>",
              "<p>",
              "Generated by{' '}",
              "<a",
              "href="https://github.com/solana-developers/create-solana-dapp"",
              "target="_blank"",
              "rel="noopener noreferrer"",
              ">",
              "create-solana-dapp",
              "</a>",
              "</p>",
              "</aside>",
              "</footer>",
              "</div>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/components/app-layout.tsx",
          },
          "cluster": {
            "children": {
              "cluster-data-access.tsx": {
                "content": [
                  "'use client';",
                  "import { clusterApiUrl } from '@solana/web3.js';",
                  "import { createContext, ReactNode, useContext } from 'react';",
                  "export interface Cluster {",
                  "endpoint: string;",
                  "network?: ClusterNetwork;",
                  "}",
                  "export enum ClusterNetwork {",
                  "Mainnet = 'mainnet-beta',",
                  "Testnet = 'testnet',",
                  "Devnet = 'devnet',",
                  "Custom = 'custom',",
                  "}",
                  "export interface ClusterProviderContext {",
                  "cluster: Cluster;",
                  "}",
                  "const Context = createContext<ClusterProviderContext>(",
                  "{} as ClusterProviderContext",
                  ");",
                  "export function ClusterProvider({ children }: { children: ReactNode }) {",
                  "const value: ClusterProviderContext = {",
                  "cluster: { endpoint: clusterApiUrl('devnet') },",
                  "};",
                  "return <Context.Provider value={value}>{children}</Context.Provider>;",
                  "}",
                  "export function useCluster() {",
                  "return useContext(Context);",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/cluster/cluster-data-access.tsx",
              },
            },
            "path": "./test-app/components/cluster",
          },
          "solana": {
            "children": {
              "solana-provider.tsx": {
                "content": [
                  "'use client';",
                  "import dynamic from 'next/dynamic';",
                  "import { AnchorProvider } from '@coral-xyz/anchor';",
                  "import { WalletError } from '@solana/wallet-adapter-base';",
                  "import {",
                  "AnchorWallet,",
                  "useConnection,",
                  "useWallet,",
                  "ConnectionProvider,",
                  "WalletProvider,",
                  "} from '@solana/wallet-adapter-react';",
                  "import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';",
                  "import { ReactNode, useCallback, useMemo } from 'react';",
                  "import { useCluster } from '../cluster/cluster-data-access';",
                  "require('@solana/wallet-adapter-react-ui/styles.css');",
                  "export const WalletButton = dynamic(",
                  "async () =>",
                  "(await import('@solana/wallet-adapter-react-ui')).WalletMultiButton,",
                  "{ ssr: false }",
                  ");",
                  "export function SolanaProvider({ children }: { children: ReactNode }) {",
                  "const { cluster } = useCluster();",
                  "const endpoint = useMemo(() => cluster.endpoint, [cluster]);",
                  "const onError = useCallback((error: WalletError) => {",
                  "console.error(error);",
                  "}, []);",
                  "return (",
                  "<ConnectionProvider endpoint={endpoint}>",
                  "<WalletProvider wallets={[]} onError={onError} autoConnect={true}>",
                  "<WalletModalProvider>{children}</WalletModalProvider>",
                  "</WalletProvider>",
                  "</ConnectionProvider>",
                  ");",
                  "}",
                  "export function useAnchorProvider() {",
                  "const { connection } = useConnection();",
                  "const wallet = useWallet();",
                  "return new AnchorProvider(connection, wallet as AnchorWallet, {",
                  "commitment: 'confirmed',",
                  "});",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/solana/solana-provider.tsx",
              },
            },
            "path": "./test-app/components/solana",
          },
          "ui": {
            "children": {
              "app-layout.tsx": {
                "content": [
                  "import { ReactNode } from 'react';",
                  "import Link from 'next/link';",
                  "import { WalletButton } from '../solana/solana-provider';",
                  "export function AppLayout({ children }: { children: ReactNode }) {",
                  "return (",
                  "<div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>",
                  "<div",
                  "style={{",
                  "display: 'flex',",
                  "alignItems: 'center',",
                  "justifyContent: 'space-between',",
                  "padding: '6px 12px',",
                  "}}",
                  ">",
                  "<div>",
                  "<Link href="/">",
                  "<img src="/solana-logo.png" height={24} alt="Solana Logo" />",
                  "</Link>",
                  "</div>",
                  "<div>",
                  "<WalletButton />",
                  "</div>",
                  "</div>",
                  "<div style={{ flexGrow: 1, padding: '6px' }}>{children}</div>",
                  "<footer",
                  "style={{",
                  "display: 'flex',",
                  "alignItems: 'center',",
                  "justifyContent: 'center',",
                  "padding: '6px 10px',",
                  "}}",
                  ">",
                  "<aside>",
                  "<p>",
                  "Generated by{' '}",
                  "<a",
                  "href="https://github.com/solana-developers/create-solana-dapp"",
                  "target="_blank"",
                  "rel="noopener noreferrer"",
                  ">",
                  "create-solana-dapp",
                  "</a>",
                  "</p>",
                  "</aside>",
                  "</footer>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/ui/app-layout.tsx",
              },
            },
            "path": "./test-app/components/ui",
          },
        },
        "path": "./test-app/components",
      },
      "index.d.ts": {
        "content": [
          "/* eslint-disable @typescript-eslint/no-explicit-any */",
          "declare module '*.svg' {",
          "const content: any;",
          "export const ReactComponent: any;",
          "export default content;",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/index.d.ts",
      },
      "next-env.d.ts": {
        "content": [
          "/// <reference types="next" />",
          "/// <reference types="next/image-types/global" />",
          "// NOTE: This file should not be edited",
          "// see https://nextjs.org/docs/basic-features/typescript for more information.",
        ],
        "isBinary": false,
        "path": "./test-app/next-env.d.ts",
      },
      "next.config.js": {
        "content": [
          "//@ts-check",
          "// eslint-disable-next-line @typescript-eslint/no-var-requires",
          "const { composePlugins, withNx } = require('@nx/next');",
          "/**",
          "* @type {import('@nx/next/plugins/with-nx').WithNxOptions}",
          "**/",
          "const nextConfig = {",
          "webpack: (config) => {",
          "config.externals = [",
          "...(config.externals || []),",
          "'bigint',",
          "'node-gyp-build',",
          "];",
          "return config;",
          "},",
          "nx: {",
          "// Set this to true if you would like to use SVGR",
          "// See: https://github.com/gregberge/svgr",
          "svgr: false,",
          "},",
          "};",
          "const plugins = [",
          "// Add more Next.js plugins to this list if needed.",
          "withNx,",
          "];",
          "module.exports = composePlugins(...plugins)(nextConfig);",
        ],
        "isBinary": false,
        "path": "./test-app/next.config.js",
      },
      "project.json": {
        "content": [
          "{",
          ""name": "test-app",",
          ""$schema": "../node_modules/nx/schemas/project-schema.json",",
          ""sourceRoot": "test-app",",
          ""projectType": "application",",
          ""targets": {",
          ""build": {",
          ""executor": "@nx/next:build",",
          ""outputs": ["{options.outputPath}"],",
          ""defaultConfiguration": "production",",
          ""options": {",
          ""outputPath": "dist/test-app"",
          "},",
          ""configurations": {",
          ""development": {",
          ""outputPath": "test-app"",
          "},",
          ""production": {}",
          "}",
          "},",
          ""serve": {",
          ""executor": "@nx/next:server",",
          ""defaultConfiguration": "development",",
          ""options": {",
          ""buildTarget": "test-app:build",",
          ""dev": true,",
          ""port": 3000",
          "},",
          ""configurations": {",
          ""development": {",
          ""buildTarget": "test-app:build:development",",
          ""dev": true",
          "},",
          ""production": {",
          ""buildTarget": "test-app:build:production",",
          ""dev": false",
          "}",
          "}",
          "},",
          ""export": {",
          ""executor": "@nx/next:export",",
          ""options": {",
          ""buildTarget": "test-app:build:production"",
          "}",
          "},",
          ""lint": {",
          ""executor": "@nx/eslint:lint"",
          "}",
          "},",
          ""tags": []",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/project.json",
      },
      "public": {
        "children": {
          ".gitkeep": {
            "content": [],
            "isBinary": false,
            "path": "./test-app/public/.gitkeep",
          },
          "favicon.ico": {
            "content": null,
            "isBinary": true,
            "path": "./test-app/public/favicon.ico",
          },
          "solana-logo.png": {
            "content": null,
            "isBinary": true,
            "path": "./test-app/public/solana-logo.png",
          },
        },
        "path": "./test-app/public",
      },
      "src": {
        "children": {
          "app": {
            "children": {
              "api": {
                "children": {
                  "hello": {
                    "children": {
                      "route.ts": {
                        "content": [
                          "export async function GET(request: Request) {",
                          "return new Response('Hello, from API!');",
                          "}",
                        ],
                        "isBinary": false,
                        "path": "./test-app/src/app/api/hello/route.ts",
                      },
                    },
                    "path": "./test-app/src/app/api/hello",
                  },
                },
                "path": "./test-app/src/app/api",
              },
              "global.css": {
                "content": [
                  "html {",
                  "-webkit-text-size-adjust: 100%;",
                  "font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont,",
                  "Segoe UI, Roboto, Helvetica Neue, Arial, Noto Sans, sans-serif,",
                  "Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji;",
                  "line-height: 1.5;",
                  "tab-size: 4;",
                  "scroll-behavior: smooth;",
                  "}",
                  "body {",
                  "font-family: inherit;",
                  "line-height: inherit;",
                  "margin: 0;",
                  "}",
                  "h1,",
                  "h2,",
                  "p,",
                  "pre {",
                  "margin: 0;",
                  "}",
                  "*,",
                  "::before,",
                  "::after {",
                  "box-sizing: border-box;",
                  "border-width: 0;",
                  "border-style: solid;",
                  "border-color: currentColor;",
                  "}",
                  "h1,",
                  "h2 {",
                  "font-size: inherit;",
                  "font-weight: inherit;",
                  "}",
                  "a {",
                  "color: inherit;",
                  "text-decoration: inherit;",
                  "}",
                  "pre {",
                  "font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,",
                  "Liberation Mono, Courier New, monospace;",
                  "}",
                  "svg {",
                  "display: block;",
                  "vertical-align: middle;",
                  "shape-rendering: auto;",
                  "text-rendering: optimizeLegibility;",
                  "}",
                  "pre {",
                  "background-color: rgba(55, 65, 81, 1);",
                  "border-radius: 0.25rem;",
                  "color: rgba(229, 231, 235, 1);",
                  "font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,",
                  "Liberation Mono, Courier New, monospace;",
                  "overflow: scroll;",
                  "padding: 0.5rem 0.75rem;",
                  "}",
                  ".shadow {",
                  "box-shadow: 0 0 #0000, 0 0 #0000, 0 10px 15px -3px rgba(0, 0, 0, 0.1),",
                  "0 4px 6px -2px rgba(0, 0, 0, 0.05);",
                  "}",
                  ".rounded {",
                  "border-radius: 1.5rem;",
                  "}",
                  ".wrapper {",
                  "width: 100%;",
                  "}",
                  ".container {",
                  "margin-left: auto;",
                  "margin-right: auto;",
                  "max-width: 768px;",
                  "padding-bottom: 3rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "color: rgba(55, 65, 81, 1);",
                  "width: 100%;",
                  "}",
                  "#welcome {",
                  "margin-top: 2.5rem;",
                  "}",
                  "#welcome h1 {",
                  "font-size: 3rem;",
                  "font-weight: 500;",
                  "letter-spacing: -0.025em;",
                  "line-height: 1;",
                  "}",
                  "#welcome span {",
                  "display: block;",
                  "font-size: 1.875rem;",
                  "font-weight: 300;",
                  "line-height: 2.25rem;",
                  "margin-bottom: 0.5rem;",
                  "}",
                  "#hero {",
                  "align-items: center;",
                  "background-color: hsla(214, 62%, 21%, 1);",
                  "border: none;",
                  "box-sizing: border-box;",
                  "color: rgba(55, 65, 81, 1);",
                  "display: grid;",
                  "grid-template-columns: 1fr;",
                  "margin-top: 3.5rem;",
                  "}",
                  "#hero .text-container {",
                  "color: rgba(255, 255, 255, 1);",
                  "padding: 3rem 2rem;",
                  "}",
                  "#hero .text-container h2 {",
                  "font-size: 1.5rem;",
                  "line-height: 2rem;",
                  "position: relative;",
                  "}",
                  "#hero .text-container h2 svg {",
                  "color: hsla(162, 47%, 50%, 1);",
                  "height: 2rem;",
                  "left: -0.25rem;",
                  "position: absolute;",
                  "top: 0;",
                  "width: 2rem;",
                  "}",
                  "#hero .text-container h2 span {",
                  "margin-left: 2.5rem;",
                  "}",
                  "#hero .text-container a {",
                  "background-color: rgba(255, 255, 255, 1);",
                  "border-radius: 0.75rem;",
                  "color: rgba(55, 65, 81, 1);",
                  "display: inline-block;",
                  "margin-top: 1.5rem;",
                  "padding: 1rem 2rem;",
                  "text-decoration: inherit;",
                  "}",
                  "#hero .logo-container {",
                  "display: none;",
                  "justify-content: center;",
                  "padding-left: 2rem;",
                  "padding-right: 2rem;",
                  "}",
                  "#hero .logo-container svg {",
                  "color: rgba(255, 255, 255, 1);",
                  "width: 66.666667%;",
                  "}",
                  "#middle-content {",
                  "align-items: flex-start;",
                  "display: grid;",
                  "gap: 4rem;",
                  "grid-template-columns: 1fr;",
                  "margin-top: 3.5rem;",
                  "}",
                  "#learning-materials {",
                  "padding: 2.5rem 2rem;",
                  "}",
                  "#learning-materials h2 {",
                  "font-weight: 500;",
                  "font-size: 1.25rem;",
                  "letter-spacing: -0.025em;",
                  "line-height: 1.75rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "}",
                  ".list-item-link {",
                  "align-items: center;",
                  "border-radius: 0.75rem;",
                  "display: flex;",
                  "margin-top: 1rem;",
                  "padding: 1rem;",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "width: 100%;",
                  "}",
                  ".list-item-link svg:first-child {",
                  "margin-right: 1rem;",
                  "height: 1.5rem;",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "width: 1.5rem;",
                  "}",
                  ".list-item-link > span {",
                  "flex-grow: 1;",
                  "font-weight: 400;",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "}",
                  ".list-item-link > span > span {",
                  "color: rgba(107, 114, 128, 1);",
                  "display: block;",
                  "flex-grow: 1;",
                  "font-size: 0.75rem;",
                  "font-weight: 300;",
                  "line-height: 1rem;",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "}",
                  ".list-item-link svg:last-child {",
                  "height: 1rem;",
                  "transition-property: all;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "width: 1rem;",
                  "}",
                  ".list-item-link:hover {",
                  "color: rgba(255, 255, 255, 1);",
                  "background-color: hsla(162, 47%, 50%, 1);",
                  "}",
                  ".list-item-link:hover > span {",
                  "}",
                  ".list-item-link:hover > span > span {",
                  "color: rgba(243, 244, 246, 1);",
                  "}",
                  ".list-item-link:hover svg:last-child {",
                  "transform: translateX(0.25rem);",
                  "}",
                  "#other-links {",
                  "}",
                  ".button-pill {",
                  "padding: 1.5rem 2rem;",
                  "transition-duration: 300ms;",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "align-items: center;",
                  "display: flex;",
                  "}",
                  ".button-pill svg {",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "flex-shrink: 0;",
                  "width: 3rem;",
                  "}",
                  ".button-pill > span {",
                  "letter-spacing: -0.025em;",
                  "font-weight: 400;",
                  "font-size: 1.125rem;",
                  "line-height: 1.75rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "}",
                  ".button-pill span span {",
                  "display: block;",
                  "font-size: 0.875rem;",
                  "font-weight: 300;",
                  "line-height: 1.25rem;",
                  "}",
                  ".button-pill:hover svg,",
                  ".button-pill:hover {",
                  "color: rgba(255, 255, 255, 1) !important;",
                  "}",
                  "#nx-console:hover {",
                  "background-color: rgba(0, 122, 204, 1);",
                  "}",
                  "#nx-console svg {",
                  "color: rgba(0, 122, 204, 1);",
                  "}",
                  "#nx-console-jetbrains {",
                  "margin-top: 2rem;",
                  "}",
                  "#nx-console-jetbrains:hover {",
                  "background-color: rgba(255, 49, 140, 1);",
                  "}",
                  "#nx-console-jetbrains svg {",
                  "color: rgba(255, 49, 140, 1);",
                  "}",
                  "#nx-repo:hover {",
                  "background-color: rgba(24, 23, 23, 1);",
                  "}",
                  "#nx-repo svg {",
                  "color: rgba(24, 23, 23, 1);",
                  "}",
                  "#nx-cloud {",
                  "margin-bottom: 2rem;",
                  "margin-top: 2rem;",
                  "padding: 2.5rem 2rem;",
                  "}",
                  "#nx-cloud > div {",
                  "align-items: center;",
                  "display: flex;",
                  "}",
                  "#nx-cloud > div svg {",
                  "border-radius: 0.375rem;",
                  "flex-shrink: 0;",
                  "width: 3rem;",
                  "}",
                  "#nx-cloud > div h2 {",
                  "font-size: 1.125rem;",
                  "font-weight: 400;",
                  "letter-spacing: -0.025em;",
                  "line-height: 1.75rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "}",
                  "#nx-cloud > div h2 span {",
                  "display: block;",
                  "font-size: 0.875rem;",
                  "font-weight: 300;",
                  "line-height: 1.25rem;",
                  "}",
                  "#nx-cloud p {",
                  "font-size: 1rem;",
                  "line-height: 1.5rem;",
                  "margin-top: 1rem;",
                  "}",
                  "#nx-cloud pre {",
                  "margin-top: 1rem;",
                  "}",
                  "#nx-cloud a {",
                  "color: rgba(107, 114, 128, 1);",
                  "display: block;",
                  "font-size: 0.875rem;",
                  "line-height: 1.25rem;",
                  "margin-top: 1.5rem;",
                  "text-align: right;",
                  "}",
                  "#nx-cloud a:hover {",
                  "text-decoration: underline;",
                  "}",
                  "#commands {",
                  "padding: 2.5rem 2rem;",
                  "margin-top: 3.5rem;",
                  "}",
                  "#commands h2 {",
                  "font-size: 1.25rem;",
                  "font-weight: 400;",
                  "letter-spacing: -0.025em;",
                  "line-height: 1.75rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "}",
                  "#commands p {",
                  "font-size: 1rem;",
                  "font-weight: 300;",
                  "line-height: 1.5rem;",
                  "margin-top: 1rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "}",
                  "details {",
                  "align-items: center;",
                  "display: flex;",
                  "margin-top: 1rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "width: 100%;",
                  "}",
                  "details pre > span {",
                  "color: rgba(181, 181, 181, 1);",
                  "display: block;",
                  "}",
                  "summary {",
                  "border-radius: 0.5rem;",
                  "display: flex;",
                  "font-weight: 400;",
                  "padding: 0.5rem;",
                  "cursor: pointer;",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "}",
                  "summary:hover {",
                  "background-color: rgba(243, 244, 246, 1);",
                  "}",
                  "summary svg {",
                  "height: 1.5rem;",
                  "margin-right: 1rem;",
                  "width: 1.5rem;",
                  "}",
                  "#love {",
                  "color: rgba(107, 114, 128, 1);",
                  "font-size: 0.875rem;",
                  "line-height: 1.25rem;",
                  "margin-top: 3.5rem;",
                  "opacity: 0.6;",
                  "text-align: center;",
                  "}",
                  "#love svg {",
                  "color: rgba(252, 165, 165, 1);",
                  "width: 1.25rem;",
                  "height: 1.25rem;",
                  "display: inline;",
                  "margin-top: -0.25rem;",
                  "}",
                  "@media screen and (min-width: 768px) {",
                  "#hero {",
                  "grid-template-columns: repeat(2, minmax(0, 1fr));",
                  "}",
                  "#hero .logo-container {",
                  "display: flex;",
                  "}",
                  "#middle-content {",
                  "grid-template-columns: repeat(2, minmax(0, 1fr));",
                  "}",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/global.css",
              },
              "layout.tsx": {
                "content": [
                  "import './global.css';",
                  "export const metadata = {",
                  "title: 'Welcome to test-app',",
                  "description: 'Generated by create-nx-workspace',",
                  "};",
                  "export default function RootLayout({",
                  "children,",
                  "}: {",
                  "children: React.ReactNode;",
                  "}) {",
                  "return (",
                  "<html lang="en">",
                  "<body>{children}</body>",
                  "</html>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/layout.tsx",
              },
              "page.module.css": {
                "content": [
                  ".page {",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/page.module.css",
              },
              "page.tsx": {
                "content": [
                  "import styles from './page.module.css';",
                  "export default function Index() {",
                  "/*",
                  "* Replace the elements below with your own.",
                  "*",
                  "* Note: The corresponding styles are in the ./index.css file.",
                  "*/",
                  "return (",
                  "<div className={styles.page}>",
                  "<div className="wrapper">",
                  "<div className="container">",
                  "<div id="welcome">",
                  "<h1>",
                  "<span> Hello there, </span>",
                  "Welcome test-app 👋",
                  "</h1>",
                  "</div>",
                  "<div id="hero" className="rounded">",
                  "<div className="text-container">",
                  "<h2>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"",
                  "/>",
                  "</svg>",
                  "<span>You&apos;re up and running</span>",
                  "</h2>",
                  "<a href="#commands"> What&apos;s next? </a>",
                  "</div>",
                  "<div className="logo-container">",
                  "<svg",
                  "fill="currentColor"",
                  "role="img"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path d="M11.987 14.138l-3.132 4.923-5.193-8.427-.012 8.822H0V4.544h3.691l5.247 8.833.005-3.998 3.044 4.759zm.601-5.761c.024-.048 0-3.784.008-3.833h-3.65c.002.059-.005 3.776-.003 3.833h3.645zm5.634 4.134a2.061 2.061 0 0 0-1.969 1.336 1.963 1.963 0 0 1 2.343-.739c.396.161.917.422 1.33.283a2.1 2.1 0 0 0-1.704-.88zm3.39 1.061c-.375-.13-.8-.277-1.109-.681-.06-.08-.116-.17-.176-.265a2.143 2.143 0 0 0-.533-.642c-.294-.216-.68-.322-1.18-.322a2.482 2.482 0 0 0-2.294 1.536 2.325 2.325 0 0 1 4.002.388.75.75 0 0 0 .836.334c.493-.105.46.36 1.203.518v-.133c-.003-.446-.246-.55-.75-.733zm2.024 1.266a.723.723 0 0 0 .347-.638c-.01-2.957-2.41-5.487-5.37-5.487a5.364 5.364 0 0 0-4.487 2.418c-.01-.026-1.522-2.39-1.538-2.418H8.943l3.463 5.423-3.379 5.32h3.54l1.54-2.366 1.568 2.366h3.541l-3.21-5.052a.7.7 0 0 1-.084-.32 2.69 2.69 0 0 1 2.69-2.691h.001c1.488 0 1.736.89 2.057 1.308.634.826 1.9.464 1.9 1.541a.707.707 0 0 0 1.066.596zm.35.133c-.173.372-.56.338-.755.639-.176.271.114.412.114.412s.337.156.538-.311c.104-.231.14-.488.103-.74z" />",
                  "</svg>",
                  "</div>",
                  "</div>",
                  "<div id="middle-content">",
                  "<div id="learning-materials" className="rounded shadow">",
                  "<h2>Learning materials</h2>",
                  "<a",
                  "href="https://nx.dev/getting-started/intro?utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  "className="list-item-link"",
                  ">",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"",
                  "/>",
                  "</svg>",
                  "<span>",
                  "Documentation",
                  "<span> Everything is in there </span>",
                  "</span>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M9 5l7 7-7 7"",
                  "/>",
                  "</svg>",
                  "</a>",
                  "<a",
                  "href="https://blog.nrwl.io/?utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  "className="list-item-link"",
                  ">",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"",
                  "/>",
                  "</svg>",
                  "<span>",
                  "Blog",
                  "<span> Changelog, features & events </span>",
                  "</span>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M9 5l7 7-7 7"",
                  "/>",
                  "</svg>",
                  "</a>",
                  "<a",
                  "href="https://www.youtube.com/@NxDevtools/videos?utm_source=nx-project&sub_confirmation=1"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  "className="list-item-link"",
                  ">",
                  "<svg",
                  "role="img"",
                  "viewBox="0 0 24 24"",
                  "fill="currentColor"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<title>YouTube</title>",
                  "<path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z" />",
                  "</svg>",
                  "<span>",
                  "YouTube channel",
                  "<span> Nx Show, talks & tutorials </span>",
                  "</span>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M9 5l7 7-7 7"",
                  "/>",
                  "</svg>",
                  "</a>",
                  "<a",
                  "href="https://nx.dev/react-tutorial/1-code-generation?utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  "className="list-item-link"",
                  ">",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M15 15l-2 5L9 9l11 4-5 2zm0 0l5 5M7.188 2.239l.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656l-2.12 2.122"",
                  "/>",
                  "</svg>",
                  "<span>",
                  "Interactive tutorials",
                  "<span> Create an app, step-by-step </span>",
                  "</span>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M9 5l7 7-7 7"",
                  "/>",
                  "</svg>",
                  "</a>",
                  "<a",
                  "href="https://nxplaybook.com/?utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  "className="list-item-link"",
                  ">",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path d="M12 14l9-5-9-5-9 5 9 5z" />",
                  "<path d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z" />",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222"",
                  "/>",
                  "</svg>",
                  "<span>",
                  "Video courses",
                  "<span> Nx custom courses </span>",
                  "</span>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M9 5l7 7-7 7"",
                  "/>",
                  "</svg>",
                  "</a>",
                  "</div>",
                  "<div id="other-links">",
                  "<a",
                  "id="nx-console"",
                  "className="button-pill rounded shadow"",
                  "href="https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console&utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  ">",
                  "<svg",
                  "fill="currentColor"",
                  "role="img"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<title>Visual Studio Code</title>",
                  "<path d="M23.15 2.587L18.21.21a1.494 1.494 0 0 0-1.705.29l-9.46 8.63-4.12-3.128a.999.999 0 0 0-1.276.057L.327 7.261A1 1 0 0 0 .326 8.74L3.899 12 .326 15.26a1 1 0 0 0 .001 1.479L1.65 17.94a.999.999 0 0 0 1.276.057l4.12-3.128 9.46 8.63a1.492 1.492 0 0 0 1.704.29l4.942-2.377A1.5 1.5 0 0 0 24 20.06V3.939a1.5 1.5 0 0 0-.85-1.352zm-5.146 14.861L10.826 12l7.178-5.448v10.896z" />",
                  "</svg>",
                  "<span>",
                  "Install Nx Console for VSCode",
                  "<span>The official VSCode extension for Nx.</span>",
                  "</span>",
                  "</a>",
                  "<a",
                  "id="nx-console-jetbrains"",
                  "className="button-pill rounded shadow"",
                  "href="https://plugins.jetbrains.com/plugin/21060-nx-console"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  ">",
                  "<svg",
                  "height="48"",
                  "width="48"",
                  "viewBox="20 20 60 60"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path d="m22.5 22.5h60v60h-60z" />",
                  "<g fill="#fff">",
                  "<path d="m29.03 71.25h22.5v3.75h-22.5z" />",
                  "<path d="m28.09 38 1.67-1.58a1.88 1.88 0 0 0 1.47.87c.64 0 1.06-.44 1.06-1.31v-5.98h2.58v6a3.48 3.48 0 0 1 -.87 2.6 3.56 3.56 0 0 1 -2.57.95 3.84 3.84 0 0 1 -3.34-1.55z" />",
                  "<path d="m36 30h7.53v2.19h-5v1.44h4.49v2h-4.42v1.49h5v2.21h-7.6z" />",
                  "<path d="m47.23 32.29h-2.8v-2.29h8.21v2.27h-2.81v7.1h-2.6z" />",
                  "<path d="m29.13 43.08h4.42a3.53 3.53 0 0 1 2.55.83 2.09 2.09 0 0 1 .6 1.53 2.16 2.16 0 0 1 -1.44 2.09 2.27 2.27 0 0 1 1.86 2.29c0 1.61-1.31 2.59-3.55 2.59h-4.44zm5 2.89c0-.52-.42-.8-1.18-.8h-1.29v1.64h1.24c.79 0 1.25-.26 1.25-.81zm-.9 2.66h-1.57v1.73h1.62c.8 0 1.24-.31 1.24-.86 0-.5-.4-.87-1.27-.87z" />",
                  "<path d="m38 43.08h4.1a4.19 4.19 0 0 1 3 1 2.93 2.93 0 0 1 .9 2.19 3 3 0 0 1 -1.93 2.89l2.24 3.27h-3l-1.88-2.84h-.87v2.84h-2.56zm4 4.5c.87 0 1.39-.43 1.39-1.11 0-.75-.54-1.12-1.4-1.12h-1.44v2.26z" />",
                  "<path d="m49.59 43h2.5l4 9.44h-2.79l-.67-1.69h-3.63l-.67 1.69h-2.71zm2.27 5.73-1-2.65-1.06 2.65z" />",
                  "<path d="m56.46 43.05h2.6v9.37h-2.6z" />",
                  "<path d="m60.06 43.05h2.42l3.37 5v-5h2.57v9.37h-2.26l-3.53-5.14v5.14h-2.57z" />",
                  "<path d="m68.86 51 1.45-1.73a4.84 4.84 0 0 0 3 1.13c.71 0 1.08-.24 1.08-.65 0-.4-.31-.6-1.59-.91-2-.46-3.53-1-3.53-2.93 0-1.74 1.37-3 3.62-3a5.89 5.89 0 0 1 3.86 1.25l-1.26 1.84a4.63 4.63 0 0 0 -2.62-.92c-.63 0-.94.25-.94.6 0 .42.32.61 1.63.91 2.14.46 3.44 1.16 3.44 2.91 0 1.91-1.51 3-3.79 3a6.58 6.58 0 0 1 -4.35-1.5z" />",
                  "</g>",
                  "</svg>",
                  "<span>",
                  "Install Nx Console for JetBrains",
                  "<span>",
                  "Available for WebStorm, Intellij IDEA Ultimate and more!",
                  "</span>",
                  "</span>",
                  "</a>",
                  "<div id="nx-cloud" className="rounded shadow">",
                  "<div>",
                  "<svg",
                  "id="nx-cloud-logo"",
                  "role="img"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  "stroke="currentColor"",
                  "fill="transparent"",
                  "viewBox="0 0 24 24"",
                  ">",
                  "<path",
                  "strokeWidth="2"",
                  "d="M23 3.75V6.5c-3.036 0-5.5 2.464-5.5 5.5s-2.464 5.5-5.5 5.5-5.5 2.464-5.5 5.5H3.75C2.232 23 1 21.768 1 20.25V3.75C1 2.232 2.232 1 3.75 1h16.5C21.768 1 23 2.232 23 3.75Z"",
                  "/>",
                  "<path",
                  "strokeWidth="2"",
                  "d="M23 6v14.1667C23 21.7307 21.7307 23 20.1667 23H6c0-3.128 2.53867-5.6667 5.6667-5.6667 3.128 0 5.6666-2.5386 5.6666-5.6666C17.3333 8.53867 19.872 6 23 6Z"",
                  "/>",
                  "</svg>",
                  "<h2>",
                  "Nx Cloud",
                  "<span>Enable faster CI & better DX</span>",
                  "</h2>",
                  "</div>",
                  "<p>",
                  "You can activate distributed tasks executions and caching by",
                  "running:",
                  "</p>",
                  "<pre>nx connect</pre>",
                  "<a",
                  "href="https://nx.app/?utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  ">",
                  "{' '}",
                  "What is Nx Cloud?{' '}",
                  "</a>",
                  "</div>",
                  "<a",
                  "id="nx-repo"",
                  "className="button-pill rounded shadow"",
                  "href="https://github.com/nrwl/nx?utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  ">",
                  "<svg",
                  "fill="currentColor"",
                  "role="img"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" />",
                  "</svg>",
                  "<span>",
                  "Nx is open source",
                  "<span> Love Nx? Give us a star! </span>",
                  "</span>",
                  "</a>",
                  "</div>",
                  "</div>",
                  "<div id="commands" className="rounded shadow">",
                  "<h2>Next steps</h2>",
                  "<p>Here are some things you can do with Nx:</p>",
                  "<details>",
                  "<summary>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"",
                  "/>",
                  "</svg>",
                  "Add UI library",
                  "</summary>",
                  "<pre>",
                  "<span># Generate UI lib</span>",
                  "nx g @nx/next:library ui",
                  "<span># Add a component</span>",
                  "nx g @nx/next:component ui/src/lib/button",
                  "</pre>",
                  "</details>",
                  "<details>",
                  "<summary>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"",
                  "/>",
                  "</svg>",
                  "View project details",
                  "</summary>",
                  "<pre>nx show project test-app --web</pre>",
                  "</details>",
                  "<details>",
                  "<summary>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"",
                  "/>",
                  "</svg>",
                  "View interactive project graph",
                  "</summary>",
                  "<pre>nx graph</pre>",
                  "</details>",
                  "<details>",
                  "<summary>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"",
                  "/>",
                  "</svg>",
                  "Run affected commands",
                  "</summary>",
                  "<pre>",
                  "<span># see what&apos;s been affected by changes</span>",
                  "nx affected:graph",
                  "<span># run tests for current changes</span>",
                  "nx affected:test",
                  "<span># run e2e tests for current changes</span>",
                  "nx affected:e2e",
                  "</pre>",
                  "</details>",
                  "</div>",
                  "<p id="love">",
                  "Carefully crafted with",
                  "<svg",
                  "fill="currentColor"",
                  "stroke="none"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"",
                  "/>",
                  "</svg>",
                  "</p>",
                  "</div>",
                  "</div>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/page.tsx",
              },
            },
            "path": "./test-app/src/app",
          },
        },
        "path": "./test-app/src",
      },
      "tsconfig.json": {
        "content": [
          "{",
          ""extends": "../tsconfig.base.json",",
          ""compilerOptions": {",
          ""jsx": "preserve",",
          ""allowJs": true,",
          ""esModuleInterop": true,",
          ""allowSyntheticDefaultImports": true,",
          ""strict": true,",
          ""forceConsistentCasingInFileNames": true,",
          ""noEmit": true,",
          ""resolveJsonModule": true,",
          ""isolatedModules": true,",
          ""incremental": true,",
          ""plugins": [",
          "{",
          ""name": "next"",
          "}",
          "]",
          "},",
          ""include": [",
          ""**/*.ts",",
          ""**/*.tsx",",
          ""**/*.js",",
          ""**/*.jsx",",
          ""../test-app/.next/types/**/*.ts",",
          ""../dist/test-app/.next/types/**/*.ts",",
          ""next-env.d.ts",",
          "".next/types/**/*.ts"",
          "],",
          ""exclude": ["node_modules", "jest.config.ts", "**/*.spec.ts", "**/*.test.ts"]",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/tsconfig.json",
      },
    },
    "path": "./test-app",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {",
      ""@/*": ["./test-app/*"],",
      ""@proj/anchor": ["anchor/src/index.ts"]",
      "}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
  "vercel.json": {
    "content": [
      "{",
      ""buildCommand": "npm run build",",
      ""outputDirectory": "dist/web/.next"",
      "}",
    ],
    "isBinary": false,
    "path": "./vercel.json",
  },
}
`;

exports[`application generator default apps should generate default app with "tailwind" ui 1`] = `
{
  ".eslintignore": {
    "content": [
      "node_modules",
    ],
    "isBinary": false,
    "path": "./.eslintignore",
  },
  ".eslintrc.json": {
    "content": [
      "{",
      ""root": true,",
      ""ignorePatterns": ["**/*"],",
      ""plugins": ["@nx"],",
      ""overrides": [",
      "{",
      ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
      ""rules": {",
      ""@nx/enforce-module-boundaries": [",
      ""error",",
      "{",
      ""enforceBuildableLibDependency": true,",
      ""allow": [],",
      ""depConstraints": [",
      "{",
      ""sourceTag": "*",",
      ""onlyDependOnLibsWithTags": ["*"]",
      "}",
      "]",
      "}",
      "]",
      "}",
      "},",
      "{",
      ""files": ["*.ts", "*.tsx"],",
      ""extends": ["plugin:@nx/typescript"],",
      ""rules": {}",
      "},",
      "{",
      ""files": ["*.js", "*.jsx"],",
      ""extends": ["plugin:@nx/javascript"],",
      ""rules": {}",
      "}",
      "]",
      "}",
    ],
    "isBinary": false,
    "path": "./.eslintrc.json",
  },
  ".prettierignore": {
    "content": [
      "# Add files here to ignore them from prettier formatting",
      "/dist",
      "/coverage",
      "/.nx/cache",
      ".anchor",
      "anchor/target/deploy",
      "anchor/target/debug",
      "anchor/target/release",
      "anchor/target/sbf-solana-solana",
      "anchor/target/.rustc_info.json",
      "!anchor/target/idl/*.json",
      "!anchor/target/types/*.ts",
      "node_modules",
      "dist",
      "tmp",
      "build",
      "test-ledger",
    ],
    "isBinary": false,
    "path": "./.prettierignore",
  },
  ".prettierrc": {
    "content": [
      "{ "singleQuote": true }",
    ],
    "isBinary": false,
    "path": "./.prettierrc",
  },
  "LICENSE": {
    "content": [
      "MIT License",
      "Copyright (c) 2024 test",
      "Permission is hereby granted, free of charge, to any person obtaining a copy",
      "of this software and associated documentation files (the "Software"), to deal",
      "in the Software without restriction, including without limitation the rights",
      "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
      "copies of the Software, and to permit persons to whom the Software is",
      "furnished to do so, subject to the following conditions:",
      "The above copyright notice and this permission notice shall be included in all",
      "copies or substantial portions of the Software.",
      "THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
      "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
      "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
      "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
      "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
      "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
      "SOFTWARE.",
    ],
    "isBinary": false,
    "path": "./LICENSE",
  },
  "README.md": {
    "content": [
      "# proj",
      "This project is generated with the [create-solana-dapp](https://github.com/solana-developers/create-solana-dapp) generator.",
      "## Getting Started",
      "### Prerequisites",
      "- Node v18.18.0 or higher",
      "- Rust v1.70.0 or higher",
      "- Anchor CLI 0.29.0 or higher",
      "- Solana CLI 1.17.0 or higher",
      "### Installation",
      "#### Clone the repo",
      "\`\`\`shell",
      "git clone <repo-url>",
      "cd <repo-name>",
      "\`\`\`",
      "#### Install Dependencies",
      "\`\`\`shell",
      "yarn install",
      "\`\`\`",
      "#### Start the web app",
      "\`\`\`",
      "yarn dev",
      "\`\`\`",
      "## Apps",
      "### anchor",
      "This is a Solana program written in Rust using the Anchor framework.",
      "#### Commands",
      "You can use any normal anchor commands. Either move to the \`anchor\` directory and run the \`anchor\` command or prefix the command with \`yarn\`, eg: \`yarn anchor\`.",
      "#### Sync the program id:",
      "Running this command will create a new keypair in the \`anchor/target/deploy\` directory and save the address to the Anchor config file and update the \`declare_id!\` macro in the \`./src/lib.rs\` file of the program.",
      "You will manually need to update the constant in \`anchor/lib/counter-exports.ts\` to match the new program id.",
      "\`\`\`shell",
      "yarn anchor keys sync",
      "\`\`\`",
      "#### Build the program:",
      "\`\`\`shell",
      "yarn anchor-build",
      "\`\`\`",
      "#### Start the test validator with the program deployed:",
      "\`\`\`shell",
      "yarn anchor-localnet",
      "\`\`\`",
      "#### Run the tests",
      "\`\`\`shell",
      "yarn anchor-test",
      "\`\`\`",
      "#### Deploy to Devnet",
      "\`\`\`shell",
      "yarn anchor deploy --provider.cluster devnet",
      "\`\`\`",
      "### web",
      "This is a React app that uses the Anchor generated client to interact with the Solana program.",
      "#### Commands",
      "Start the web app",
      "\`\`\`shell",
      "yarn dev",
      "\`\`\`",
      "Build the web app",
      "\`\`\`shell",
      "yarn build",
      "\`\`\`",
    ],
    "isBinary": false,
    "path": "./README.md",
  },
  "anchor": {
    "children": {
      ".eslintrc.json": {
        "content": [
          "{",
          ""extends": ["../.eslintrc.json"],",
          ""ignorePatterns": ["!**/*"],",
          ""overrides": [",
          "{",
          ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.js", "*.jsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.json"],",
          ""parser": "jsonc-eslint-parser",",
          ""rules": {",
          ""@nx/dependency-checks": [",
          ""error",",
          "{",
          ""ignoredFiles": ["{projectRoot}/rollup.config.{js,ts,mjs,mts}"]",
          "}",
          "]",
          "}",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/.eslintrc.json",
      },
      ".swcrc": {
        "content": [
          "{",
          ""jsc": {",
          ""target": "es2017",",
          ""parser": {",
          ""syntax": "typescript",",
          ""decorators": true,",
          ""dynamicImport": true",
          "},",
          ""transform": {",
          ""decoratorMetadata": true,",
          ""legacyDecorator": true",
          "},",
          ""keepClassNames": true,",
          ""externalHelpers": true,",
          ""loose": true",
          "},",
          ""module": {",
          ""type": "es6"",
          "},",
          ""sourceMaps": true,",
          ""exclude": [",
          ""jest.config.ts",",
          "".*\\\\.spec.tsx?$",",
          "".*\\\\.test.tsx?$",",
          ""./src/jest-setup.ts$",",
          ""./**/jest-setup.ts$",",
          "".*.js$"",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/.swcrc",
      },
      "Anchor.toml": {
        "content": [
          "[toolchain]",
          "[features]",
          "seeds = false",
          "skip-lint = false",
          "[programs.localnet]",
          "my_program = "GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA"",
          "[registry]",
          "url = "https://api.apr.dev"",
          "[provider]",
          "cluster = "Localnet"",
          "wallet = "~/.config/solana/id.json"",
          "[scripts]",
          "test = "../node_modules/.bin/nx run anchor:jest"",
          "[test]",
          "startup_wait = 5000",
          "shutdown_wait = 2000",
          "upgradeable = false",
          "[test.validator]",
          "bind_address = "127.0.0.1"",
          "ledger = ".anchor/test-ledger"",
          "rpc_port = 8899",
        ],
        "isBinary": false,
        "path": "./anchor/Anchor.toml",
      },
      "Cargo.lock": {
        "content": null,
        "isBinary": true,
        "path": "./anchor/Cargo.lock",
      },
      "Cargo.toml": {
        "content": [
          "[workspace]",
          "members = [",
          ""programs/*"",
          "]",
          "resolver = "2"",
          "[profile.release]",
          "overflow-checks = true",
          "lto = "fat"",
          "codegen-units = 1",
          "[profile.release.build-override]",
          "opt-level = 3",
          "incremental = false",
          "codegen-units = 1",
        ],
        "isBinary": false,
        "path": "./anchor/Cargo.toml",
      },
      "README.md": {
        "content": [
          "# anchor",
          "This library was generated with [Nx](https://nx.dev).",
          "## Building",
          "Run \`nx build anchor\` to build the library.",
          "## Running unit tests",
          "Run \`nx test anchor\` to execute the unit tests via [Jest](https://jestjs.io).",
        ],
        "isBinary": false,
        "path": "./anchor/README.md",
      },
      "jest.config.ts": {
        "content": [
          "/* eslint-disable */",
          "import { readFileSync } from 'fs';",
          "// Reading the SWC compilation config and remove the "exclude"",
          "// for the test files to be compiled by SWC",
          "const { exclude: _, ...swcJestConfig } = JSON.parse(",
          "readFileSync(\`\${__dirname}/.swcrc\`, 'utf-8')",
          ");",
          "// disable .swcrc look-up by SWC core because we're passing in swcJestConfig ourselves.",
          "// If we do not disable this, SWC Core will read .swcrc and won't transform our test files due to "exclude"",
          "if (swcJestConfig.swcrc === undefined) {",
          "swcJestConfig.swcrc = false;",
          "}",
          "// Uncomment if using global setup/teardown files being transformed via swc",
          "// https://nx.dev/packages/jest/documents/overview#global-setup/teardown-with-nx-libraries",
          "// jest needs EsModule Interop to find the default exported setup/teardown functions",
          "// swcJestConfig.module.noInterop = false;",
          "export default {",
          "displayName: 'anchor',",
          "preset: '../jest.preset.js',",
          "transform: {",
          "'^.+\\\\.[tj]s$': ['@swc/jest', swcJestConfig],",
          "},",
          "moduleFileExtensions: ['ts', 'js', 'html'],",
          "testEnvironment: '',",
          "coverageDirectory: '../coverage/anchor',",
          "};",
        ],
        "isBinary": false,
        "path": "./anchor/jest.config.ts",
      },
      "migrations": {
        "children": {
          "deploy.ts": {
            "content": [
              "// Migrations are an early feature. Currently, they're nothing more than this",
              "// single deploy script that's invoked from the CLI, injecting a provider",
              "// configured from the workspace's Anchor.toml.",
              "import * as anchor from '@coral-xyz/anchor';",
              "module.exports = async function (provider) {",
              "// Configure client to use the provider.",
              "anchor.setProvider(provider);",
              "// Add your deploy script here.",
              "};",
            ],
            "isBinary": false,
            "path": "./anchor/migrations/deploy.ts",
          },
        },
        "path": "./anchor/migrations",
      },
      "package.json": {
        "content": [
          "{",
          ""name": "@proj/anchor",",
          ""version": "0.0.1",",
          ""dependencies": {",
          ""@coral-xyz/anchor": "^0.29.0",",
          ""@solana/web3.js": "1.90.0"",
          "},",
          ""type": "commonjs",",
          ""main": "./index.cjs",",
          ""module": "./index.js",",
          ""private": true",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/package.json",
      },
      "programs": {
        "children": {
          "my-program": {
            "children": {
              "Cargo.toml": {
                "content": [
                  "[package]",
                  "name = "my-program"",
                  "version = "0.1.0"",
                  "description = "Created with Anchor"",
                  "edition = "2021"",
                  "[lib]",
                  "crate-type = ["cdylib", "lib"]",
                  "name = "my_program"",
                  "[features]",
                  "no-entrypoint = []",
                  "no-idl = []",
                  "no-log-ix-name = []",
                  "cpi = ["no-entrypoint"]",
                  "default = []",
                  "[dependencies]",
                  "anchor-lang = "0.29.0"",
                ],
                "isBinary": false,
                "path": "./anchor/programs/my-program/Cargo.toml",
              },
              "Xargo.toml": {
                "content": [
                  "[target.bpfel-unknown-unknown.dependencies.std]",
                  "features = []",
                ],
                "isBinary": false,
                "path": "./anchor/programs/my-program/Xargo.toml",
              },
              "src": {
                "children": {
                  "lib.rs": {
                    "content": [
                      "#![allow(clippy::result_large_err)]",
                      "use anchor_lang::prelude::*;",
                      "declare_id!("GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA");",
                      "#[program]",
                      "pub mod my_program {",
                      "use super::*;",
                      "pub fn close(_ctx: Context<CloseMyProgram>) -> Result<()> {",
                      "Ok(())",
                      "}",
                      "pub fn decrement(ctx: Context<Update>) -> Result<()> {",
                      "ctx.accounts.my_program.count = ctx.accounts.my_program.count.checked_sub(1).unwrap();",
                      "Ok(())",
                      "}",
                      "pub fn increment(ctx: Context<Update>) -> Result<()> {",
                      "ctx.accounts.my_program.count = ctx.accounts.my_program.count.checked_add(1).unwrap();",
                      "Ok(())",
                      "}",
                      "pub fn initialize(_ctx: Context<InitializeMyProgram>) -> Result<()> {",
                      "Ok(())",
                      "}",
                      "pub fn set(ctx: Context<Update>, value: u8) -> Result<()> {",
                      "ctx.accounts.my_program.count = value.clone();",
                      "Ok(())",
                      "}",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct InitializeMyProgram<'info> {",
                      "#[account(mut)]",
                      "pub payer: Signer<'info>,",
                      "#[account(",
                      "init,",
                      "space = 8 + MyProgram::INIT_SPACE,",
                      "payer = payer",
                      ")]",
                      "pub my_program: Account<'info, MyProgram>,",
                      "pub system_program: Program<'info, System>,",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct CloseMyProgram<'info> {",
                      "#[account(mut)]",
                      "pub payer: Signer<'info>,",
                      "#[account(",
                      "mut,",
                      "close = payer, // close account and return lamports to payer",
                      ")]",
                      "pub my_program: Account<'info, MyProgram>,",
                      "}",
                      "#[derive(Accounts)]",
                      "pub struct Update<'info> {",
                      "#[account(mut)]",
                      "pub my_program: Account<'info, MyProgram>,",
                      "}",
                      "#[account]",
                      "#[derive(InitSpace)]",
                      "pub struct MyProgram {",
                      "count: u8,",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./anchor/programs/my-program/src/lib.rs",
                  },
                },
                "path": "./anchor/programs/my-program/src",
              },
            },
            "path": "./anchor/programs/my-program",
          },
        },
        "path": "./anchor/programs",
      },
      "project.json": {
        "content": [
          "{",
          ""name": "anchor",",
          ""$schema": "../node_modules/nx/schemas/project-schema.json",",
          ""sourceRoot": "anchor/src",",
          ""projectType": "library",",
          ""targets": {",
          ""build": {",
          ""executor": "@nx/rollup:rollup",",
          ""outputs": ["{options.outputPath}"],",
          ""options": {",
          ""outputPath": "dist/anchor",",
          ""main": "anchor/src/index.ts",",
          ""tsConfig": "anchor/tsconfig.lib.json",",
          ""assets": [],",
          ""project": "anchor/package.json",",
          ""compiler": "swc",",
          ""format": ["cjs", "esm"]",
          "}",
          "},",
          ""lint": {",
          ""executor": "@nx/eslint:lint"",
          "},",
          ""test": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor",",
          ""commands": ["anchor test"],",
          ""parallel": false",
          "}",
          "},",
          ""anchor": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor",",
          ""commands": ["anchor"],",
          ""parallel": false",
          "}",
          "},",
          ""localnet": {",
          ""executor": "nx:run-commands",",
          ""options": {",
          ""cwd": "anchor",",
          ""commands": ["anchor localnet"],",
          ""parallel": false",
          "}",
          "},",
          ""jest": {",
          ""executor": "@nx/jest:jest",",
          ""outputs": ["{workspaceRoot}/coverage/{projectRoot}"],",
          ""options": {",
          ""jestConfig": "anchor/jest.config.ts"",
          "}",
          "}",
          "},",
          ""tags": []",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/project.json",
      },
      "src": {
        "children": {
          "index.ts": {
            "content": [
              "// This file was generated by preset-anchor. Programs are exported from this file.",
              "export * from './my-program-exports';",
            ],
            "isBinary": false,
            "path": "./anchor/src/index.ts",
          },
          "my-program-exports.ts": {
            "content": [
              "// Here we export some useful types and functions for interacting with the Anchor program.",
              "import { Cluster, PublicKey } from '@solana/web3.js';",
              "import type { MyProgram } from '../target/types/my_program';",
              "import { IDL as MyProgramIDL } from '../target/types/my_program';",
              "// Re-export the generated IDL and type",
              "export { MyProgram, MyProgramIDL };",
              "// After updating your program ID (e.g. after running \`anchor keys sync\`) update the value below.",
              "export const MY_PROGRAM_PROGRAM_ID = new PublicKey(",
              "'GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA'",
              ");",
              "// This is a helper function to get the program ID for the MyProgram program depending on the cluster.",
              "export function getMyProgramProgramId(cluster: Cluster) {",
              "switch (cluster) {",
              "case 'devnet':",
              "case 'testnet':",
              "case 'mainnet-beta':",
              "default:",
              "return MY_PROGRAM_PROGRAM_ID;",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "./anchor/src/my-program-exports.ts",
          },
        },
        "path": "./anchor/src",
      },
      "target": {
        "children": {
          "deploy": {
            "children": {
              "my_program-keypair.json": {
                "content": [
                  "[",
                  "102, 57, 177, 113, 190, 89, 227, 160, 193, 179, 207, 89, 103, 112, 83, 251,",
                  "142, 20, 242, 30, 81, 26, 82, 85, 207, 97, 28, 129, 190, 28, 128, 71, 228, 27,",
                  "114, 255, 63, 136, 164, 140, 185, 151, 50, 58, 148, 32, 197, 184, 85, 144, 79,",
                  "78, 24, 248, 25, 138, 254, 31, 96, 78, 56, 230, 148, 1",
                  "]",
                ],
                "isBinary": false,
                "path": "./anchor/target/deploy/my_program-keypair.json",
              },
            },
            "path": "./anchor/target/deploy",
          },
          "idl": {
            "children": {
              "my_program.json": {
                "content": [
                  "{",
                  ""version": "0.1.0",",
                  ""name": "my_program",",
                  ""instructions": [",
                  "{",
                  ""name": "close",",
                  ""accounts": [",
                  "{",
                  ""name": "payer",",
                  ""isMut": true,",
                  ""isSigner": true",
                  "},",
                  "{",
                  ""name": "myProgram",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "decrement",",
                  ""accounts": [",
                  "{",
                  ""name": "myProgram",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "increment",",
                  ""accounts": [",
                  "{",
                  ""name": "myProgram",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "initialize",",
                  ""accounts": [",
                  "{",
                  ""name": "payer",",
                  ""isMut": true,",
                  ""isSigner": true",
                  "},",
                  "{",
                  ""name": "myProgram",",
                  ""isMut": true,",
                  ""isSigner": true",
                  "},",
                  "{",
                  ""name": "systemProgram",",
                  ""isMut": false,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": []",
                  "},",
                  "{",
                  ""name": "set",",
                  ""accounts": [",
                  "{",
                  ""name": "myProgram",",
                  ""isMut": true,",
                  ""isSigner": false",
                  "}",
                  "],",
                  ""args": [",
                  "{",
                  ""name": "value",",
                  ""type": "u8"",
                  "}",
                  "]",
                  "}",
                  "],",
                  ""accounts": [",
                  "{",
                  ""name": "MyProgram",",
                  ""type": {",
                  ""kind": "struct",",
                  ""fields": [",
                  "{",
                  ""name": "count",",
                  ""type": "u8"",
                  "}",
                  "]",
                  "}",
                  "}",
                  "],",
                  ""metadata": {",
                  ""address": "GMSER7ttdzFvei8hUjFrCxv3PNKje2NrPwuNYS7m15dA"",
                  "}",
                  "}",
                ],
                "isBinary": false,
                "path": "./anchor/target/idl/my_program.json",
              },
            },
            "path": "./anchor/target/idl",
          },
          "types": {
            "children": {
              "my_program.ts": {
                "content": [
                  "export type MyProgram = {",
                  "version: '0.1.0';",
                  "name: 'my_program';",
                  "instructions: [",
                  "{",
                  "name: 'close';",
                  "accounts: [",
                  "{",
                  "name: 'payer';",
                  "isMut: true;",
                  "isSigner: true;",
                  "},",
                  "{",
                  "name: 'myProgram';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'decrement';",
                  "accounts: [",
                  "{",
                  "name: 'myProgram';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'increment';",
                  "accounts: [",
                  "{",
                  "name: 'myProgram';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'initialize';",
                  "accounts: [",
                  "{",
                  "name: 'payer';",
                  "isMut: true;",
                  "isSigner: true;",
                  "},",
                  "{",
                  "name: 'myProgram';",
                  "isMut: true;",
                  "isSigner: true;",
                  "},",
                  "{",
                  "name: 'systemProgram';",
                  "isMut: false;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [];",
                  "},",
                  "{",
                  "name: 'set';",
                  "accounts: [",
                  "{",
                  "name: 'myProgram';",
                  "isMut: true;",
                  "isSigner: false;",
                  "}",
                  "];",
                  "args: [",
                  "{",
                  "name: 'value';",
                  "type: 'u8';",
                  "}",
                  "];",
                  "}",
                  "];",
                  "accounts: [",
                  "{",
                  "name: 'myProgram';",
                  "type: {",
                  "kind: 'struct';",
                  "fields: [",
                  "{",
                  "name: 'count';",
                  "type: 'u8';",
                  "}",
                  "];",
                  "};",
                  "}",
                  "];",
                  "};",
                  "export const IDL: MyProgram = {",
                  "version: '0.1.0',",
                  "name: 'my_program',",
                  "instructions: [",
                  "{",
                  "name: 'close',",
                  "accounts: [",
                  "{",
                  "name: 'payer',",
                  "isMut: true,",
                  "isSigner: true,",
                  "},",
                  "{",
                  "name: 'myProgram',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'decrement',",
                  "accounts: [",
                  "{",
                  "name: 'myProgram',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'increment',",
                  "accounts: [",
                  "{",
                  "name: 'myProgram',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'initialize',",
                  "accounts: [",
                  "{",
                  "name: 'payer',",
                  "isMut: true,",
                  "isSigner: true,",
                  "},",
                  "{",
                  "name: 'myProgram',",
                  "isMut: true,",
                  "isSigner: true,",
                  "},",
                  "{",
                  "name: 'systemProgram',",
                  "isMut: false,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [],",
                  "},",
                  "{",
                  "name: 'set',",
                  "accounts: [",
                  "{",
                  "name: 'myProgram',",
                  "isMut: true,",
                  "isSigner: false,",
                  "},",
                  "],",
                  "args: [",
                  "{",
                  "name: 'value',",
                  "type: 'u8',",
                  "},",
                  "],",
                  "},",
                  "],",
                  "accounts: [",
                  "{",
                  "name: 'myProgram',",
                  "type: {",
                  "kind: 'struct',",
                  "fields: [",
                  "{",
                  "name: 'count',",
                  "type: 'u8',",
                  "},",
                  "],",
                  "},",
                  "},",
                  "],",
                  "};",
                ],
                "isBinary": false,
                "path": "./anchor/target/types/my_program.ts",
              },
            },
            "path": "./anchor/target/types",
          },
        },
        "path": "./anchor/target",
      },
      "tests": {
        "children": {
          "my-program.spec.ts": {
            "content": [
              "import * as anchor from '@coral-xyz/anchor';",
              "import { Program } from '@coral-xyz/anchor';",
              "import { Keypair } from '@solana/web3.js';",
              "import { MyProgram } from '../target/types/my_program';",
              "describe('my-program', () => {",
              "// Configure the client to use the local cluster.",
              "const provider = anchor.AnchorProvider.env();",
              "anchor.setProvider(provider);",
              "const payer = provider.wallet as anchor.Wallet;",
              "const program = anchor.workspace.MyProgram as Program<MyProgram>;",
              "const myProgramKeypair = Keypair.generate();",
              "it('Initialize MyProgram', async () => {",
              "await program.methods",
              ".initialize()",
              ".accounts({",
              "myProgram: myProgramKeypair.publicKey,",
              "payer: payer.publicKey,",
              "})",
              ".signers([myProgramKeypair])",
              ".rpc();",
              "const currentCount = await program.account.myProgram.fetch(",
              "myProgramKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(0);",
              "});",
              "it('Increment MyProgram', async () => {",
              "await program.methods",
              ".increment()",
              ".accounts({ myProgram: myProgramKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.myProgram.fetch(",
              "myProgramKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(1);",
              "});",
              "it('Increment MyProgram Again', async () => {",
              "await program.methods",
              ".increment()",
              ".accounts({ myProgram: myProgramKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.myProgram.fetch(",
              "myProgramKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(2);",
              "});",
              "it('Decrement MyProgram', async () => {",
              "await program.methods",
              ".decrement()",
              ".accounts({ myProgram: myProgramKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.myProgram.fetch(",
              "myProgramKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(1);",
              "});",
              "it('Set myProgram value', async () => {",
              "await program.methods",
              ".set(42)",
              ".accounts({ myProgram: myProgramKeypair.publicKey })",
              ".rpc();",
              "const currentCount = await program.account.myProgram.fetch(",
              "myProgramKeypair.publicKey",
              ");",
              "expect(currentCount.count).toEqual(42);",
              "});",
              "it('Set close the myProgram account', async () => {",
              "await program.methods",
              ".close()",
              ".accounts({",
              "payer: payer.publicKey,",
              "myProgram: myProgramKeypair.publicKey,",
              "})",
              ".rpc();",
              "// The account should no longer exist, returning null.",
              "const userAccount = await program.account.myProgram.fetchNullable(",
              "myProgramKeypair.publicKey",
              ");",
              "expect(userAccount).toBeNull();",
              "});",
              "});",
            ],
            "isBinary": false,
            "path": "./anchor/tests/my-program.spec.ts",
          },
        },
        "path": "./anchor/tests",
      },
      "tsconfig.json": {
        "content": [
          "{",
          ""extends": "../tsconfig.base.json",",
          ""compilerOptions": {",
          ""module": "commonjs"",
          "},",
          ""files": [],",
          ""include": [],",
          ""references": [",
          "{",
          ""path": "./tsconfig.lib.json"",
          "},",
          "{",
          ""path": "./tsconfig.spec.json"",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/tsconfig.json",
      },
      "tsconfig.lib.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""declaration": true,",
          ""types": ["node"]",
          "},",
          ""include": ["src/**/*.ts"],",
          ""exclude": ["jest.config.ts", "src/**/*.spec.ts", "src/**/*.test.ts"]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/tsconfig.lib.json",
      },
      "tsconfig.spec.json": {
        "content": [
          "{",
          ""extends": "./tsconfig.json",",
          ""compilerOptions": {",
          ""outDir": "../dist/out-tsc",",
          ""module": "commonjs",",
          ""types": ["jest", "node"]",
          "},",
          ""include": [",
          ""jest.config.ts",",
          ""src/**/*.test.ts",",
          ""src/**/*.spec.ts",",
          ""src/**/*.d.ts"",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./anchor/tsconfig.spec.json",
      },
    },
    "path": "./anchor",
  },
  "jest.config.ts": {
    "content": [
      "import { getJestProjectsAsync } from '@nx/jest';",
      "export default async () => ({",
      "projects: await getJestProjectsAsync(),",
      "});",
    ],
    "isBinary": false,
    "path": "./jest.config.ts",
  },
  "jest.preset.js": {
    "content": [
      "const nxPreset = require('@nx/jest/preset').default;",
      "module.exports = { ...nxPreset };",
    ],
    "isBinary": false,
    "path": "./jest.preset.js",
  },
  "nx.json": {
    "content": [
      "{",
      ""affected": {",
      ""defaultBase": "main"",
      "},",
      ""targetDefaults": {",
      ""build": {",
      ""cache": true",
      "},",
      ""lint": {",
      ""cache": true",
      "},",
      ""@nx/next:build": {",
      ""cache": true,",
      ""dependsOn": ["^build"],",
      ""inputs": ["default", "^default"]",
      "},",
      ""@nx/eslint:lint": {",
      ""cache": true,",
      ""inputs": [",
      ""default",",
      ""{workspaceRoot}/.eslintrc.json",",
      ""{workspaceRoot}/.eslintignore",",
      ""{workspaceRoot}/eslint.config.js"",
      "]",
      "},",
      ""@nx/rollup:rollup": {",
      ""cache": true,",
      ""dependsOn": ["^build"],",
      ""inputs": ["default", "^default"]",
      "},",
      ""@nx/jest:jest": {",
      ""cache": true,",
      ""inputs": ["default", "^default", "{workspaceRoot}/jest.preset.js"],",
      ""options": {",
      ""passWithNoTests": true",
      "},",
      ""configurations": {",
      ""ci": {",
      ""ci": true,",
      ""codeCoverage": true",
      "}",
      "}",
      "}",
      "},",
      ""generators": {",
      ""@nx/next": {",
      ""application": {",
      ""style": "css",",
      ""linter": "eslint"",
      "}",
      "}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./nx.json",
  },
  "package.json": {
    "content": [
      "{",
      ""name": "@proj/source",",
      ""dependencies": {",
      ""@coral-xyz/anchor": "^0.29.0",",
      ""@solana/spl-token": "0.4.1",",
      ""@solana/wallet-adapter-base": "^0.9.23",",
      ""@solana/wallet-adapter-react": "^0.15.35",",
      ""@solana/wallet-adapter-react-ui": "^0.9.35",",
      ""@solana/web3.js": "1.90.0",",
      ""@tabler/icons-react": "2.47.0",",
      ""@tailwindcss/typography": "0.5.10",",
      ""@tanstack/react-query": "5.24.1",",
      ""@tanstack/react-query-next-experimental": "5.24.1",",
      ""bs58": "5.0.0",",
      ""buffer": "6.0.3",",
      ""daisyui": "4.7.2",",
      ""encoding": "0.1.13",",
      ""jotai": "2.6.5",",
      ""next": "14.0.4",",
      ""react": "18.2.0",",
      ""react-dom": "18.2.0",",
      ""react-hot-toast": "2.4.1",",
      ""tslib": "^2.3.0"",
      "},",
      ""devDependencies": {",
      ""@nx/eslint": "18.1.3",",
      ""@nx/eslint-plugin": "18.1.3",",
      ""@nx/jest": "18.1.3",",
      ""@nx/js": "18.1.3",",
      ""@nx/next": "18.1.3",",
      ""@nx/rollup": "18.1.3",",
      ""@swc-node/register": "~1.8.0",",
      ""@swc/cli": "~0.1.62",",
      ""@swc/core": "~1.3.85",",
      ""@swc/helpers": "~0.5.2",",
      ""@swc/jest": "0.2.20",",
      ""@types/jest": "^29.4.0",",
      ""@types/node": "18.16.9",",
      ""@types/react": "18.2.33",",
      ""@types/react-dom": "18.2.14",",
      ""@typescript-eslint/eslint-plugin": "^6.13.2",",
      ""@typescript-eslint/parser": "^6.13.2",",
      ""autoprefixer": "10.4.13",",
      ""eslint": "~8.48.0",",
      ""eslint-config-next": "14.0.4",",
      ""eslint-config-prettier": "^9.0.0",",
      ""eslint-plugin-import": "2.27.5",",
      ""eslint-plugin-jsx-a11y": "6.7.1",",
      ""eslint-plugin-react": "7.32.2",",
      ""eslint-plugin-react-hooks": "4.6.0",",
      ""jest": "^29.4.1",",
      ""jest-environment-jsdom": "^29.4.1",",
      ""postcss": "8.4.21",",
      ""prettier": "^2.6.2",",
      ""tailwindcss": "3.2.7",",
      ""ts-jest": "^29.1.0",",
      ""ts-node": "10.9.1",",
      ""typescript": "~5.3.2"",
      "},",
      ""scripts": {",
      ""anchor": "nx run anchor:anchor",",
      ""anchor-build": "nx run anchor:anchor build",",
      ""anchor-localnet": "nx run anchor:anchor localnet",",
      ""anchor-test": "nx run anchor:anchor test",",
      ""feature": "nx generate @solana-developers/preset-react:feature",",
      ""build": "nx build test-app",",
      ""dev": "nx serve test-app"",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./package.json",
  },
  "test-app": {
    "children": {
      ".eslintrc.json": {
        "content": [
          "{",
          ""extends": [",
          ""plugin:@nx/react-typescript",",
          ""next",",
          ""next/core-web-vitals",",
          ""../.eslintrc.json"",
          "],",
          ""ignorePatterns": ["!**/*", ".next/**/*"],",
          ""overrides": [",
          "{",
          ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
          ""rules": {",
          ""@next/next/no-html-link-for-pages": ["error", "test-app/pages"]",
          "}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.js", "*.jsx"],",
          ""rules": {}",
          "},",
          "{",
          ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
          ""rules": {",
          ""@nx/enforce-module-boundaries": [",
          ""error",",
          "{",
          ""allow": ["@/"]",
          "}",
          "]",
          "}",
          "}",
          "]",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/.eslintrc.json",
      },
      "app": {
        "children": {
          "account": {
            "children": {
              "[address]": {
                "children": {
                  "page.tsx": {
                    "content": [
                      "import AccountDetailFeature from '@/components/account/account-detail-feature';",
                      "export default function Page() {",
                      "return <AccountDetailFeature />;",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "./test-app/app/account/[address]/page.tsx",
                  },
                },
                "path": "./test-app/app/account/[address]",
              },
              "page.tsx": {
                "content": [
                  "import AccountListFeature from '@/components/account/account-list-feature';",
                  "export default function Page() {",
                  "return <AccountListFeature />;",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/app/account/page.tsx",
              },
            },
            "path": "./test-app/app/account",
          },
          "clusters": {
            "children": {
              "page.tsx": {
                "content": [
                  "import ClusterFeature from '@/components/cluster/cluster-feature';",
                  "export default function Page() {",
                  "return <ClusterFeature />;",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/app/clusters/page.tsx",
              },
            },
            "path": "./test-app/app/clusters",
          },
          "global.css": {
            "content": [
              "@tailwind base;",
              "@tailwind components;",
              "@tailwind utilities;",
              "html,",
              "body {",
              "height: 100%;",
              "}",
              ".wallet-adapter-button-trigger {",
              "background: rgb(100, 26, 230) !important;",
              "border-radius: 8px !important;",
              "padding-left: 16px !important;",
              "padding-right: 16px !important;",
              "}",
              ".wallet-adapter-dropdown-list,",
              ".wallet-adapter-button {",
              "font-family: inherit !important;",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/global.css",
          },
          "layout.tsx": {
            "content": [
              "import './global.css';",
              "import { UiLayout } from '@/components/ui/ui-layout';",
              "import { ClusterProvider } from '@/components/cluster/cluster-data-access';",
              "import { SolanaProvider } from '@/components/solana/solana-provider';",
              "import { ReactQueryProvider } from './react-query-provider';",
              "export const metadata = {",
              "title: 'proj',",
              "description: 'Generated by create-solana-dapp',",
              "};",
              "const links: { label: string; path: string }[] = [",
              "{ label: 'Account', path: '/account' },",
              "{ label: 'Clusters', path: '/clusters' },",
              "{ label: 'MyProgram Program', path: '/my-program' },",
              "];",
              "export default function RootLayout({",
              "children,",
              "}: {",
              "children: React.ReactNode;",
              "}) {",
              "return (",
              "<html lang="en">",
              "<body>",
              "<ReactQueryProvider>",
              "<ClusterProvider>",
              "<SolanaProvider>",
              "<UiLayout links={links}>{children}</UiLayout>",
              "</SolanaProvider>",
              "</ClusterProvider>",
              "</ReactQueryProvider>",
              "</body>",
              "</html>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/layout.tsx",
          },
          "my-program": {
            "children": {
              "page.tsx": {
                "content": [
                  "import MyProgramFeature from '@/components/my-program/my-program-feature';",
                  "export default function Page() {",
                  "return <MyProgramFeature />;",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/app/my-program/page.tsx",
              },
            },
            "path": "./test-app/app/my-program",
          },
          "page.tsx": {
            "content": [
              "import DashboardFeature from '@/components/dashboard/dashboard-feature';",
              "export default function Page() {",
              "return <DashboardFeature />;",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/page.tsx",
          },
          "react-query-provider.tsx": {
            "content": [
              "'use client';",
              "import React, { ReactNode, useState } from 'react';",
              "import { ReactQueryStreamedHydration } from '@tanstack/react-query-next-experimental';",
              "import { QueryClientProvider, QueryClient } from '@tanstack/react-query';",
              "export function ReactQueryProvider({ children }: { children: ReactNode }) {",
              "const [client] = useState(new QueryClient());",
              "return (",
              "<QueryClientProvider client={client}>",
              "<ReactQueryStreamedHydration>{children}</ReactQueryStreamedHydration>",
              "</QueryClientProvider>",
              ");",
              "}",
            ],
            "isBinary": false,
            "path": "./test-app/app/react-query-provider.tsx",
          },
        },
        "path": "./test-app/app",
      },
      "components": {
        "children": {
          "account": {
            "children": {
              "account-data-access.tsx": {
                "content": [
                  "'use client';",
                  "import { useConnection, useWallet } from '@solana/wallet-adapter-react';",
                  "import { TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from '@solana/spl-token';",
                  "import {",
                  "Connection,",
                  "LAMPORTS_PER_SOL,",
                  "PublicKey,",
                  "SystemProgram,",
                  "TransactionMessage,",
                  "TransactionSignature,",
                  "VersionedTransaction,",
                  "} from '@solana/web3.js';",
                  "import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';",
                  "import toast from 'react-hot-toast';",
                  "import { useTransactionToast } from '../ui/ui-layout';",
                  "export function useGetBalance({ address }: { address: PublicKey }) {",
                  "const { connection } = useConnection();",
                  "return useQuery({",
                  "queryKey: ['get-balance', { endpoint: connection.rpcEndpoint, address }],",
                  "queryFn: () => connection.getBalance(address),",
                  "});",
                  "}",
                  "export function useGetSignatures({ address }: { address: PublicKey }) {",
                  "const { connection } = useConnection();",
                  "return useQuery({",
                  "queryKey: ['get-signatures', { endpoint: connection.rpcEndpoint, address }],",
                  "queryFn: () => connection.getConfirmedSignaturesForAddress2(address),",
                  "});",
                  "}",
                  "export function useGetTokenAccounts({ address }: { address: PublicKey }) {",
                  "const { connection } = useConnection();",
                  "return useQuery({",
                  "queryKey: [",
                  "'get-token-accounts',",
                  "{ endpoint: connection.rpcEndpoint, address },",
                  "],",
                  "queryFn: async () => {",
                  "const [tokenAccounts, token2022Accounts] = await Promise.all([",
                  "connection.getParsedTokenAccountsByOwner(address, {",
                  "programId: TOKEN_PROGRAM_ID,",
                  "}),",
                  "connection.getParsedTokenAccountsByOwner(address, {",
                  "programId: TOKEN_2022_PROGRAM_ID,",
                  "}),",
                  "]);",
                  "return [...tokenAccounts.value, ...token2022Accounts.value];",
                  "},",
                  "});",
                  "}",
                  "export function useTransferSol({ address }: { address: PublicKey }) {",
                  "const { connection } = useConnection();",
                  "const transactionToast = useTransactionToast();",
                  "const wallet = useWallet();",
                  "const client = useQueryClient();",
                  "return useMutation({",
                  "mutationKey: [",
                  "'transfer-sol',",
                  "{ endpoint: connection.rpcEndpoint, address },",
                  "],",
                  "mutationFn: async (input: { destination: PublicKey; amount: number }) => {",
                  "let signature: TransactionSignature = '';",
                  "try {",
                  "const { transaction, latestBlockhash } = await createTransaction({",
                  "publicKey: address,",
                  "destination: input.destination,",
                  "amount: input.amount,",
                  "connection,",
                  "});",
                  "// Send transaction and await for signature",
                  "signature = await wallet.sendTransaction(transaction, connection);",
                  "// Send transaction and await for signature",
                  "await connection.confirmTransaction(",
                  "{ signature, ...latestBlockhash },",
                  "'confirmed'",
                  ");",
                  "console.log(signature);",
                  "return signature;",
                  "} catch (error: unknown) {",
                  "console.log('error', \`Transaction failed! \${error}\`, signature);",
                  "return;",
                  "}",
                  "},",
                  "onSuccess: (signature) => {",
                  "if (signature) {",
                  "transactionToast(signature);",
                  "}",
                  "return Promise.all([",
                  "client.invalidateQueries({",
                  "queryKey: [",
                  "'get-balance',",
                  "{ endpoint: connection.rpcEndpoint, address },",
                  "],",
                  "}),",
                  "client.invalidateQueries({",
                  "queryKey: [",
                  "'get-signatures',",
                  "{ endpoint: connection.rpcEndpoint, address },",
                  "],",
                  "}),",
                  "]);",
                  "},",
                  "onError: (error) => {",
                  "toast.error(\`Transaction failed! \${error}\`);",
                  "},",
                  "});",
                  "}",
                  "export function useRequestAirdrop({ address }: { address: PublicKey }) {",
                  "const { connection } = useConnection();",
                  "const transactionToast = useTransactionToast();",
                  "const client = useQueryClient();",
                  "return useMutation({",
                  "mutationKey: ['airdrop', { endpoint: connection.rpcEndpoint, address }],",
                  "mutationFn: async (amount: number = 1) => {",
                  "const [latestBlockhash, signature] = await Promise.all([",
                  "connection.getLatestBlockhash(),",
                  "connection.requestAirdrop(address, amount * LAMPORTS_PER_SOL),",
                  "]);",
                  "await connection.confirmTransaction(",
                  "{ signature, ...latestBlockhash },",
                  "'confirmed'",
                  ");",
                  "return signature;",
                  "},",
                  "onSuccess: (signature) => {",
                  "transactionToast(signature);",
                  "return Promise.all([",
                  "client.invalidateQueries({",
                  "queryKey: [",
                  "'get-balance',",
                  "{ endpoint: connection.rpcEndpoint, address },",
                  "],",
                  "}),",
                  "client.invalidateQueries({",
                  "queryKey: [",
                  "'get-signatures',",
                  "{ endpoint: connection.rpcEndpoint, address },",
                  "],",
                  "}),",
                  "]);",
                  "},",
                  "});",
                  "}",
                  "async function createTransaction({",
                  "publicKey,",
                  "destination,",
                  "amount,",
                  "connection,",
                  "}: {",
                  "publicKey: PublicKey;",
                  "destination: PublicKey;",
                  "amount: number;",
                  "connection: Connection;",
                  "}): Promise<{",
                  "transaction: VersionedTransaction;",
                  "latestBlockhash: { blockhash: string; lastValidBlockHeight: number };",
                  "}> {",
                  "// Get the latest blockhash to use in our transaction",
                  "const latestBlockhash = await connection.getLatestBlockhash();",
                  "// Create instructions to send, in this case a simple transfer",
                  "const instructions = [",
                  "SystemProgram.transfer({",
                  "fromPubkey: publicKey,",
                  "toPubkey: destination,",
                  "lamports: amount * LAMPORTS_PER_SOL,",
                  "}),",
                  "];",
                  "// Create a new TransactionMessage with version and compile it to legacy",
                  "const messageLegacy = new TransactionMessage({",
                  "payerKey: publicKey,",
                  "recentBlockhash: latestBlockhash.blockhash,",
                  "instructions,",
                  "}).compileToLegacyMessage();",
                  "// Create a new VersionedTransaction which supports legacy and v0",
                  "const transaction = new VersionedTransaction(messageLegacy);",
                  "return {",
                  "transaction,",
                  "latestBlockhash,",
                  "};",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/account/account-data-access.tsx",
              },
              "account-detail-feature.tsx": {
                "content": [
                  "'use client';",
                  "import { PublicKey } from '@solana/web3.js';",
                  "import { useMemo } from 'react';",
                  "import { useParams } from 'next/navigation';",
                  "import { ExplorerLink } from '../cluster/cluster-ui';",
                  "import { AppHero, ellipsify } from '../ui/ui-layout';",
                  "import {",
                  "AccountBalance,",
                  "AccountButtons,",
                  "AccountTokens,",
                  "AccountTransactions,",
                  "} from './account-ui';",
                  "export default function AccountDetailFeature() {",
                  "const params = useParams();",
                  "const address = useMemo(() => {",
                  "if (!params.address) {",
                  "return;",
                  "}",
                  "try {",
                  "return new PublicKey(params.address);",
                  "} catch (e) {",
                  "console.log(\`Invalid public key\`, e);",
                  "}",
                  "}, [params]);",
                  "if (!address) {",
                  "return <div>Error loading account</div>;",
                  "}",
                  "return (",
                  "<div>",
                  "<AppHero",
                  "title={<AccountBalance address={address} />}",
                  "subtitle={",
                  "<div className="my-4">",
                  "<ExplorerLink",
                  "path={\`account/\${address}\`}",
                  "label={ellipsify(address.toString())}",
                  "/>",
                  "</div>",
                  "}",
                  ">",
                  "<div className="my-4">",
                  "<AccountButtons address={address} />",
                  "</div>",
                  "</AppHero>",
                  "<div className="space-y-8">",
                  "<AccountTokens address={address} />",
                  "<AccountTransactions address={address} />",
                  "</div>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/account/account-detail-feature.tsx",
              },
              "account-list-feature.tsx": {
                "content": [
                  "'use client';",
                  "import { useWallet } from '@solana/wallet-adapter-react';",
                  "import { WalletButton } from '../solana/solana-provider';",
                  "import { redirect } from 'next/navigation';",
                  "export default function AccountListFeature() {",
                  "const { publicKey } = useWallet();",
                  "if (publicKey) {",
                  "return redirect(\`/account/\${publicKey.toString()}\`);",
                  "}",
                  "return (",
                  "<div className="hero py-[64px]">",
                  "<div className="hero-content text-center">",
                  "<WalletButton />",
                  "</div>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/account/account-list-feature.tsx",
              },
              "account-ui.tsx": {
                "content": [
                  "'use client';",
                  "import { useWallet } from '@solana/wallet-adapter-react';",
                  "import { LAMPORTS_PER_SOL, PublicKey } from '@solana/web3.js';",
                  "import { IconRefresh } from '@tabler/icons-react';",
                  "import { useQueryClient } from '@tanstack/react-query';",
                  "import { useMemo, useState } from 'react';",
                  "import { AppModal, ellipsify } from '../ui/ui-layout';",
                  "import { useCluster } from '../cluster/cluster-data-access';",
                  "import { ExplorerLink } from '../cluster/cluster-ui';",
                  "import {",
                  "useGetBalance,",
                  "useGetSignatures,",
                  "useGetTokenAccounts,",
                  "useRequestAirdrop,",
                  "useTransferSol,",
                  "} from './account-data-access';",
                  "export function AccountBalance({ address }: { address: PublicKey }) {",
                  "const query = useGetBalance({ address });",
                  "return (",
                  "<div>",
                  "<h1",
                  "className="text-5xl font-bold cursor-pointer"",
                  "onClick={() => query.refetch()}",
                  ">",
                  "{query.data ? <BalanceSol balance={query.data} /> : '...'} SOL",
                  "</h1>",
                  "</div>",
                  ");",
                  "}",
                  "export function AccountChecker() {",
                  "const { publicKey } = useWallet();",
                  "if (!publicKey) {",
                  "return null;",
                  "}",
                  "return <AccountBalanceCheck address={publicKey} />;",
                  "}",
                  "export function AccountBalanceCheck({ address }: { address: PublicKey }) {",
                  "const { cluster } = useCluster();",
                  "const mutation = useRequestAirdrop({ address });",
                  "const query = useGetBalance({ address });",
                  "if (query.isLoading) {",
                  "return null;",
                  "}",
                  "if (query.isError || !query.data) {",
                  "return (",
                  "<div className="alert alert-warning text-warning-content/80 rounded-none flex justify-center">",
                  "<span>",
                  "You are connected to <strong>{cluster.name}</strong> but your account",
                  "is not found on this cluster.",
                  "</span>",
                  "<button",
                  "className="btn btn-xs btn-neutral"",
                  "onClick={() =>",
                  "mutation.mutateAsync(1).catch((err) => console.log(err))",
                  "}",
                  ">",
                  "Request Airdrop",
                  "</button>",
                  "</div>",
                  ");",
                  "}",
                  "return null;",
                  "}",
                  "export function AccountButtons({ address }: { address: PublicKey }) {",
                  "const wallet = useWallet();",
                  "const { cluster } = useCluster();",
                  "const [showAirdropModal, setShowAirdropModal] = useState(false);",
                  "const [showReceiveModal, setShowReceiveModal] = useState(false);",
                  "const [showSendModal, setShowSendModal] = useState(false);",
                  "return (",
                  "<div>",
                  "<ModalAirdrop",
                  "hide={() => setShowAirdropModal(false)}",
                  "address={address}",
                  "show={showAirdropModal}",
                  "/>",
                  "<ModalReceive",
                  "address={address}",
                  "show={showReceiveModal}",
                  "hide={() => setShowReceiveModal(false)}",
                  "/>",
                  "<ModalSend",
                  "address={address}",
                  "show={showSendModal}",
                  "hide={() => setShowSendModal(false)}",
                  "/>",
                  "<div className="space-x-2">",
                  "<button",
                  "disabled={cluster.network?.includes('mainnet')}",
                  "className="btn btn-xs lg:btn-md btn-outline"",
                  "onClick={() => setShowAirdropModal(true)}",
                  ">",
                  "Airdrop",
                  "</button>",
                  "<button",
                  "disabled={wallet.publicKey?.toString() !== address.toString()}",
                  "className="btn btn-xs lg:btn-md btn-outline"",
                  "onClick={() => setShowSendModal(true)}",
                  ">",
                  "Send",
                  "</button>",
                  "<button",
                  "className="btn btn-xs lg:btn-md btn-outline"",
                  "onClick={() => setShowReceiveModal(true)}",
                  ">",
                  "Receive",
                  "</button>",
                  "</div>",
                  "</div>",
                  ");",
                  "}",
                  "export function AccountTokens({ address }: { address: PublicKey }) {",
                  "const [showAll, setShowAll] = useState(false);",
                  "const query = useGetTokenAccounts({ address });",
                  "const client = useQueryClient();",
                  "const items = useMemo(() => {",
                  "if (showAll) return query.data;",
                  "return query.data?.slice(0, 5);",
                  "}, [query.data, showAll]);",
                  "return (",
                  "<div className="space-y-2">",
                  "<div className="justify-between">",
                  "<div className="flex justify-between">",
                  "<h2 className="text-2xl font-bold">Token Accounts</h2>",
                  "<div className="space-x-2">",
                  "{query.isLoading ? (",
                  "<span className="loading loading-spinner"></span>",
                  ") : (",
                  "<button",
                  "className="btn btn-sm btn-outline"",
                  "onClick={async () => {",
                  "await query.refetch();",
                  "await client.invalidateQueries({",
                  "queryKey: ['getTokenAccountBalance'],",
                  "});",
                  "}}",
                  ">",
                  "<IconRefresh size={16} />",
                  "</button>",
                  ")}",
                  "</div>",
                  "</div>",
                  "</div>",
                  "{query.isError && (",
                  "<pre className="alert alert-error">",
                  "Error: {query.error?.message.toString()}",
                  "</pre>",
                  ")}",
                  "{query.isSuccess && (",
                  "<div>",
                  "{query.data.length === 0 ? (",
                  "<div>No token accounts found.</div>",
                  ") : (",
                  "<table className="table border-4 rounded-lg border-separate border-base-300">",
                  "<thead>",
                  "<tr>",
                  "<th>Public Key</th>",
                  "<th>Mint</th>",
                  "<th className="text-right">Balance</th>",
                  "</tr>",
                  "</thead>",
                  "<tbody>",
                  "{items?.map(({ account, pubkey }) => (",
                  "<tr key={pubkey.toString()}>",
                  "<td>",
                  "<div className="flex space-x-2">",
                  "<span className="font-mono">",
                  "<ExplorerLink",
                  "label={ellipsify(pubkey.toString())}",
                  "path={\`account/\${pubkey.toString()}\`}",
                  "/>",
                  "</span>",
                  "</div>",
                  "</td>",
                  "<td>",
                  "<div className="flex space-x-2">",
                  "<span className="font-mono">",
                  "<ExplorerLink",
                  "label={ellipsify(account.data.parsed.info.mint)}",
                  "path={\`account/\${account.data.parsed.info.mint.toString()}\`}",
                  "/>",
                  "</span>",
                  "</div>",
                  "</td>",
                  "<td className="text-right">",
                  "<span className="font-mono">",
                  "{account.data.parsed.info.tokenAmount.uiAmount}",
                  "</span>",
                  "</td>",
                  "</tr>",
                  "))}",
                  "{(query.data?.length ?? 0) > 5 && (",
                  "<tr>",
                  "<td colSpan={4} className="text-center">",
                  "<button",
                  "className="btn btn-xs btn-outline"",
                  "onClick={() => setShowAll(!showAll)}",
                  ">",
                  "{showAll ? 'Show Less' : 'Show All'}",
                  "</button>",
                  "</td>",
                  "</tr>",
                  ")}",
                  "</tbody>",
                  "</table>",
                  ")}",
                  "</div>",
                  ")}",
                  "</div>",
                  ");",
                  "}",
                  "export function AccountTransactions({ address }: { address: PublicKey }) {",
                  "const query = useGetSignatures({ address });",
                  "const [showAll, setShowAll] = useState(false);",
                  "const items = useMemo(() => {",
                  "if (showAll) return query.data;",
                  "return query.data?.slice(0, 5);",
                  "}, [query.data, showAll]);",
                  "return (",
                  "<div className="space-y-2">",
                  "<div className="flex justify-between">",
                  "<h2 className="text-2xl font-bold">Transaction History</h2>",
                  "<div className="space-x-2">",
                  "{query.isLoading ? (",
                  "<span className="loading loading-spinner"></span>",
                  ") : (",
                  "<button",
                  "className="btn btn-sm btn-outline"",
                  "onClick={() => query.refetch()}",
                  ">",
                  "<IconRefresh size={16} />",
                  "</button>",
                  ")}",
                  "</div>",
                  "</div>",
                  "{query.isError && (",
                  "<pre className="alert alert-error">",
                  "Error: {query.error?.message.toString()}",
                  "</pre>",
                  ")}",
                  "{query.isSuccess && (",
                  "<div>",
                  "{query.data.length === 0 ? (",
                  "<div>No transactions found.</div>",
                  ") : (",
                  "<table className="table border-4 rounded-lg border-separate border-base-300">",
                  "<thead>",
                  "<tr>",
                  "<th>Signature</th>",
                  "<th className="text-right">Slot</th>",
                  "<th>Block Time</th>",
                  "<th className="text-right">Status</th>",
                  "</tr>",
                  "</thead>",
                  "<tbody>",
                  "{items?.map((item) => (",
                  "<tr key={item.signature}>",
                  "<th className="font-mono">",
                  "<ExplorerLink",
                  "path={\`tx/\${item.signature}\`}",
                  "label={ellipsify(item.signature, 8)}",
                  "/>",
                  "</th>",
                  "<td className="font-mono text-right">",
                  "<ExplorerLink",
                  "path={\`block/\${item.slot}\`}",
                  "label={item.slot.toString()}",
                  "/>",
                  "</td>",
                  "<td>",
                  "{new Date((item.blockTime ?? 0) * 1000).toISOString()}",
                  "</td>",
                  "<td className="text-right">",
                  "{item.err ? (",
                  "<div",
                  "className="badge badge-error"",
                  "title={JSON.stringify(item.err)}",
                  ">",
                  "Failed",
                  "</div>",
                  ") : (",
                  "<div className="badge badge-success">Success</div>",
                  ")}",
                  "</td>",
                  "</tr>",
                  "))}",
                  "{(query.data?.length ?? 0) > 5 && (",
                  "<tr>",
                  "<td colSpan={4} className="text-center">",
                  "<button",
                  "className="btn btn-xs btn-outline"",
                  "onClick={() => setShowAll(!showAll)}",
                  ">",
                  "{showAll ? 'Show Less' : 'Show All'}",
                  "</button>",
                  "</td>",
                  "</tr>",
                  ")}",
                  "</tbody>",
                  "</table>",
                  ")}",
                  "</div>",
                  ")}",
                  "</div>",
                  ");",
                  "}",
                  "function BalanceSol({ balance }: { balance: number }) {",
                  "return (",
                  "<span>{Math.round((balance / LAMPORTS_PER_SOL) * 100000) / 100000}</span>",
                  ");",
                  "}",
                  "function ModalReceive({",
                  "hide,",
                  "show,",
                  "address,",
                  "}: {",
                  "hide: () => void;",
                  "show: boolean;",
                  "address: PublicKey;",
                  "}) {",
                  "return (",
                  "<AppModal title="Receive" hide={hide} show={show}>",
                  "<p>Receive assets by sending them to your public key:</p>",
                  "<code>{address.toString()}</code>",
                  "</AppModal>",
                  ");",
                  "}",
                  "function ModalAirdrop({",
                  "hide,",
                  "show,",
                  "address,",
                  "}: {",
                  "hide: () => void;",
                  "show: boolean;",
                  "address: PublicKey;",
                  "}) {",
                  "const mutation = useRequestAirdrop({ address });",
                  "const [amount, setAmount] = useState('2');",
                  "return (",
                  "<AppModal",
                  "hide={hide}",
                  "show={show}",
                  "title="Airdrop"",
                  "submitDisabled={!amount || mutation.isPending}",
                  "submitLabel="Request Airdrop"",
                  "submit={() => mutation.mutateAsync(parseFloat(amount)).then(() => hide())}",
                  ">",
                  "<input",
                  "disabled={mutation.isPending}",
                  "type="number"",
                  "step="any"",
                  "min="1"",
                  "placeholder="Amount"",
                  "className="input input-bordered w-full"",
                  "value={amount}",
                  "onChange={(e) => setAmount(e.target.value)}",
                  "/>",
                  "</AppModal>",
                  ");",
                  "}",
                  "function ModalSend({",
                  "hide,",
                  "show,",
                  "address,",
                  "}: {",
                  "hide: () => void;",
                  "show: boolean;",
                  "address: PublicKey;",
                  "}) {",
                  "const wallet = useWallet();",
                  "const mutation = useTransferSol({ address });",
                  "const [destination, setDestination] = useState('');",
                  "const [amount, setAmount] = useState('1');",
                  "if (!address || !wallet.sendTransaction) {",
                  "return <div>Wallet not connected</div>;",
                  "}",
                  "return (",
                  "<AppModal",
                  "hide={hide}",
                  "show={show}",
                  "title="Send"",
                  "submitDisabled={!destination || !amount || mutation.isPending}",
                  "submitLabel="Send"",
                  "submit={() => {",
                  "mutation",
                  ".mutateAsync({",
                  "destination: new PublicKey(destination),",
                  "amount: parseFloat(amount),",
                  "})",
                  ".then(() => hide());",
                  "}}",
                  ">",
                  "<input",
                  "disabled={mutation.isPending}",
                  "type="text"",
                  "placeholder="Destination"",
                  "className="input input-bordered w-full"",
                  "value={destination}",
                  "onChange={(e) => setDestination(e.target.value)}",
                  "/>",
                  "<input",
                  "disabled={mutation.isPending}",
                  "type="number"",
                  "step="any"",
                  "min="1"",
                  "placeholder="Amount"",
                  "className="input input-bordered w-full"",
                  "value={amount}",
                  "onChange={(e) => setAmount(e.target.value)}",
                  "/>",
                  "</AppModal>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/account/account-ui.tsx",
              },
            },
            "path": "./test-app/components/account",
          },
          "cluster": {
            "children": {
              "cluster-data-access.tsx": {
                "content": [
                  "'use client';",
                  "import { clusterApiUrl, Connection } from '@solana/web3.js';",
                  "import { atom, useAtomValue, useSetAtom } from 'jotai';",
                  "import { atomWithStorage } from 'jotai/utils';",
                  "import { createContext, ReactNode, useContext } from 'react';",
                  "import toast from 'react-hot-toast';",
                  "export interface Cluster {",
                  "name: string;",
                  "endpoint: string;",
                  "network?: ClusterNetwork;",
                  "active?: boolean;",
                  "}",
                  "export enum ClusterNetwork {",
                  "Mainnet = 'mainnet-beta',",
                  "Testnet = 'testnet',",
                  "Devnet = 'devnet',",
                  "Custom = 'custom',",
                  "}",
                  "// By default, we don't configure the mainnet-beta cluster",
                  "// The endpoint provided by clusterApiUrl('mainnet-beta') does not allow access from the browser due to CORS restrictions",
                  "// To use the mainnet-beta cluster, provide a custom endpoint",
                  "export const defaultClusters: Cluster[] = [",
                  "{",
                  "name: 'devnet',",
                  "endpoint: clusterApiUrl('devnet'),",
                  "network: ClusterNetwork.Devnet,",
                  "},",
                  "{ name: 'local', endpoint: 'http://localhost:8899' },",
                  "{",
                  "name: 'testnet',",
                  "endpoint: clusterApiUrl('testnet'),",
                  "network: ClusterNetwork.Testnet,",
                  "},",
                  "];",
                  "const clusterAtom = atomWithStorage<Cluster>(",
                  "'solana-cluster',",
                  "defaultClusters[0]",
                  ");",
                  "const clustersAtom = atomWithStorage<Cluster[]>(",
                  "'solana-clusters',",
                  "defaultClusters",
                  ");",
                  "const activeClustersAtom = atom<Cluster[]>((get) => {",
                  "const clusters = get(clustersAtom);",
                  "const cluster = get(clusterAtom);",
                  "return clusters.map((item) => ({",
                  "...item,",
                  "active: item.name === cluster.name,",
                  "}));",
                  "});",
                  "const activeClusterAtom = atom<Cluster>((get) => {",
                  "const clusters = get(activeClustersAtom);",
                  "return clusters.find((item) => item.active) || clusters[0];",
                  "});",
                  "export interface ClusterProviderContext {",
                  "cluster: Cluster;",
                  "clusters: Cluster[];",
                  "addCluster: (cluster: Cluster) => void;",
                  "deleteCluster: (cluster: Cluster) => void;",
                  "setCluster: (cluster: Cluster) => void;",
                  "getExplorerUrl(path: string): string;",
                  "}",
                  "const Context = createContext<ClusterProviderContext>(",
                  "{} as ClusterProviderContext",
                  ");",
                  "export function ClusterProvider({ children }: { children: ReactNode }) {",
                  "const cluster = useAtomValue(activeClusterAtom);",
                  "const clusters = useAtomValue(activeClustersAtom);",
                  "const setCluster = useSetAtom(clusterAtom);",
                  "const setClusters = useSetAtom(clustersAtom);",
                  "const value: ClusterProviderContext = {",
                  "cluster,",
                  "clusters: clusters.sort((a, b) => (a.name > b.name ? 1 : -1)),",
                  "addCluster: (cluster: Cluster) => {",
                  "try {",
                  "new Connection(cluster.endpoint);",
                  "setClusters([...clusters, cluster]);",
                  "} catch (err) {",
                  "toast.error(\`\${err}\`);",
                  "}",
                  "},",
                  "deleteCluster: (cluster: Cluster) => {",
                  "setClusters(clusters.filter((item) => item.name !== cluster.name));",
                  "},",
                  "setCluster: (cluster: Cluster) => setCluster(cluster),",
                  "getExplorerUrl: (path: string) =>",
                  "\`https://explorer.solana.com/\${path}\${getClusterUrlParam(cluster)}\`,",
                  "};",
                  "return <Context.Provider value={value}>{children}</Context.Provider>;",
                  "}",
                  "export function useCluster() {",
                  "return useContext(Context);",
                  "}",
                  "function getClusterUrlParam(cluster: Cluster): string {",
                  "let suffix = '';",
                  "switch (cluster.network) {",
                  "case ClusterNetwork.Devnet:",
                  "suffix = 'devnet';",
                  "break;",
                  "case ClusterNetwork.Mainnet:",
                  "suffix = '';",
                  "break;",
                  "case ClusterNetwork.Testnet:",
                  "suffix = 'testnet';",
                  "break;",
                  "default:",
                  "suffix = \`custom&customUrl=\${encodeURIComponent(cluster.endpoint)}\`;",
                  "break;",
                  "}",
                  "return suffix.length ? \`?cluster=\${suffix}\` : '';",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/cluster/cluster-data-access.tsx",
              },
              "cluster-feature.tsx": {
                "content": [
                  "'use client';",
                  "import { useState } from 'react';",
                  "import { AppHero } from '../ui/ui-layout';",
                  "import { ClusterUiModal } from './cluster-ui';",
                  "import { ClusterUiTable } from './cluster-ui';",
                  "export default function ClusterFeature() {",
                  "const [showModal, setShowModal] = useState(false);",
                  "return (",
                  "<div>",
                  "<AppHero",
                  "title="Clusters"",
                  "subtitle="Manage and select your Solana clusters"",
                  ">",
                  "<ClusterUiModal",
                  "show={showModal}",
                  "hideModal={() => setShowModal(false)}",
                  "/>",
                  "<button",
                  "className="btn btn-xs lg:btn-md btn-primary"",
                  "onClick={() => setShowModal(true)}",
                  ">",
                  "Add Cluster",
                  "</button>",
                  "</AppHero>",
                  "<ClusterUiTable />",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/cluster/cluster-feature.tsx",
              },
              "cluster-ui.tsx": {
                "content": [
                  "'use client';",
                  "import { useConnection } from '@solana/wallet-adapter-react';",
                  "import { IconTrash } from '@tabler/icons-react';",
                  "import { useQuery } from '@tanstack/react-query';",
                  "import { ReactNode, useState } from 'react';",
                  "import { AppModal } from '../ui/ui-layout';",
                  "import { ClusterNetwork, useCluster } from './cluster-data-access';",
                  "import { Connection } from '@solana/web3.js';",
                  "export function ExplorerLink({",
                  "path,",
                  "label,",
                  "className,",
                  "}: {",
                  "path: string;",
                  "label: string;",
                  "className?: string;",
                  "}) {",
                  "const { getExplorerUrl } = useCluster();",
                  "return (",
                  "<a",
                  "href={getExplorerUrl(path)}",
                  "target="_blank"",
                  "rel="noopener noreferrer"",
                  "className={className ? className : \`link font-mono\`}",
                  ">",
                  "{label}",
                  "</a>",
                  ");",
                  "}",
                  "export function ClusterChecker({ children }: { children: ReactNode }) {",
                  "const { cluster } = useCluster();",
                  "const { connection } = useConnection();",
                  "const query = useQuery({",
                  "queryKey: ['version', { cluster, endpoint: connection.rpcEndpoint }],",
                  "queryFn: () => connection.getVersion(),",
                  "retry: 1,",
                  "});",
                  "if (query.isLoading) {",
                  "return null;",
                  "}",
                  "if (query.isError || !query.data) {",
                  "return (",
                  "<div className="alert alert-warning text-warning-content/80 rounded-none flex justify-center">",
                  "<span>",
                  "Error connecting to cluster <strong>{cluster.name}</strong>",
                  "</span>",
                  "<button",
                  "className="btn btn-xs btn-neutral"",
                  "onClick={() => query.refetch()}",
                  ">",
                  "Refresh",
                  "</button>",
                  "</div>",
                  ");",
                  "}",
                  "return children;",
                  "}",
                  "export function ClusterUiSelect() {",
                  "const { clusters, setCluster, cluster } = useCluster();",
                  "return (",
                  "<div className="dropdown dropdown-end">",
                  "<label tabIndex={0} className="btn btn-primary rounded-btn">",
                  "{cluster.name}",
                  "</label>",
                  "<ul",
                  "tabIndex={0}",
                  "className="menu dropdown-content z-[1] p-2 shadow bg-base-100 rounded-box w-52 mt-4"",
                  ">",
                  "{clusters.map((item) => (",
                  "<li key={item.name}>",
                  "<button",
                  "className={\`btn btn-sm \${",
                  "item.active ? 'btn-primary' : 'btn-ghost'",
                  "}\`}",
                  "onClick={() => setCluster(item)}",
                  ">",
                  "{item.name}",
                  "</button>",
                  "</li>",
                  "))}",
                  "</ul>",
                  "</div>",
                  ");",
                  "}",
                  "export function ClusterUiModal({",
                  "hideModal,",
                  "show,",
                  "}: {",
                  "hideModal: () => void;",
                  "show: boolean;",
                  "}) {",
                  "const { addCluster } = useCluster();",
                  "const [name, setName] = useState('');",
                  "const [network, setNetwork] = useState<ClusterNetwork | undefined>();",
                  "const [endpoint, setEndpoint] = useState('');",
                  "return (",
                  "<AppModal",
                  "title={'Add Cluster'}",
                  "hide={hideModal}",
                  "show={show}",
                  "submit={() => {",
                  "try {",
                  "new Connection(endpoint);",
                  "if (name) {",
                  "addCluster({ name, network, endpoint });",
                  "hideModal();",
                  "} else {",
                  "console.log('Invalid cluster name');",
                  "}",
                  "} catch {",
                  "console.log('Invalid cluster endpoint');",
                  "}",
                  "}}",
                  "submitLabel="Save"",
                  ">",
                  "<input",
                  "type="text"",
                  "placeholder="Name"",
                  "className="input input-bordered w-full"",
                  "value={name}",
                  "onChange={(e) => setName(e.target.value)}",
                  "/>",
                  "<input",
                  "type="text"",
                  "placeholder="Endpoint"",
                  "className="input input-bordered w-full"",
                  "value={endpoint}",
                  "onChange={(e) => setEndpoint(e.target.value)}",
                  "/>",
                  "<select",
                  "className="select select-bordered w-full"",
                  "value={network}",
                  "onChange={(e) => setNetwork(e.target.value as ClusterNetwork)}",
                  ">",
                  "<option value={undefined}>Select a network</option>",
                  "<option value={ClusterNetwork.Devnet}>Devnet</option>",
                  "<option value={ClusterNetwork.Testnet}>Testnet</option>",
                  "<option value={ClusterNetwork.Mainnet}>Mainnet</option>",
                  "</select>",
                  "</AppModal>",
                  ");",
                  "}",
                  "export function ClusterUiTable() {",
                  "const { clusters, setCluster, deleteCluster } = useCluster();",
                  "return (",
                  "<div className="overflow-x-auto">",
                  "<table className="table border-4 border-separate border-base-300">",
                  "<thead>",
                  "<tr>",
                  "<th>Name/ Network / Endpoint</th>",
                  "<th className="text-center">Actions</th>",
                  "</tr>",
                  "</thead>",
                  "<tbody>",
                  "{clusters.map((item) => (",
                  "<tr key={item.name} className={item?.active ? 'bg-base-200' : ''}>",
                  "<td className="space-y-2">",
                  "<div className="whitespace-nowrap space-x-2">",
                  "<span className="text-xl">",
                  "{item?.active ? (",
                  "item.name",
                  ") : (",
                  "<button",
                  "title="Select cluster"",
                  "className="link link-secondary"",
                  "onClick={() => setCluster(item)}",
                  ">",
                  "{item.name}",
                  "</button>",
                  ")}",
                  "</span>",
                  "</div>",
                  "<span className="text-xs">",
                  "Network: {item.network ?? 'custom'}",
                  "</span>",
                  "<div className="whitespace-nowrap text-gray-500 text-xs">",
                  "{item.endpoint}",
                  "</div>",
                  "</td>",
                  "<td className="space-x-2 whitespace-nowrap text-center">",
                  "<button",
                  "disabled={item?.active}",
                  "className="btn btn-xs btn-default btn-outline"",
                  "onClick={() => {",
                  "if (!window.confirm('Are you sure?')) return;",
                  "deleteCluster(item);",
                  "}}",
                  ">",
                  "<IconTrash size={16} />",
                  "</button>",
                  "</td>",
                  "</tr>",
                  "))}",
                  "</tbody>",
                  "</table>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/cluster/cluster-ui.tsx",
              },
            },
            "path": "./test-app/components/cluster",
          },
          "dashboard": {
            "children": {
              "dashboard-feature.tsx": {
                "content": [
                  "'use client';",
                  "import { AppHero } from '../ui/ui-layout';",
                  "const links: { label: string; href: string }[] = [",
                  "{ label: 'Solana Docs', href: 'https://docs.solana.com/' },",
                  "{ label: 'Solana Faucet', href: 'https://faucet.solana.com/' },",
                  "{ label: 'Solana Cookbook', href: 'https://solanacookbook.com/' },",
                  "{ label: 'Solana Stack Overflow', href: 'https://solana.stackexchange.com/' },",
                  "{",
                  "label: 'Solana Developers GitHub',",
                  "href: 'https://github.com/solana-developers/',",
                  "},",
                  "];",
                  "export default function DashboardFeature() {",
                  "return (",
                  "<div>",
                  "<AppHero title="gm" subtitle="Say hi to your new Solana dApp." />",
                  "<div className="max-w-xl mx-auto py-6 sm:px-6 lg:px-8 text-center">",
                  "<div className="space-y-2">",
                  "<p>Here are some helpful links to get you started.</p>",
                  "{links.map((link, index) => (",
                  "<div key={index}>",
                  "<a",
                  "href={link.href}",
                  "className="link"",
                  "target="_blank"",
                  "rel="noopener noreferrer"",
                  ">",
                  "{link.label}",
                  "</a>",
                  "</div>",
                  "))}",
                  "</div>",
                  "</div>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/dashboard/dashboard-feature.tsx",
              },
            },
            "path": "./test-app/components/dashboard",
          },
          "my-program": {
            "children": {
              "my-program-data-access.tsx": {
                "content": [
                  "'use client';",
                  "import { MyProgramIDL, getMyProgramProgramId } from '@proj/anchor';",
                  "import { Program } from '@coral-xyz/anchor';",
                  "import { useConnection } from '@solana/wallet-adapter-react';",
                  "import { Cluster, Keypair, PublicKey } from '@solana/web3.js';",
                  "import { useMutation, useQuery } from '@tanstack/react-query';",
                  "import { useMemo } from 'react';",
                  "import toast from 'react-hot-toast';",
                  "import { useCluster } from '../cluster/cluster-data-access';",
                  "import { useAnchorProvider } from '../solana/solana-provider';",
                  "import { useTransactionToast } from '../ui/ui-layout';",
                  "export function useMyProgramProgram() {",
                  "const { connection } = useConnection();",
                  "const { cluster } = useCluster();",
                  "const transactionToast = useTransactionToast();",
                  "const provider = useAnchorProvider();",
                  "const programId = useMemo(",
                  "() => getMyProgramProgramId(cluster.network as Cluster),",
                  "[cluster]",
                  ");",
                  "const program = new Program(MyProgramIDL, programId, provider);",
                  "const accounts = useQuery({",
                  "queryKey: ['my-program', 'all', { cluster }],",
                  "queryFn: () => program.account.myProgram.all(),",
                  "});",
                  "const getProgramAccount = useQuery({",
                  "queryKey: ['get-program-account', { cluster }],",
                  "queryFn: () => connection.getParsedAccountInfo(programId),",
                  "});",
                  "const initialize = useMutation({",
                  "mutationKey: ['my-program', 'initialize', { cluster }],",
                  "mutationFn: (keypair: Keypair) =>",
                  "program.methods",
                  ".initialize()",
                  ".accounts({ myProgram: keypair.publicKey })",
                  ".signers([keypair])",
                  ".rpc(),",
                  "onSuccess: (signature) => {",
                  "transactionToast(signature);",
                  "return accounts.refetch();",
                  "},",
                  "onError: () => toast.error('Failed to initialize account'),",
                  "});",
                  "return {",
                  "program,",
                  "programId,",
                  "accounts,",
                  "getProgramAccount,",
                  "initialize,",
                  "};",
                  "}",
                  "export function useMyProgramProgramAccount({",
                  "account,",
                  "}: {",
                  "account: PublicKey;",
                  "}) {",
                  "const { cluster } = useCluster();",
                  "const transactionToast = useTransactionToast();",
                  "const { program, accounts } = useMyProgramProgram();",
                  "const accountQuery = useQuery({",
                  "queryKey: ['my-program', 'fetch', { cluster, account }],",
                  "queryFn: () => program.account.myProgram.fetch(account),",
                  "});",
                  "const closeMutation = useMutation({",
                  "mutationKey: ['my-program', 'close', { cluster, account }],",
                  "mutationFn: () =>",
                  "program.methods.close().accounts({ myProgram: account }).rpc(),",
                  "onSuccess: (tx) => {",
                  "transactionToast(tx);",
                  "return accounts.refetch();",
                  "},",
                  "});",
                  "const decrementMutation = useMutation({",
                  "mutationKey: ['my-program', 'decrement', { cluster, account }],",
                  "mutationFn: () =>",
                  "program.methods.decrement().accounts({ myProgram: account }).rpc(),",
                  "onSuccess: (tx) => {",
                  "transactionToast(tx);",
                  "return accountQuery.refetch();",
                  "},",
                  "});",
                  "const incrementMutation = useMutation({",
                  "mutationKey: ['my-program', 'increment', { cluster, account }],",
                  "mutationFn: () =>",
                  "program.methods.increment().accounts({ myProgram: account }).rpc(),",
                  "onSuccess: (tx) => {",
                  "transactionToast(tx);",
                  "return accountQuery.refetch();",
                  "},",
                  "});",
                  "const setMutation = useMutation({",
                  "mutationKey: ['my-program', 'set', { cluster, account }],",
                  "mutationFn: (value: number) =>",
                  "program.methods.set(value).accounts({ myProgram: account }).rpc(),",
                  "onSuccess: (tx) => {",
                  "transactionToast(tx);",
                  "return accountQuery.refetch();",
                  "},",
                  "});",
                  "return {",
                  "accountQuery,",
                  "closeMutation,",
                  "decrementMutation,",
                  "incrementMutation,",
                  "setMutation,",
                  "};",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/my-program/my-program-data-access.tsx",
              },
              "my-program-feature.tsx": {
                "content": [
                  "'use client';",
                  "import { useWallet } from '@solana/wallet-adapter-react';",
                  "import { WalletButton } from '../solana/solana-provider';",
                  "import { AppHero, ellipsify } from '../ui/ui-layout';",
                  "import { ExplorerLink } from '../cluster/cluster-ui';",
                  "import { useMyProgramProgram } from './my-program-data-access';",
                  "import { MyProgramCreate, MyProgramList } from './my-program-ui';",
                  "export default function MyProgramFeature() {",
                  "const { publicKey } = useWallet();",
                  "const { programId } = useMyProgramProgram();",
                  "return publicKey ? (",
                  "<div>",
                  "<AppHero",
                  "title="MyProgram"",
                  "subtitle={",
                  "'Create a new account by clicking the "Create" button. The state of a account is stored on-chain and can be manipulated by calling the program\\'s methods (increment, decrement, set, and close).'",
                  "}",
                  ">",
                  "<p className="mb-6">",
                  "<ExplorerLink",
                  "path={\`account/\${programId}\`}",
                  "label={ellipsify(programId.toString())}",
                  "/>",
                  "</p>",
                  "<MyProgramCreate />",
                  "</AppHero>",
                  "<MyProgramList />",
                  "</div>",
                  ") : (",
                  "<div className="max-w-4xl mx-auto">",
                  "<div className="hero py-[64px]">",
                  "<div className="hero-content text-center">",
                  "<WalletButton />",
                  "</div>",
                  "</div>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/my-program/my-program-feature.tsx",
              },
              "my-program-ui.tsx": {
                "content": [
                  "'use client';",
                  "import { Keypair, PublicKey } from '@solana/web3.js';",
                  "import { useMemo } from 'react';",
                  "import { ellipsify } from '../ui/ui-layout';",
                  "import { ExplorerLink } from '../cluster/cluster-ui';",
                  "import {",
                  "useMyProgramProgram,",
                  "useMyProgramProgramAccount,",
                  "} from './my-program-data-access';",
                  "export function MyProgramCreate() {",
                  "const { initialize } = useMyProgramProgram();",
                  "return (",
                  "<button",
                  "className="btn btn-xs lg:btn-md btn-primary"",
                  "onClick={() => initialize.mutateAsync(Keypair.generate())}",
                  "disabled={initialize.isPending}",
                  ">",
                  "Create {initialize.isPending && '...'}",
                  "</button>",
                  ");",
                  "}",
                  "export function MyProgramList() {",
                  "const { accounts, getProgramAccount } = useMyProgramProgram();",
                  "if (getProgramAccount.isLoading) {",
                  "return <span className="loading loading-spinner loading-lg"></span>;",
                  "}",
                  "if (!getProgramAccount.data?.value) {",
                  "return (",
                  "<div className="alert alert-info flex justify-center">",
                  "<span>",
                  "Program account not found. Make sure you have deployed the program and",
                  "are on the correct cluster.",
                  "</span>",
                  "</div>",
                  ");",
                  "}",
                  "return (",
                  "<div className={'space-y-6'}>",
                  "{accounts.isLoading ? (",
                  "<span className="loading loading-spinner loading-lg"></span>",
                  ") : accounts.data?.length ? (",
                  "<div className="grid md:grid-cols-2 gap-4">",
                  "{accounts.data?.map((account) => (",
                  "<MyProgramCard",
                  "key={account.publicKey.toString()}",
                  "account={account.publicKey}",
                  "/>",
                  "))}",
                  "</div>",
                  ") : (",
                  "<div className="text-center">",
                  "<h2 className={'text-2xl'}>No accounts</h2>",
                  "No accounts found. Create one above to get started.",
                  "</div>",
                  ")}",
                  "</div>",
                  ");",
                  "}",
                  "function MyProgramCard({ account }: { account: PublicKey }) {",
                  "const {",
                  "accountQuery,",
                  "incrementMutation,",
                  "setMutation,",
                  "decrementMutation,",
                  "closeMutation,",
                  "} = useMyProgramProgramAccount({ account });",
                  "const count = useMemo(",
                  "() => accountQuery.data?.count ?? 0,",
                  "[accountQuery.data?.count]",
                  ");",
                  "return accountQuery.isLoading ? (",
                  "<span className="loading loading-spinner loading-lg"></span>",
                  ") : (",
                  "<div className="card card-bordered border-base-300 border-4 text-neutral-content">",
                  "<div className="card-body items-center text-center">",
                  "<div className="space-y-6">",
                  "<h2",
                  "className="card-title justify-center text-3xl cursor-pointer"",
                  "onClick={() => accountQuery.refetch()}",
                  ">",
                  "{count}",
                  "</h2>",
                  "<div className="card-actions justify-around">",
                  "<button",
                  "className="btn btn-xs lg:btn-md btn-outline"",
                  "onClick={() => incrementMutation.mutateAsync()}",
                  "disabled={incrementMutation.isPending}",
                  ">",
                  "Increment",
                  "</button>",
                  "<button",
                  "className="btn btn-xs lg:btn-md btn-outline"",
                  "onClick={() => {",
                  "const value = window.prompt(",
                  "'Set value to:',",
                  "count.toString() ?? '0'",
                  ");",
                  "if (",
                  "!value ||",
                  "parseInt(value) === count ||",
                  "isNaN(parseInt(value))",
                  ") {",
                  "return;",
                  "}",
                  "return setMutation.mutateAsync(parseInt(value));",
                  "}}",
                  "disabled={setMutation.isPending}",
                  ">",
                  "Set",
                  "</button>",
                  "<button",
                  "className="btn btn-xs lg:btn-md btn-outline"",
                  "onClick={() => decrementMutation.mutateAsync()}",
                  "disabled={decrementMutation.isPending}",
                  ">",
                  "Decrement",
                  "</button>",
                  "</div>",
                  "<div className="text-center space-y-4">",
                  "<p>",
                  "<ExplorerLink",
                  "path={\`account/\${account}\`}",
                  "label={ellipsify(account.toString())}",
                  "/>",
                  "</p>",
                  "<button",
                  "className="btn btn-xs btn-secondary btn-outline"",
                  "onClick={() => {",
                  "if (",
                  "!window.confirm(",
                  "'Are you sure you want to close this account?'",
                  ")",
                  ") {",
                  "return;",
                  "}",
                  "return closeMutation.mutateAsync();",
                  "}}",
                  "disabled={closeMutation.isPending}",
                  ">",
                  "Close",
                  "</button>",
                  "</div>",
                  "</div>",
                  "</div>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/my-program/my-program-ui.tsx",
              },
            },
            "path": "./test-app/components/my-program",
          },
          "solana": {
            "children": {
              "solana-provider.tsx": {
                "content": [
                  "'use client';",
                  "import dynamic from 'next/dynamic';",
                  "import { AnchorProvider } from '@coral-xyz/anchor';",
                  "import { WalletError } from '@solana/wallet-adapter-base';",
                  "import {",
                  "AnchorWallet,",
                  "useConnection,",
                  "useWallet,",
                  "ConnectionProvider,",
                  "WalletProvider,",
                  "} from '@solana/wallet-adapter-react';",
                  "import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';",
                  "import { ReactNode, useCallback, useMemo } from 'react';",
                  "import { useCluster } from '../cluster/cluster-data-access';",
                  "require('@solana/wallet-adapter-react-ui/styles.css');",
                  "export const WalletButton = dynamic(",
                  "async () =>",
                  "(await import('@solana/wallet-adapter-react-ui')).WalletMultiButton,",
                  "{ ssr: false }",
                  ");",
                  "export function SolanaProvider({ children }: { children: ReactNode }) {",
                  "const { cluster } = useCluster();",
                  "const endpoint = useMemo(() => cluster.endpoint, [cluster]);",
                  "const onError = useCallback((error: WalletError) => {",
                  "console.error(error);",
                  "}, []);",
                  "return (",
                  "<ConnectionProvider endpoint={endpoint}>",
                  "<WalletProvider wallets={[]} onError={onError} autoConnect={true}>",
                  "<WalletModalProvider>{children}</WalletModalProvider>",
                  "</WalletProvider>",
                  "</ConnectionProvider>",
                  ");",
                  "}",
                  "export function useAnchorProvider() {",
                  "const { connection } = useConnection();",
                  "const wallet = useWallet();",
                  "return new AnchorProvider(connection, wallet as AnchorWallet, {",
                  "commitment: 'confirmed',",
                  "});",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/solana/solana-provider.tsx",
              },
            },
            "path": "./test-app/components/solana",
          },
          "ui": {
            "children": {
              "ui-layout.tsx": {
                "content": [
                  "'use client';",
                  "import { WalletButton } from '../solana/solana-provider';",
                  "import * as React from 'react';",
                  "import { ReactNode, Suspense, useEffect, useRef } from 'react';",
                  "import Link from 'next/link';",
                  "import { usePathname } from 'next/navigation';",
                  "import { AccountChecker } from '../account/account-ui';",
                  "import {",
                  "ClusterChecker,",
                  "ClusterUiSelect,",
                  "ExplorerLink,",
                  "} from '../cluster/cluster-ui';",
                  "import toast, { Toaster } from 'react-hot-toast';",
                  "export function UiLayout({",
                  "children,",
                  "links,",
                  "}: {",
                  "children: ReactNode;",
                  "links: { label: string; path: string }[];",
                  "}) {",
                  "const pathname = usePathname();",
                  "return (",
                  "<div className="h-full flex flex-col">",
                  "<div className="navbar bg-base-300 text-neutral-content flex-col md:flex-row space-y-2 md:space-y-0">",
                  "<div className="flex-1">",
                  "<Link className="btn btn-ghost normal-case text-xl" href="/">",
                  "<img",
                  "className="h-4 md:h-6"",
                  "alt="Solana Logo"",
                  "src="/solana-logo.png"",
                  "/>",
                  "</Link>",
                  "<ul className="menu menu-horizontal px-1 space-x-2">",
                  "{links.map(({ label, path }) => (",
                  "<li key={path}>",
                  "<Link",
                  "className={pathname.startsWith(path) ? 'active' : ''}",
                  "href={path}",
                  ">",
                  "{label}",
                  "</Link>",
                  "</li>",
                  "))}",
                  "</ul>",
                  "</div>",
                  "<div className="flex-none space-x-2">",
                  "<WalletButton />",
                  "<ClusterUiSelect />",
                  "</div>",
                  "</div>",
                  "<ClusterChecker>",
                  "<AccountChecker />",
                  "</ClusterChecker>",
                  "<div className="flex-grow mx-4 lg:mx-auto">",
                  "<Suspense",
                  "fallback={",
                  "<div className="text-center my-32">",
                  "<span className="loading loading-spinner loading-lg"></span>",
                  "</div>",
                  "}",
                  ">",
                  "{children}",
                  "</Suspense>",
                  "<Toaster position="bottom-right" />",
                  "</div>",
                  "<footer className="footer footer-center p-4 bg-base-300 text-base-content">",
                  "<aside>",
                  "<p>",
                  "Generated by{' '}",
                  "<a",
                  "className="link hover:text-white"",
                  "href="https://github.com/solana-developers/create-solana-dapp"",
                  "target="_blank"",
                  "rel="noopener noreferrer"",
                  ">",
                  "create-solana-dapp",
                  "</a>",
                  "</p>",
                  "</aside>",
                  "</footer>",
                  "</div>",
                  ");",
                  "}",
                  "export function AppModal({",
                  "children,",
                  "title,",
                  "hide,",
                  "show,",
                  "submit,",
                  "submitDisabled,",
                  "submitLabel,",
                  "}: {",
                  "children: ReactNode;",
                  "title: string;",
                  "hide: () => void;",
                  "show: boolean;",
                  "submit?: () => void;",
                  "submitDisabled?: boolean;",
                  "submitLabel?: string;",
                  "}) {",
                  "const dialogRef = useRef<HTMLDialogElement | null>(null);",
                  "useEffect(() => {",
                  "if (!dialogRef.current) return;",
                  "if (show) {",
                  "dialogRef.current.showModal();",
                  "} else {",
                  "dialogRef.current.close();",
                  "}",
                  "}, [show, dialogRef]);",
                  "return (",
                  "<dialog className="modal" ref={dialogRef}>",
                  "<div className="modal-box space-y-5">",
                  "<h3 className="font-bold text-lg">{title}</h3>",
                  "{children}",
                  "<div className="modal-action">",
                  "<div className="join space-x-2">",
                  "{submit ? (",
                  "<button",
                  "className="btn btn-xs lg:btn-md btn-primary"",
                  "onClick={submit}",
                  "disabled={submitDisabled}",
                  ">",
                  "{submitLabel || 'Save'}",
                  "</button>",
                  ") : null}",
                  "<button onClick={hide} className="btn">",
                  "Close",
                  "</button>",
                  "</div>",
                  "</div>",
                  "</div>",
                  "</dialog>",
                  ");",
                  "}",
                  "export function AppHero({",
                  "children,",
                  "title,",
                  "subtitle,",
                  "}: {",
                  "children?: ReactNode;",
                  "title: ReactNode;",
                  "subtitle: ReactNode;",
                  "}) {",
                  "return (",
                  "<div className="hero py-[64px]">",
                  "<div className="hero-content text-center">",
                  "<div className="max-w-2xl">",
                  "{typeof title === 'string' ? (",
                  "<h1 className="text-5xl font-bold">{title}</h1>",
                  ") : (",
                  "title",
                  ")}",
                  "{typeof subtitle === 'string' ? (",
                  "<p className="py-6">{subtitle}</p>",
                  ") : (",
                  "subtitle",
                  ")}",
                  "{children}",
                  "</div>",
                  "</div>",
                  "</div>",
                  ");",
                  "}",
                  "export function ellipsify(str = '', len = 4) {",
                  "if (str.length > 30) {",
                  "return (",
                  "str.substring(0, len) + '..' + str.substring(str.length - len, str.length)",
                  ");",
                  "}",
                  "return str;",
                  "}",
                  "export function useTransactionToast() {",
                  "return (signature: string) => {",
                  "toast.success(",
                  "<div className={'text-center'}>",
                  "<div className="text-lg">Transaction sent</div>",
                  "<ExplorerLink",
                  "path={\`tx/\${signature}\`}",
                  "label={'View Transaction'}",
                  "className="btn btn-xs btn-primary"",
                  "/>",
                  "</div>",
                  ");",
                  "};",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/components/ui/ui-layout.tsx",
              },
            },
            "path": "./test-app/components/ui",
          },
        },
        "path": "./test-app/components",
      },
      "index.d.ts": {
        "content": [
          "/* eslint-disable @typescript-eslint/no-explicit-any */",
          "declare module '*.svg' {",
          "const content: any;",
          "export const ReactComponent: any;",
          "export default content;",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/index.d.ts",
      },
      "next-env.d.ts": {
        "content": [
          "/// <reference types="next" />",
          "/// <reference types="next/image-types/global" />",
          "// NOTE: This file should not be edited",
          "// see https://nextjs.org/docs/basic-features/typescript for more information.",
        ],
        "isBinary": false,
        "path": "./test-app/next-env.d.ts",
      },
      "next.config.js": {
        "content": [
          "//@ts-check",
          "// eslint-disable-next-line @typescript-eslint/no-var-requires",
          "const { composePlugins, withNx } = require('@nx/next');",
          "/**",
          "* @type {import('@nx/next/plugins/with-nx').WithNxOptions}",
          "**/",
          "const nextConfig = {",
          "webpack: (config) => {",
          "config.externals = [",
          "...(config.externals || []),",
          "'bigint',",
          "'node-gyp-build',",
          "];",
          "return config;",
          "},",
          "nx: {",
          "// Set this to true if you would like to use SVGR",
          "// See: https://github.com/gregberge/svgr",
          "svgr: false,",
          "},",
          "};",
          "const plugins = [",
          "// Add more Next.js plugins to this list if needed.",
          "withNx,",
          "];",
          "module.exports = composePlugins(...plugins)(nextConfig);",
        ],
        "isBinary": false,
        "path": "./test-app/next.config.js",
      },
      "postcss.config.js": {
        "content": [
          "const { join } = require('path');",
          "// Note: If you use library-specific PostCSS/Tailwind configuration then you should remove the \`postcssConfig\` build",
          "// option from your application's configuration (i.e. project.json).",
          "//",
          "// See: https://nx.dev/guides/using-tailwind-css-in-react#step-4:-applying-configuration-to-libraries",
          "module.exports = {",
          "plugins: {",
          "tailwindcss: {",
          "config: join(__dirname, 'tailwind.config.js'),",
          "},",
          "autoprefixer: {},",
          "},",
          "};",
        ],
        "isBinary": false,
        "path": "./test-app/postcss.config.js",
      },
      "project.json": {
        "content": [
          "{",
          ""name": "test-app",",
          ""$schema": "../node_modules/nx/schemas/project-schema.json",",
          ""sourceRoot": "test-app",",
          ""projectType": "application",",
          ""targets": {",
          ""build": {",
          ""executor": "@nx/next:build",",
          ""outputs": ["{options.outputPath}"],",
          ""defaultConfiguration": "production",",
          ""options": {",
          ""outputPath": "dist/test-app"",
          "},",
          ""configurations": {",
          ""development": {",
          ""outputPath": "test-app"",
          "},",
          ""production": {}",
          "}",
          "},",
          ""serve": {",
          ""executor": "@nx/next:server",",
          ""defaultConfiguration": "development",",
          ""options": {",
          ""buildTarget": "test-app:build",",
          ""dev": true,",
          ""port": 3000",
          "},",
          ""configurations": {",
          ""development": {",
          ""buildTarget": "test-app:build:development",",
          ""dev": true",
          "},",
          ""production": {",
          ""buildTarget": "test-app:build:production",",
          ""dev": false",
          "}",
          "}",
          "},",
          ""export": {",
          ""executor": "@nx/next:export",",
          ""options": {",
          ""buildTarget": "test-app:build:production"",
          "}",
          "},",
          ""lint": {",
          ""executor": "@nx/eslint:lint"",
          "}",
          "},",
          ""tags": []",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/project.json",
      },
      "public": {
        "children": {
          ".gitkeep": {
            "content": [],
            "isBinary": false,
            "path": "./test-app/public/.gitkeep",
          },
          "favicon.ico": {
            "content": null,
            "isBinary": true,
            "path": "./test-app/public/favicon.ico",
          },
          "solana-logo.png": {
            "content": null,
            "isBinary": true,
            "path": "./test-app/public/solana-logo.png",
          },
        },
        "path": "./test-app/public",
      },
      "src": {
        "children": {
          "app": {
            "children": {
              "api": {
                "children": {
                  "hello": {
                    "children": {
                      "route.ts": {
                        "content": [
                          "export async function GET(request: Request) {",
                          "return new Response('Hello, from API!');",
                          "}",
                        ],
                        "isBinary": false,
                        "path": "./test-app/src/app/api/hello/route.ts",
                      },
                    },
                    "path": "./test-app/src/app/api/hello",
                  },
                },
                "path": "./test-app/src/app/api",
              },
              "global.css": {
                "content": [
                  "html {",
                  "-webkit-text-size-adjust: 100%;",
                  "font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont,",
                  "Segoe UI, Roboto, Helvetica Neue, Arial, Noto Sans, sans-serif,",
                  "Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji;",
                  "line-height: 1.5;",
                  "tab-size: 4;",
                  "scroll-behavior: smooth;",
                  "}",
                  "body {",
                  "font-family: inherit;",
                  "line-height: inherit;",
                  "margin: 0;",
                  "}",
                  "h1,",
                  "h2,",
                  "p,",
                  "pre {",
                  "margin: 0;",
                  "}",
                  "*,",
                  "::before,",
                  "::after {",
                  "box-sizing: border-box;",
                  "border-width: 0;",
                  "border-style: solid;",
                  "border-color: currentColor;",
                  "}",
                  "h1,",
                  "h2 {",
                  "font-size: inherit;",
                  "font-weight: inherit;",
                  "}",
                  "a {",
                  "color: inherit;",
                  "text-decoration: inherit;",
                  "}",
                  "pre {",
                  "font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,",
                  "Liberation Mono, Courier New, monospace;",
                  "}",
                  "svg {",
                  "display: block;",
                  "vertical-align: middle;",
                  "shape-rendering: auto;",
                  "text-rendering: optimizeLegibility;",
                  "}",
                  "pre {",
                  "background-color: rgba(55, 65, 81, 1);",
                  "border-radius: 0.25rem;",
                  "color: rgba(229, 231, 235, 1);",
                  "font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,",
                  "Liberation Mono, Courier New, monospace;",
                  "overflow: scroll;",
                  "padding: 0.5rem 0.75rem;",
                  "}",
                  ".shadow {",
                  "box-shadow: 0 0 #0000, 0 0 #0000, 0 10px 15px -3px rgba(0, 0, 0, 0.1),",
                  "0 4px 6px -2px rgba(0, 0, 0, 0.05);",
                  "}",
                  ".rounded {",
                  "border-radius: 1.5rem;",
                  "}",
                  ".wrapper {",
                  "width: 100%;",
                  "}",
                  ".container {",
                  "margin-left: auto;",
                  "margin-right: auto;",
                  "max-width: 768px;",
                  "padding-bottom: 3rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "color: rgba(55, 65, 81, 1);",
                  "width: 100%;",
                  "}",
                  "#welcome {",
                  "margin-top: 2.5rem;",
                  "}",
                  "#welcome h1 {",
                  "font-size: 3rem;",
                  "font-weight: 500;",
                  "letter-spacing: -0.025em;",
                  "line-height: 1;",
                  "}",
                  "#welcome span {",
                  "display: block;",
                  "font-size: 1.875rem;",
                  "font-weight: 300;",
                  "line-height: 2.25rem;",
                  "margin-bottom: 0.5rem;",
                  "}",
                  "#hero {",
                  "align-items: center;",
                  "background-color: hsla(214, 62%, 21%, 1);",
                  "border: none;",
                  "box-sizing: border-box;",
                  "color: rgba(55, 65, 81, 1);",
                  "display: grid;",
                  "grid-template-columns: 1fr;",
                  "margin-top: 3.5rem;",
                  "}",
                  "#hero .text-container {",
                  "color: rgba(255, 255, 255, 1);",
                  "padding: 3rem 2rem;",
                  "}",
                  "#hero .text-container h2 {",
                  "font-size: 1.5rem;",
                  "line-height: 2rem;",
                  "position: relative;",
                  "}",
                  "#hero .text-container h2 svg {",
                  "color: hsla(162, 47%, 50%, 1);",
                  "height: 2rem;",
                  "left: -0.25rem;",
                  "position: absolute;",
                  "top: 0;",
                  "width: 2rem;",
                  "}",
                  "#hero .text-container h2 span {",
                  "margin-left: 2.5rem;",
                  "}",
                  "#hero .text-container a {",
                  "background-color: rgba(255, 255, 255, 1);",
                  "border-radius: 0.75rem;",
                  "color: rgba(55, 65, 81, 1);",
                  "display: inline-block;",
                  "margin-top: 1.5rem;",
                  "padding: 1rem 2rem;",
                  "text-decoration: inherit;",
                  "}",
                  "#hero .logo-container {",
                  "display: none;",
                  "justify-content: center;",
                  "padding-left: 2rem;",
                  "padding-right: 2rem;",
                  "}",
                  "#hero .logo-container svg {",
                  "color: rgba(255, 255, 255, 1);",
                  "width: 66.666667%;",
                  "}",
                  "#middle-content {",
                  "align-items: flex-start;",
                  "display: grid;",
                  "gap: 4rem;",
                  "grid-template-columns: 1fr;",
                  "margin-top: 3.5rem;",
                  "}",
                  "#learning-materials {",
                  "padding: 2.5rem 2rem;",
                  "}",
                  "#learning-materials h2 {",
                  "font-weight: 500;",
                  "font-size: 1.25rem;",
                  "letter-spacing: -0.025em;",
                  "line-height: 1.75rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "}",
                  ".list-item-link {",
                  "align-items: center;",
                  "border-radius: 0.75rem;",
                  "display: flex;",
                  "margin-top: 1rem;",
                  "padding: 1rem;",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "width: 100%;",
                  "}",
                  ".list-item-link svg:first-child {",
                  "margin-right: 1rem;",
                  "height: 1.5rem;",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "width: 1.5rem;",
                  "}",
                  ".list-item-link > span {",
                  "flex-grow: 1;",
                  "font-weight: 400;",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "}",
                  ".list-item-link > span > span {",
                  "color: rgba(107, 114, 128, 1);",
                  "display: block;",
                  "flex-grow: 1;",
                  "font-size: 0.75rem;",
                  "font-weight: 300;",
                  "line-height: 1rem;",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "}",
                  ".list-item-link svg:last-child {",
                  "height: 1rem;",
                  "transition-property: all;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "width: 1rem;",
                  "}",
                  ".list-item-link:hover {",
                  "color: rgba(255, 255, 255, 1);",
                  "background-color: hsla(162, 47%, 50%, 1);",
                  "}",
                  ".list-item-link:hover > span {",
                  "}",
                  ".list-item-link:hover > span > span {",
                  "color: rgba(243, 244, 246, 1);",
                  "}",
                  ".list-item-link:hover svg:last-child {",
                  "transform: translateX(0.25rem);",
                  "}",
                  "#other-links {",
                  "}",
                  ".button-pill {",
                  "padding: 1.5rem 2rem;",
                  "transition-duration: 300ms;",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "align-items: center;",
                  "display: flex;",
                  "}",
                  ".button-pill svg {",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "flex-shrink: 0;",
                  "width: 3rem;",
                  "}",
                  ".button-pill > span {",
                  "letter-spacing: -0.025em;",
                  "font-weight: 400;",
                  "font-size: 1.125rem;",
                  "line-height: 1.75rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "}",
                  ".button-pill span span {",
                  "display: block;",
                  "font-size: 0.875rem;",
                  "font-weight: 300;",
                  "line-height: 1.25rem;",
                  "}",
                  ".button-pill:hover svg,",
                  ".button-pill:hover {",
                  "color: rgba(255, 255, 255, 1) !important;",
                  "}",
                  "#nx-console:hover {",
                  "background-color: rgba(0, 122, 204, 1);",
                  "}",
                  "#nx-console svg {",
                  "color: rgba(0, 122, 204, 1);",
                  "}",
                  "#nx-console-jetbrains {",
                  "margin-top: 2rem;",
                  "}",
                  "#nx-console-jetbrains:hover {",
                  "background-color: rgba(255, 49, 140, 1);",
                  "}",
                  "#nx-console-jetbrains svg {",
                  "color: rgba(255, 49, 140, 1);",
                  "}",
                  "#nx-repo:hover {",
                  "background-color: rgba(24, 23, 23, 1);",
                  "}",
                  "#nx-repo svg {",
                  "color: rgba(24, 23, 23, 1);",
                  "}",
                  "#nx-cloud {",
                  "margin-bottom: 2rem;",
                  "margin-top: 2rem;",
                  "padding: 2.5rem 2rem;",
                  "}",
                  "#nx-cloud > div {",
                  "align-items: center;",
                  "display: flex;",
                  "}",
                  "#nx-cloud > div svg {",
                  "border-radius: 0.375rem;",
                  "flex-shrink: 0;",
                  "width: 3rem;",
                  "}",
                  "#nx-cloud > div h2 {",
                  "font-size: 1.125rem;",
                  "font-weight: 400;",
                  "letter-spacing: -0.025em;",
                  "line-height: 1.75rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "}",
                  "#nx-cloud > div h2 span {",
                  "display: block;",
                  "font-size: 0.875rem;",
                  "font-weight: 300;",
                  "line-height: 1.25rem;",
                  "}",
                  "#nx-cloud p {",
                  "font-size: 1rem;",
                  "line-height: 1.5rem;",
                  "margin-top: 1rem;",
                  "}",
                  "#nx-cloud pre {",
                  "margin-top: 1rem;",
                  "}",
                  "#nx-cloud a {",
                  "color: rgba(107, 114, 128, 1);",
                  "display: block;",
                  "font-size: 0.875rem;",
                  "line-height: 1.25rem;",
                  "margin-top: 1.5rem;",
                  "text-align: right;",
                  "}",
                  "#nx-cloud a:hover {",
                  "text-decoration: underline;",
                  "}",
                  "#commands {",
                  "padding: 2.5rem 2rem;",
                  "margin-top: 3.5rem;",
                  "}",
                  "#commands h2 {",
                  "font-size: 1.25rem;",
                  "font-weight: 400;",
                  "letter-spacing: -0.025em;",
                  "line-height: 1.75rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "}",
                  "#commands p {",
                  "font-size: 1rem;",
                  "font-weight: 300;",
                  "line-height: 1.5rem;",
                  "margin-top: 1rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "}",
                  "details {",
                  "align-items: center;",
                  "display: flex;",
                  "margin-top: 1rem;",
                  "padding-left: 1rem;",
                  "padding-right: 1rem;",
                  "width: 100%;",
                  "}",
                  "details pre > span {",
                  "color: rgba(181, 181, 181, 1);",
                  "display: block;",
                  "}",
                  "summary {",
                  "border-radius: 0.5rem;",
                  "display: flex;",
                  "font-weight: 400;",
                  "padding: 0.5rem;",
                  "cursor: pointer;",
                  "transition-property: background-color, border-color, color, fill, stroke,",
                  "opacity, box-shadow, transform, filter, backdrop-filter,",
                  "-webkit-backdrop-filter;",
                  "transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);",
                  "transition-duration: 150ms;",
                  "}",
                  "summary:hover {",
                  "background-color: rgba(243, 244, 246, 1);",
                  "}",
                  "summary svg {",
                  "height: 1.5rem;",
                  "margin-right: 1rem;",
                  "width: 1.5rem;",
                  "}",
                  "#love {",
                  "color: rgba(107, 114, 128, 1);",
                  "font-size: 0.875rem;",
                  "line-height: 1.25rem;",
                  "margin-top: 3.5rem;",
                  "opacity: 0.6;",
                  "text-align: center;",
                  "}",
                  "#love svg {",
                  "color: rgba(252, 165, 165, 1);",
                  "width: 1.25rem;",
                  "height: 1.25rem;",
                  "display: inline;",
                  "margin-top: -0.25rem;",
                  "}",
                  "@media screen and (min-width: 768px) {",
                  "#hero {",
                  "grid-template-columns: repeat(2, minmax(0, 1fr));",
                  "}",
                  "#hero .logo-container {",
                  "display: flex;",
                  "}",
                  "#middle-content {",
                  "grid-template-columns: repeat(2, minmax(0, 1fr));",
                  "}",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/global.css",
              },
              "layout.tsx": {
                "content": [
                  "import './global.css';",
                  "export const metadata = {",
                  "title: 'Welcome to test-app',",
                  "description: 'Generated by create-nx-workspace',",
                  "};",
                  "export default function RootLayout({",
                  "children,",
                  "}: {",
                  "children: React.ReactNode;",
                  "}) {",
                  "return (",
                  "<html lang="en">",
                  "<body>{children}</body>",
                  "</html>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/layout.tsx",
              },
              "page.module.css": {
                "content": [
                  ".page {",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/page.module.css",
              },
              "page.tsx": {
                "content": [
                  "import styles from './page.module.css';",
                  "export default function Index() {",
                  "/*",
                  "* Replace the elements below with your own.",
                  "*",
                  "* Note: The corresponding styles are in the ./index.css file.",
                  "*/",
                  "return (",
                  "<div className={styles.page}>",
                  "<div className="wrapper">",
                  "<div className="container">",
                  "<div id="welcome">",
                  "<h1>",
                  "<span> Hello there, </span>",
                  "Welcome test-app 👋",
                  "</h1>",
                  "</div>",
                  "<div id="hero" className="rounded">",
                  "<div className="text-container">",
                  "<h2>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"",
                  "/>",
                  "</svg>",
                  "<span>You&apos;re up and running</span>",
                  "</h2>",
                  "<a href="#commands"> What&apos;s next? </a>",
                  "</div>",
                  "<div className="logo-container">",
                  "<svg",
                  "fill="currentColor"",
                  "role="img"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path d="M11.987 14.138l-3.132 4.923-5.193-8.427-.012 8.822H0V4.544h3.691l5.247 8.833.005-3.998 3.044 4.759zm.601-5.761c.024-.048 0-3.784.008-3.833h-3.65c.002.059-.005 3.776-.003 3.833h3.645zm5.634 4.134a2.061 2.061 0 0 0-1.969 1.336 1.963 1.963 0 0 1 2.343-.739c.396.161.917.422 1.33.283a2.1 2.1 0 0 0-1.704-.88zm3.39 1.061c-.375-.13-.8-.277-1.109-.681-.06-.08-.116-.17-.176-.265a2.143 2.143 0 0 0-.533-.642c-.294-.216-.68-.322-1.18-.322a2.482 2.482 0 0 0-2.294 1.536 2.325 2.325 0 0 1 4.002.388.75.75 0 0 0 .836.334c.493-.105.46.36 1.203.518v-.133c-.003-.446-.246-.55-.75-.733zm2.024 1.266a.723.723 0 0 0 .347-.638c-.01-2.957-2.41-5.487-5.37-5.487a5.364 5.364 0 0 0-4.487 2.418c-.01-.026-1.522-2.39-1.538-2.418H8.943l3.463 5.423-3.379 5.32h3.54l1.54-2.366 1.568 2.366h3.541l-3.21-5.052a.7.7 0 0 1-.084-.32 2.69 2.69 0 0 1 2.69-2.691h.001c1.488 0 1.736.89 2.057 1.308.634.826 1.9.464 1.9 1.541a.707.707 0 0 0 1.066.596zm.35.133c-.173.372-.56.338-.755.639-.176.271.114.412.114.412s.337.156.538-.311c.104-.231.14-.488.103-.74z" />",
                  "</svg>",
                  "</div>",
                  "</div>",
                  "<div id="middle-content">",
                  "<div id="learning-materials" className="rounded shadow">",
                  "<h2>Learning materials</h2>",
                  "<a",
                  "href="https://nx.dev/getting-started/intro?utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  "className="list-item-link"",
                  ">",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"",
                  "/>",
                  "</svg>",
                  "<span>",
                  "Documentation",
                  "<span> Everything is in there </span>",
                  "</span>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M9 5l7 7-7 7"",
                  "/>",
                  "</svg>",
                  "</a>",
                  "<a",
                  "href="https://blog.nrwl.io/?utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  "className="list-item-link"",
                  ">",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9a2 2 0 00-2-2h-2m-4-3H9M7 16h6M7 8h6v4H7V8z"",
                  "/>",
                  "</svg>",
                  "<span>",
                  "Blog",
                  "<span> Changelog, features & events </span>",
                  "</span>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M9 5l7 7-7 7"",
                  "/>",
                  "</svg>",
                  "</a>",
                  "<a",
                  "href="https://www.youtube.com/@NxDevtools/videos?utm_source=nx-project&sub_confirmation=1"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  "className="list-item-link"",
                  ">",
                  "<svg",
                  "role="img"",
                  "viewBox="0 0 24 24"",
                  "fill="currentColor"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<title>YouTube</title>",
                  "<path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z" />",
                  "</svg>",
                  "<span>",
                  "YouTube channel",
                  "<span> Nx Show, talks & tutorials </span>",
                  "</span>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M9 5l7 7-7 7"",
                  "/>",
                  "</svg>",
                  "</a>",
                  "<a",
                  "href="https://nx.dev/react-tutorial/1-code-generation?utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  "className="list-item-link"",
                  ">",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M15 15l-2 5L9 9l11 4-5 2zm0 0l5 5M7.188 2.239l.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656l-2.12 2.122"",
                  "/>",
                  "</svg>",
                  "<span>",
                  "Interactive tutorials",
                  "<span> Create an app, step-by-step </span>",
                  "</span>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M9 5l7 7-7 7"",
                  "/>",
                  "</svg>",
                  "</a>",
                  "<a",
                  "href="https://nxplaybook.com/?utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  "className="list-item-link"",
                  ">",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path d="M12 14l9-5-9-5-9 5 9 5z" />",
                  "<path d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z" />",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222"",
                  "/>",
                  "</svg>",
                  "<span>",
                  "Video courses",
                  "<span> Nx custom courses </span>",
                  "</span>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M9 5l7 7-7 7"",
                  "/>",
                  "</svg>",
                  "</a>",
                  "</div>",
                  "<div id="other-links">",
                  "<a",
                  "id="nx-console"",
                  "className="button-pill rounded shadow"",
                  "href="https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console&utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  ">",
                  "<svg",
                  "fill="currentColor"",
                  "role="img"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<title>Visual Studio Code</title>",
                  "<path d="M23.15 2.587L18.21.21a1.494 1.494 0 0 0-1.705.29l-9.46 8.63-4.12-3.128a.999.999 0 0 0-1.276.057L.327 7.261A1 1 0 0 0 .326 8.74L3.899 12 .326 15.26a1 1 0 0 0 .001 1.479L1.65 17.94a.999.999 0 0 0 1.276.057l4.12-3.128 9.46 8.63a1.492 1.492 0 0 0 1.704.29l4.942-2.377A1.5 1.5 0 0 0 24 20.06V3.939a1.5 1.5 0 0 0-.85-1.352zm-5.146 14.861L10.826 12l7.178-5.448v10.896z" />",
                  "</svg>",
                  "<span>",
                  "Install Nx Console for VSCode",
                  "<span>The official VSCode extension for Nx.</span>",
                  "</span>",
                  "</a>",
                  "<a",
                  "id="nx-console-jetbrains"",
                  "className="button-pill rounded shadow"",
                  "href="https://plugins.jetbrains.com/plugin/21060-nx-console"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  ">",
                  "<svg",
                  "height="48"",
                  "width="48"",
                  "viewBox="20 20 60 60"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path d="m22.5 22.5h60v60h-60z" />",
                  "<g fill="#fff">",
                  "<path d="m29.03 71.25h22.5v3.75h-22.5z" />",
                  "<path d="m28.09 38 1.67-1.58a1.88 1.88 0 0 0 1.47.87c.64 0 1.06-.44 1.06-1.31v-5.98h2.58v6a3.48 3.48 0 0 1 -.87 2.6 3.56 3.56 0 0 1 -2.57.95 3.84 3.84 0 0 1 -3.34-1.55z" />",
                  "<path d="m36 30h7.53v2.19h-5v1.44h4.49v2h-4.42v1.49h5v2.21h-7.6z" />",
                  "<path d="m47.23 32.29h-2.8v-2.29h8.21v2.27h-2.81v7.1h-2.6z" />",
                  "<path d="m29.13 43.08h4.42a3.53 3.53 0 0 1 2.55.83 2.09 2.09 0 0 1 .6 1.53 2.16 2.16 0 0 1 -1.44 2.09 2.27 2.27 0 0 1 1.86 2.29c0 1.61-1.31 2.59-3.55 2.59h-4.44zm5 2.89c0-.52-.42-.8-1.18-.8h-1.29v1.64h1.24c.79 0 1.25-.26 1.25-.81zm-.9 2.66h-1.57v1.73h1.62c.8 0 1.24-.31 1.24-.86 0-.5-.4-.87-1.27-.87z" />",
                  "<path d="m38 43.08h4.1a4.19 4.19 0 0 1 3 1 2.93 2.93 0 0 1 .9 2.19 3 3 0 0 1 -1.93 2.89l2.24 3.27h-3l-1.88-2.84h-.87v2.84h-2.56zm4 4.5c.87 0 1.39-.43 1.39-1.11 0-.75-.54-1.12-1.4-1.12h-1.44v2.26z" />",
                  "<path d="m49.59 43h2.5l4 9.44h-2.79l-.67-1.69h-3.63l-.67 1.69h-2.71zm2.27 5.73-1-2.65-1.06 2.65z" />",
                  "<path d="m56.46 43.05h2.6v9.37h-2.6z" />",
                  "<path d="m60.06 43.05h2.42l3.37 5v-5h2.57v9.37h-2.26l-3.53-5.14v5.14h-2.57z" />",
                  "<path d="m68.86 51 1.45-1.73a4.84 4.84 0 0 0 3 1.13c.71 0 1.08-.24 1.08-.65 0-.4-.31-.6-1.59-.91-2-.46-3.53-1-3.53-2.93 0-1.74 1.37-3 3.62-3a5.89 5.89 0 0 1 3.86 1.25l-1.26 1.84a4.63 4.63 0 0 0 -2.62-.92c-.63 0-.94.25-.94.6 0 .42.32.61 1.63.91 2.14.46 3.44 1.16 3.44 2.91 0 1.91-1.51 3-3.79 3a6.58 6.58 0 0 1 -4.35-1.5z" />",
                  "</g>",
                  "</svg>",
                  "<span>",
                  "Install Nx Console for JetBrains",
                  "<span>",
                  "Available for WebStorm, Intellij IDEA Ultimate and more!",
                  "</span>",
                  "</span>",
                  "</a>",
                  "<div id="nx-cloud" className="rounded shadow">",
                  "<div>",
                  "<svg",
                  "id="nx-cloud-logo"",
                  "role="img"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  "stroke="currentColor"",
                  "fill="transparent"",
                  "viewBox="0 0 24 24"",
                  ">",
                  "<path",
                  "strokeWidth="2"",
                  "d="M23 3.75V6.5c-3.036 0-5.5 2.464-5.5 5.5s-2.464 5.5-5.5 5.5-5.5 2.464-5.5 5.5H3.75C2.232 23 1 21.768 1 20.25V3.75C1 2.232 2.232 1 3.75 1h16.5C21.768 1 23 2.232 23 3.75Z"",
                  "/>",
                  "<path",
                  "strokeWidth="2"",
                  "d="M23 6v14.1667C23 21.7307 21.7307 23 20.1667 23H6c0-3.128 2.53867-5.6667 5.6667-5.6667 3.128 0 5.6666-2.5386 5.6666-5.6666C17.3333 8.53867 19.872 6 23 6Z"",
                  "/>",
                  "</svg>",
                  "<h2>",
                  "Nx Cloud",
                  "<span>Enable faster CI & better DX</span>",
                  "</h2>",
                  "</div>",
                  "<p>",
                  "You can activate distributed tasks executions and caching by",
                  "running:",
                  "</p>",
                  "<pre>nx connect</pre>",
                  "<a",
                  "href="https://nx.app/?utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  ">",
                  "{' '}",
                  "What is Nx Cloud?{' '}",
                  "</a>",
                  "</div>",
                  "<a",
                  "id="nx-repo"",
                  "className="button-pill rounded shadow"",
                  "href="https://github.com/nrwl/nx?utm_source=nx-project"",
                  "target="_blank"",
                  "rel="noreferrer"",
                  ">",
                  "<svg",
                  "fill="currentColor"",
                  "role="img"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" />",
                  "</svg>",
                  "<span>",
                  "Nx is open source",
                  "<span> Love Nx? Give us a star! </span>",
                  "</span>",
                  "</a>",
                  "</div>",
                  "</div>",
                  "<div id="commands" className="rounded shadow">",
                  "<h2>Next steps</h2>",
                  "<p>Here are some things you can do with Nx:</p>",
                  "<details>",
                  "<summary>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"",
                  "/>",
                  "</svg>",
                  "Add UI library",
                  "</summary>",
                  "<pre>",
                  "<span># Generate UI lib</span>",
                  "nx g @nx/next:library ui",
                  "<span># Add a component</span>",
                  "nx g @nx/next:component ui/src/lib/button",
                  "</pre>",
                  "</details>",
                  "<details>",
                  "<summary>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"",
                  "/>",
                  "</svg>",
                  "View project details",
                  "</summary>",
                  "<pre>nx show project test-app --web</pre>",
                  "</details>",
                  "<details>",
                  "<summary>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"",
                  "/>",
                  "</svg>",
                  "View interactive project graph",
                  "</summary>",
                  "<pre>nx graph</pre>",
                  "</details>",
                  "<details>",
                  "<summary>",
                  "<svg",
                  "fill="none"",
                  "stroke="currentColor"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M8 9l3 3-3 3m5 0h3M5 20h14a2 2 0 002-2V6a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"",
                  "/>",
                  "</svg>",
                  "Run affected commands",
                  "</summary>",
                  "<pre>",
                  "<span># see what&apos;s been affected by changes</span>",
                  "nx affected:graph",
                  "<span># run tests for current changes</span>",
                  "nx affected:test",
                  "<span># run e2e tests for current changes</span>",
                  "nx affected:e2e",
                  "</pre>",
                  "</details>",
                  "</div>",
                  "<p id="love">",
                  "Carefully crafted with",
                  "<svg",
                  "fill="currentColor"",
                  "stroke="none"",
                  "viewBox="0 0 24 24"",
                  "xmlns="http://www.w3.org/2000/svg"",
                  ">",
                  "<path",
                  "strokeLinecap="round"",
                  "strokeLinejoin="round"",
                  "strokeWidth="2"",
                  "d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"",
                  "/>",
                  "</svg>",
                  "</p>",
                  "</div>",
                  "</div>",
                  "</div>",
                  ");",
                  "}",
                ],
                "isBinary": false,
                "path": "./test-app/src/app/page.tsx",
              },
            },
            "path": "./test-app/src/app",
          },
        },
        "path": "./test-app/src",
      },
      "tailwind.config.js": {
        "content": [
          "const { createGlobPatternsForDependencies } = require('@nx/react/tailwind');",
          "const { join } = require('path');",
          "/** @type {import('tailwindcss').Config} */",
          "module.exports = {",
          "content: [",
          "join(",
          "__dirname,",
          "'{src,pages,components,app}/**/*!(*.stories|*.spec).{ts,tsx,html}'",
          "),",
          "...createGlobPatternsForDependencies(__dirname),",
          "],",
          "theme: {",
          "extend: {},",
          "},",
          "plugins: [require('daisyui')],",
          "};",
        ],
        "isBinary": false,
        "path": "./test-app/tailwind.config.js",
      },
      "tsconfig.json": {
        "content": [
          "{",
          ""extends": "../tsconfig.base.json",",
          ""compilerOptions": {",
          ""jsx": "preserve",",
          ""allowJs": true,",
          ""esModuleInterop": true,",
          ""allowSyntheticDefaultImports": true,",
          ""strict": true,",
          ""forceConsistentCasingInFileNames": true,",
          ""noEmit": true,",
          ""resolveJsonModule": true,",
          ""isolatedModules": true,",
          ""incremental": true,",
          ""plugins": [",
          "{",
          ""name": "next"",
          "}",
          "]",
          "},",
          ""include": [",
          ""**/*.ts",",
          ""**/*.tsx",",
          ""**/*.js",",
          ""**/*.jsx",",
          ""../test-app/.next/types/**/*.ts",",
          ""../dist/test-app/.next/types/**/*.ts",",
          ""next-env.d.ts",",
          "".next/types/**/*.ts"",
          "],",
          ""exclude": ["node_modules", "jest.config.ts", "**/*.spec.ts", "**/*.test.ts"]",
          "}",
        ],
        "isBinary": false,
        "path": "./test-app/tsconfig.json",
      },
    },
    "path": "./test-app",
  },
  "tsconfig.base.json": {
    "content": [
      "{",
      ""compilerOptions": {",
      ""paths": {",
      ""@/*": ["./test-app/*"],",
      ""@proj/anchor": ["anchor/src/index.ts"]",
      "}",
      "}",
      "}",
    ],
    "isBinary": false,
    "path": "./tsconfig.base.json",
  },
  "vercel.json": {
    "content": [
      "{",
      ""buildCommand": "npm run build",",
      ""outputDirectory": "dist/web/.next"",
      "}",
    ],
    "isBinary": false,
    "path": "./vercel.json",
  },
}
`;
