// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`next-template generator should generate files for base template 1`] = `
{
  "public": {
    "children": {
      "favicon.ico": {
        "content": null,
        "isBinary": true,
        "path": "test/public/favicon.ico",
      },
      "solana-logo.png": {
        "content": null,
        "isBinary": true,
        "path": "test/public/solana-logo.png",
      },
    },
    "path": "test/public",
  },
}
`;

exports[`next-template generator should generate files for none template 1`] = `
{
  "app": {
    "children": {
      "app-layout.tsx": {
        "content": [
          ""use client"",
          "import { ReactNode } from 'react'",
          "import Link from 'next/link'",
          "import dynamic from "next/dynamic";",
          "const WalletMultiButton = dynamic(",
          "async () =>",
          "(await import("@solana/wallet-adapter-react-ui")).WalletMultiButton,",
          "{ ssr: false }",
          ")",
          "export function AppLayout({ children }: { children: ReactNode }) {",
          "const { pathname } = { pathname: '' }",
          "const pages = [",
          "{ label: 'Airdrop', path: '/airdrop' },",
          "{ label: 'Page 1', path: '/page-1' },",
          "{ label: 'Page 2', path: '/page-2' },",
          "]",
          "return (",
          "<div>",
          "<div>",
          "<div>",
          "<Link href="/" >",
          "@solana-developers/preset-next",
          "</Link>",
          "<ul >",
          "{pages.map(({ label, path }) => (",
          "<li key={path}>",
          "<Link href={path}>",
          "{label}",
          "</Link>",
          "</li>",
          "))}",
          "</ul>",
          "</div>",
          "<div>",
          "<WalletMultiButton />",
          "</div>",
          "</div>",
          "<div>{children}</div>",
          "<footer>",
          "<aside>",
          "<p>Generated with @solana-developers/preset-next@0.0.1</p>",
          "</aside>",
          "</footer>",
          "</div>",
          ")",
          "}",
        ],
        "isBinary": false,
        "path": "test/app/app-layout.tsx",
      },
      "global.css": {
        "content": [
          "html,",
          "body {",
          "height: 100%;",
          "}",
        ],
        "isBinary": false,
        "path": "test/app/global.css",
      },
      "layout.tsx": {
        "content": [
          "import './global.css'",
          "import { AppLayout } from './app-layout'",
          "import { SolanaProvider } from './solana-provider'",
          "export const metadata = {",
          "title: 'Welcome to test',",
          "description: 'Generated by @solana-developers/preset-next@0.0.1',",
          "}",
          "export default function RootLayout({ children }: { children: React.ReactNode }) {",
          "return (",
          "<html lang="en">",
          "<body>",
          "<SolanaProvider>",
          "<AppLayout>",
          "{children}",
          "</AppLayout>",
          "</SolanaProvider>",
          "</body>",
          "</html>",
          ")",
          "}",
        ],
        "isBinary": false,
        "path": "test/app/layout.tsx",
      },
      "page.tsx": {
        "content": [
          "export default async function Index() {",
          "return (",
          "<div>",
          "<div>Index</div>",
          "</div>",
          ")",
          "}",
        ],
        "isBinary": false,
        "path": "test/app/page.tsx",
      },
      "solana-provider.tsx": {
        "content": [
          ""use client"",
          "import { WalletError } from '@solana/wallet-adapter-base';",
          "import {",
          "ConnectionProvider,",
          "WalletProvider,",
          "} from '@solana/wallet-adapter-react';",
          "import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';",
          "import { SolflareWalletAdapter } from '@solana/wallet-adapter-solflare';",
          "import { UnsafeBurnerWalletAdapter } from '@solana/wallet-adapter-unsafe-burner';",
          "import { Cluster, clusterApiUrl } from '@solana/web3.js';",
          "import {",
          "createContext,",
          "ReactNode,",
          "useCallback,",
          "useContext,",
          "useMemo,",
          "useState,",
          "} from 'react';",
          "require('@solana/wallet-adapter-react-ui/styles.css');",
          "export interface SolanaProviderContext {",
          "cluster: Cluster;",
          "endpoint: string;",
          "setCluster?: (cluster: Cluster) => void;",
          "}",
          "const Context = createContext<SolanaProviderContext>(",
          "{} as SolanaProviderContext",
          ");",
          "export function SolanaProvider({ children }: { children: ReactNode }) {",
          "const [cluster, setCluster] = useState<Cluster>('devnet');",
          "const endpoint = useMemo(() => clusterApiUrl(cluster), [cluster]);",
          "const wallets = useMemo(",
          "() => [new UnsafeBurnerWalletAdapter(), new SolflareWalletAdapter()],",
          "[cluster]",
          ");",
          "const onError = useCallback((error: WalletError) => {",
          "console.error(error);",
          "}, []);",
          "const value: SolanaProviderContext = {",
          "cluster,",
          "endpoint,",
          "setCluster,",
          "};",
          "return (",
          "<ConnectionProvider endpoint={endpoint}>",
          "<WalletProvider wallets={wallets} onError={onError} autoConnect={true}>",
          "<WalletModalProvider>",
          "<Context.Provider value={value}>{children}</Context.Provider>",
          "</WalletModalProvider>",
          "</WalletProvider>",
          "</ConnectionProvider>",
          ");",
          "}",
          "export function useSolana() {",
          "return useContext(Context);",
          "}",
        ],
        "isBinary": false,
        "path": "test/app/solana-provider.tsx",
      },
    },
    "path": "test/app",
  },
}
`;

exports[`next-template generator should generate files for tailwind template 1`] = `
{
  "app": {
    "children": {
      "app-layout.tsx": {
        "content": [
          ""use client"",
          "import { ReactNode } from 'react'",
          "import Link from 'next/link'",
          "import dynamic from "next/dynamic";",
          "const WalletMultiButton = dynamic(",
          "async () =>",
          "(await import("@solana/wallet-adapter-react-ui")).WalletMultiButton,",
          "{ ssr: false }",
          ")",
          "export function AppLayout({ children }: { children: ReactNode }) {",
          "const { pathname } = { pathname: '' }",
          "const pages = [",
          "{ label: 'Airdrop', path: '/airdrop' },",
          "{ label: 'Page 1', path: '/page-1' },",
          "{ label: 'Page 2', path: '/page-2' },",
          "]",
          "return (",
          "<div className="h-full flex flex-col">",
          "<div className="navbar bg-base-300 text-neutral-content">",
          "<div className="flex-1">",
          "<Link href="/" className="btn btn-ghost normal-case text-xl">",
          "@solana-developers/preset-next",
          "</Link>",
          "<ul className="menu menu-horizontal px-1">",
          "{pages.map(({ label, path }) => (",
          "<li key={path}>",
          "<Link className={pathname.startsWith(path) ? 'active' : ''} href={path}>",
          "{label}",
          "</Link>",
          "</li>",
          "))}",
          "</ul>",
          "</div>",
          "<div className="flex-none">",
          "<WalletMultiButton />",
          "</div>",
          "</div>",
          "<div className="flex-grow">{children}</div>",
          "<footer className="footer footer-center p-4 bg-base-300 text-base-content">",
          "<aside>",
          "<p>Generated with @solana-developers/preset-next@0.0.1</p>",
          "</aside>",
          "</footer>",
          "</div>",
          ")",
          "}",
        ],
        "isBinary": false,
        "path": "test/app/app-layout.tsx",
      },
      "global.css": {
        "content": [
          "html,",
          "body {",
          "height: 100%;",
          "}",
        ],
        "isBinary": false,
        "path": "test/app/global.css",
      },
      "layout.tsx": {
        "content": [
          "import './global.css'",
          "import { AppLayout } from './app-layout'",
          "import { SolanaProvider } from './solana-provider'",
          "export const metadata = {",
          "title: 'Welcome to test',",
          "description: 'Generated by @solana-developers/preset-next@0.0.1',",
          "}",
          "export default function RootLayout({ children }: { children: React.ReactNode }) {",
          "return (",
          "<html lang="en">",
          "<body>",
          "<SolanaProvider>",
          "<AppLayout>",
          "{children}",
          "</AppLayout>",
          "</SolanaProvider>",
          "</body>",
          "</html>",
          ")",
          "}",
        ],
        "isBinary": false,
        "path": "test/app/layout.tsx",
      },
      "page.tsx": {
        "content": [
          "export default async function Index() {",
          "return (",
          "<div>",
          "<div>Index</div>",
          "</div>",
          ")",
          "}",
        ],
        "isBinary": false,
        "path": "test/app/page.tsx",
      },
      "solana-provider.tsx": {
        "content": [
          ""use client"",
          "import { WalletError } from '@solana/wallet-adapter-base';",
          "import {",
          "ConnectionProvider,",
          "WalletProvider,",
          "} from '@solana/wallet-adapter-react';",
          "import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';",
          "import { SolflareWalletAdapter } from '@solana/wallet-adapter-solflare';",
          "import { UnsafeBurnerWalletAdapter } from '@solana/wallet-adapter-unsafe-burner';",
          "import { Cluster, clusterApiUrl } from '@solana/web3.js';",
          "import {",
          "createContext,",
          "ReactNode,",
          "useCallback,",
          "useContext,",
          "useMemo,",
          "useState,",
          "} from 'react';",
          "require('@solana/wallet-adapter-react-ui/styles.css');",
          "export interface SolanaProviderContext {",
          "cluster: Cluster;",
          "endpoint: string;",
          "setCluster?: (cluster: Cluster) => void;",
          "}",
          "const Context = createContext<SolanaProviderContext>(",
          "{} as SolanaProviderContext",
          ");",
          "export function SolanaProvider({ children }: { children: ReactNode }) {",
          "const [cluster, setCluster] = useState<Cluster>('devnet');",
          "const endpoint = useMemo(() => clusterApiUrl(cluster), [cluster]);",
          "const wallets = useMemo(",
          "() => [new UnsafeBurnerWalletAdapter(), new SolflareWalletAdapter()],",
          "[cluster]",
          ");",
          "const onError = useCallback((error: WalletError) => {",
          "console.error(error);",
          "}, []);",
          "const value: SolanaProviderContext = {",
          "cluster,",
          "endpoint,",
          "setCluster,",
          "};",
          "return (",
          "<ConnectionProvider endpoint={endpoint}>",
          "<WalletProvider wallets={wallets} onError={onError} autoConnect={true}>",
          "<WalletModalProvider>",
          "<Context.Provider value={value}>{children}</Context.Provider>",
          "</WalletModalProvider>",
          "</WalletProvider>",
          "</ConnectionProvider>",
          ");",
          "}",
          "export function useSolana() {",
          "return useContext(Context);",
          "}",
        ],
        "isBinary": false,
        "path": "test/app/solana-provider.tsx",
      },
    },
    "path": "test/app",
  },
}
`;
