// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`next-template generator should generate files for base template 1`] = `
{
  "public": {
    "children": {
      "favicon.ico": {
        "content": null,
        "isBinary": true,
        "path": "test/public/favicon.ico",
      },
      "solana-logo.png": {
        "content": null,
        "isBinary": true,
        "path": "test/public/solana-logo.png",
      },
    },
    "path": "test/public",
  },
}
`;

exports[`next-template generator should generate files for none template 1`] = `
{
  "app": {
    "children": {
      "app-layout.tsx": {
        "content": [
          "import { WalletMultiButton } from '@solana/wallet-adapter-react-ui';",
          "import { ReactNode } from 'react';",
          "import Link from 'next/link';",
          "export function AppLayout({ children }: { children: ReactNode }) {",
          "return (",
          "<div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>",
          "<div",
          "style={{",
          "display: 'flex',",
          "alignItems: 'center',",
          "justifyContent: 'space-between',",
          "padding: '6px 12px',",
          "}}",
          ">",
          "<div>",
          "<Link to="/">",
          "<img src="/assets/solana-logo.png" height={24} alt="Solana Logo" />",
          "</Link>",
          "</div>",
          "<div>",
          "<WalletMultiButton />",
          "</div>",
          "</div>",
          "<div style={{ flexGrow: 1, padding: '6px' }}>{children}</div>",
          "<footer",
          "style={{",
          "display: 'flex',",
          "alignItems: 'center',",
          "justifyContent: 'center',",
          "padding: '6px 10px',",
          "}}",
          ">",
          "<aside>",
          "<p>",
          "Generated by{' '}",
          "<a",
          "href="https://github.com/solana-developers/create-solana-dapp"",
          "target="_blank"",
          "rel="noopener noreferrer"",
          ">",
          "create-solana-dapp",
          "</a>",
          "</p>",
          "</aside>",
          "</footer>",
          "</div>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "test/app/app-layout.tsx",
      },
      "global.css": {
        "content": [
          "html,",
          "body {",
          "height: 100%;",
          "}",
        ],
        "isBinary": false,
        "path": "test/app/global.css",
      },
      "layout.tsx": {
        "content": [
          "import './global.css'",
          "import { AppLayout } from './app-layout'",
          "import { SolanaProvider } from './solana-provider'",
          "export const metadata = {",
          "title: 'test',",
          "description: 'Generated by create-solana-dapp',",
          "}",
          "export default function RootLayout({ children }: { children: React.ReactNode }) {",
          "return (",
          "<html lang="en">",
          "<body>",
          "<SolanaProvider>",
          "<AppLayout>",
          "{children}",
          "</AppLayout>",
          "</SolanaProvider>",
          "</body>",
          "</html>",
          ")",
          "}",
        ],
        "isBinary": false,
        "path": "test/app/layout.tsx",
      },
      "page.tsx": {
        "content": [
          "export default async function Index() {",
          "return (",
          "<div>",
          "<div>Index</div>",
          "</div>",
          ")",
          "}",
        ],
        "isBinary": false,
        "path": "test/app/page.tsx",
      },
      "solana-provider.tsx": {
        "content": [
          ""use client"",
          "import { WalletError } from '@solana/wallet-adapter-base';",
          "import {",
          "ConnectionProvider,",
          "WalletProvider,",
          "} from '@solana/wallet-adapter-react';",
          "import { WalletModalProvider } from '@solana/wallet-adapter-react-ui';",
          "import { SolflareWalletAdapter } from '@solana/wallet-adapter-solflare';",
          "import { Cluster, clusterApiUrl } from '@solana/web3.js';",
          "import {",
          "createContext,",
          "ReactNode,",
          "useCallback,",
          "useContext,",
          "useMemo,",
          "useState,",
          "} from 'react';",
          "require('@solana/wallet-adapter-react-ui/styles.css');",
          "export interface SolanaProviderContext {",
          "cluster: Cluster;",
          "endpoint: string;",
          "setCluster?: (cluster: Cluster) => void;",
          "}",
          "const Context = createContext<SolanaProviderContext>(",
          "{} as SolanaProviderContext",
          ");",
          "export function SolanaProvider({ children }: { children: ReactNode }) {",
          "const [cluster, setCluster] = useState<Cluster>('devnet');",
          "const endpoint = useMemo(() => clusterApiUrl(cluster), [cluster]);",
          "const wallets = useMemo(",
          "() => [new SolflareWalletAdapter()],",
          "[cluster]",
          ");",
          "const onError = useCallback((error: WalletError) => {",
          "console.error(error);",
          "}, []);",
          "const value: SolanaProviderContext = {",
          "cluster,",
          "endpoint,",
          "setCluster,",
          "};",
          "return (",
          "<ConnectionProvider endpoint={endpoint}>",
          "<WalletProvider wallets={wallets} onError={onError} autoConnect={true}>",
          "<WalletModalProvider>",
          "<Context.Provider value={value}>{children}</Context.Provider>",
          "</WalletModalProvider>",
          "</WalletProvider>",
          "</ConnectionProvider>",
          ");",
          "}",
          "export function useSolana() {",
          "return useContext(Context);",
          "}",
        ],
        "isBinary": false,
        "path": "test/app/solana-provider.tsx",
      },
    },
    "path": "test/app",
  },
}
`;

exports[`next-template generator should generate files for tailwind template 1`] = `
{
  "app": {
    "children": {
      "account": {
        "children": {
          "[address]": {
            "children": {
              "page.tsx": {
                "content": [
                  "import AccountDetailFeature from '@/components/account/account-detail-feature';",
                  "export default function Page() {",
                  "return <AccountDetailFeature />;",
                  "}",
                ],
                "isBinary": false,
                "path": "test/app/account/[address]/page.tsx",
              },
            },
            "path": "test/app/account/[address]",
          },
          "page.tsx": {
            "content": [
              "import AccountListFeature from '@/components/account/account-list-feature';",
              "export default function Page() {",
              "return <AccountListFeature />;",
              "}",
            ],
            "isBinary": false,
            "path": "test/app/account/page.tsx",
          },
        },
        "path": "test/app/account",
      },
      "clusters": {
        "children": {
          "page.tsx": {
            "content": [
              "import ClusterFeature from '@/components/cluster/cluster-feature'",
              "export default function Page() {",
              "return <ClusterFeature />;",
              "}",
            ],
            "isBinary": false,
            "path": "test/app/clusters/page.tsx",
          },
        },
        "path": "test/app/clusters",
      },
      "global.css": {
        "content": [
          "html,",
          "body {",
          "height: 100%;",
          "}",
          ".wallet-adapter-button-trigger {",
          "background: rgb(100, 26, 230) !important;",
          "border-radius: 8px !important;",
          "padding-left: 16px !important;",
          "padding-right: 16px !important;",
          "}",
          ".wallet-adapter-dropdown-list,",
          ".wallet-adapter-button {",
          "font-family: inherit !important;",
          "}",
        ],
        "isBinary": false,
        "path": "test/app/global.css",
      },
      "layout.tsx": {
        "content": [
          "import './global.css'",
          "import { UiLayout } from '@/components/ui/ui-layout';",
          "import { ClusterProvider } from '@/components/cluster/cluster-data-access';",
          "import { SolanaProvider } from '@/components/solana/solana-provider';",
          "import { Provider } from './provider';",
          "export const metadata = {",
          "title: 'test',",
          "description: 'Generated by create-solana-dapp',",
          "}",
          "export default function RootLayout({ children }: { children: React.ReactNode }) {",
          "return (",
          "<html lang="en">",
          "<body>",
          "<Provider>",
          "<ClusterProvider>",
          "<SolanaProvider>",
          "<UiLayout>",
          "{children}",
          "</UiLayout>",
          "</SolanaProvider>",
          "</ClusterProvider>",
          "</Provider>",
          "</body>",
          "</html>",
          ")",
          "}",
        ],
        "isBinary": false,
        "path": "test/app/layout.tsx",
      },
      "page.tsx": {
        "content": [
          "import DashboardFeature from '@/components/dashboard/dashboard-feature'",
          "export default function Page() {",
          "return <DashboardFeature />;",
          "}",
        ],
        "isBinary": false,
        "path": "test/app/page.tsx",
      },
      "provider.tsx": {
        "content": [
          "'use client';",
          "import React, { ReactNode, useState } from 'react';",
          "import { ReactQueryStreamedHydration } from '@tanstack/react-query-next-experimental';",
          "import { QueryClientProvider, QueryClient } from '@tanstack/react-query';",
          "export function Provider({ children }: { children: ReactNode }) {",
          "const [client] = useState(new QueryClient());",
          "return (",
          "<QueryClientProvider client={client}>",
          "<ReactQueryStreamedHydration>{children}</ReactQueryStreamedHydration>",
          "</QueryClientProvider>",
          ");",
          "}",
        ],
        "isBinary": false,
        "path": "test/app/provider.tsx",
      },
    },
    "path": "test/app",
  },
}
`;
